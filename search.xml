<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VCS-Ucli命令汇总</title>
      <link href="/2024/11/16/VCS-ucli%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
      <url>/2024/11/16/VCS-ucli%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下是一些常用的 VCS 调试命令，帮助更高效地进行仿真调试。<a><span id="more"></span></a></p></blockquote><table><thead><tr><th>命令</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td><strong>scope</strong></td><td>显示当前的顶层模块</td><td></td></tr><tr><td><strong>scope xxx</strong></td><td>进入 <code>xxx</code> 模块</td><td></td></tr><tr><td><strong>scope -up</strong></td><td>回到上一层模块</td><td></td></tr><tr><td><strong>show</strong></td><td>显示当前模块的信号及子模块</td><td></td></tr><tr><td><strong>show xxx -value -radix hex&#x2F;bin&#x2F;dec</strong></td><td>以特定进制（十六进制、二进制或十进制）显示信号值</td><td><code>xxx</code> 为信号名称</td></tr><tr><td><strong>run</strong></td><td>运行仿真，直到遇到 <code>$stop</code> 或设置的断点</td><td></td></tr><tr><td><strong>run xx</strong></td><td>运行仿真，持续 <code>xx</code> 时间后停止（不推荐使用）</td><td></td></tr><tr><td><strong>run -posedge xx</strong></td><td>运行仿真，直到信号 <code>xx</code> 的上升沿</td><td></td></tr><tr><td><strong>run -negedge xx</strong></td><td>运行仿真，直到信号 <code>xx</code> 的下降沿</td><td></td></tr><tr><td><strong>run -change xx</strong></td><td>运行仿真，直到信号 <code>xx</code> 变化时停止</td><td></td></tr><tr><td><strong>stop</strong></td><td>显示当前已经设置的断点</td><td></td></tr><tr><td><strong>stop -posedge xx</strong></td><td>在信号 <code>xx</code> 的上升沿设置断点</td><td></td></tr><tr><td><strong>stop -negedge xx</strong></td><td>在信号 <code>xx</code> 的下降沿设置断点</td><td></td></tr><tr><td><strong>stop -condition {信号表达式}</strong></td><td>在信号表达式为真时设置断点</td><td>例如：<code>stop -condition &#123;a == 1&#125;</code></td></tr><tr><td><strong>stop -delete xx</strong></td><td>删除编号为 <code>xx</code> 的断点</td><td><code>xx</code> 为断点编号</td></tr><tr><td><strong>restart</strong></td><td>重新启动 UCLI 调试</td><td></td></tr><tr><td><strong>&lt;cmd&gt; -h</strong></td><td>查询某个命令的帮助信息</td><td><code>&lt;cmd&gt;</code> 为具体的命令，例如 <code>run -h</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> IC </category>
          
          <category> VCS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DV </tag>
            
            <tag> VCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VCS动态加载DPI共享库(.so)</title>
      <link href="/2024/11/16/VCS%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDDPI%E5%85%B1%E4%BA%AB%E5%BA%93(.so)/"/>
      <url>/2024/11/16/VCS%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDDPI%E5%85%B1%E4%BA%AB%E5%BA%93(.so)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在使用Verilog&#x2F;SystemVerilog进行硬件验证时，动态加载DPI（Direct Programming Interface）共享库是一个常见且强大的功能。通过这种方式，我们可以将C或C++代码与Verilog代码结合起来，以实现更复杂的验证任务。本文将介绍如何在VCS仿真环境中动态加载DPI共享库，以及如何高效地管理这些库文件。<a><span id="more"></span></a></p></blockquote><h2 id="VCS编译与DPI共享库"><a href="#VCS编译与DPI共享库" class="headerlink" title="VCS编译与DPI共享库"></a><a>VCS编译与DPI共享库</a></h2><p>在VCS中，我们通常先进行VCS的编译（<code>vcs compile</code>），然后通过调用GCC编译器生成C语言的<code>.so</code>文件（共享库）。这些<code>.so</code>文件包含了C&#x2F;C++代码，可以在仿真时与SystemVerilog代码进行交互。</p><h3 id="动态加载DPI共享库"><a href="#动态加载DPI共享库" class="headerlink" title="动态加载DPI共享库"></a>动态加载DPI共享库</h3><p>在仿真运行时（<code>vcs run</code>），需要手动加载这些<code>.so</code>文件。VCS提供了两种命令行选项来加载DPI共享库，具体方式如下：</p><ul><li><strong>使用<code>-sv_liblist</code>指定.so的列表文件（Bootstrap file）</strong><br>这种方式需要提供一个列表文件，其中列出了所有需要加载的<code>.so</code>文件（不需要加文件后缀名）。这个文件将包含所有依赖的共享库路径，VCS会根据这些信息动态加载相关的库。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-sv_liblist Bootstrap.file</span><br></pre></td></tr></table></figure><ul><li><strong>使用<code>-sv_lib</code>逐个指定共享库</strong><br>你也可以通过<code>-sv_lib</code>选项手动指定每个<code>.so</code>库。注意，库名不需要加<code>.so</code>后缀。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-sv_lib libname</span><br></pre></td></tr></table></figure><h3 id="配置DPI共享库根目录"><a href="#配置DPI共享库根目录" class="headerlink" title="配置DPI共享库根目录"></a>配置DPI共享库根目录</h3><p><code>-sv_root</code>选项用于指定DPI共享库的根目录。这个目录是共享库查找的起始路径。通过设置这个选项，我们可以确保仿真器在正确的位置查找和加载共享库。特别是，这个路径还支持环境变量<code>$ENV</code>，使得路径设置更加灵活。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-sv_root /home/user</span><br></pre></td></tr></table></figure><h2 id="示例配置"><a href="#示例配置" class="headerlink" title="示例配置"></a><a>示例配置</a></h2><p>假设我们有一组共享库文件，分别位于不同的目录。可以通过以下两种方式进行配置：</p><h4 id="使用-sv-liblist"><a href="#使用-sv-liblist" class="headerlink" title="使用-sv_liblist"></a>使用<code>-sv_liblist</code></h4><p>首先，设置DPI共享库根目录，然后指定包含共享库路径的列表文件（<code>Bootstrap.file</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-sv_root /home/user</span><br><span class="line">-sv_liblist Bootstrap.file</span><br></pre></td></tr></table></figure><h4 id="使用-sv-lib"><a href="#使用-sv-lib" class="headerlink" title="使用-sv_lib"></a>使用<code>-sv_lib</code></h4><p>另外一种方式是直接指定每个共享库的路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-sv_root /home/user</span><br><span class="line">-sv_lib myclibs/lib1</span><br><span class="line">-sv_lib myclibs/lib3</span><br><span class="line">-sv_lib proj1/clibs/lib4</span><br></pre></td></tr></table></figure><p>这会加载以下路径的共享库：</p><ul><li><code>/home/user/myclibs/lib1.so</code></li><li><code>/home/user/myclibs/lib3.so</code></li><li><code>/home/user/proj1/clibs/lib4.so</code></li></ul><h3 id="sv-liblist示例"><a href="#sv-liblist示例" class="headerlink" title="sv_liblist示例"></a>sv_liblist示例</h3><p>在<code>Bootstrap.file</code>文件中，你可以列出所有需要加载的共享库。文件内容可能类似如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myclibs/lib1</span><br><span class="line">myclibs/lib3</span><br><span class="line">proj1/clibs/lib4</span><br></pre></td></tr></table></figure><p>这些库的完整路径将在仿真过程中被解析为：</p><ul><li><code>/home/user/myclibs/lib1.so</code></li><li><code>/home/user/myclibs/lib3.so</code></li><li><code>/home/user/proj1/clibs/lib4.so</code></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a>总结</a></h2><p>动态加载DPI共享库是一种强大的技术，能够帮助我们在VCS仿真过程中将C&#x2F;C++代码与Verilog代码无缝集成。通过使用<code>-sv_liblist</code>或<code>-sv_lib</code>选项，我们可以灵活地加载多个共享库，而<code>-sv_root</code>选项则允许我们指定共享库的根目录。这些功能不仅提高了仿真效率，还增加了配置的灵活性。</p><p>如果你正在进行复杂的硬件验证，尤其是需要与C&#x2F;C++代码交互时，掌握这些DPI共享库加载技巧将大大提高你的工作效率。</p>]]></content>
      
      
      <categories>
          
          <category> IC </category>
          
          <category> VCS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DV </tag>
            
            <tag> VCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提高VCS仿真效率-UVM Runtime Cmdline和VCS分块编译</title>
      <link href="/2024/11/16/%E6%8F%90%E9%AB%98VCS%E4%BB%BF%E7%9C%9F%E6%95%88%E7%8E%87-UVM%20Runtime%20Cmdline%E5%92%8CVCS%E5%88%86%E5%9D%97%E7%BC%96%E8%AF%91/"/>
      <url>/2024/11/16/%E6%8F%90%E9%AB%98VCS%E4%BB%BF%E7%9C%9F%E6%95%88%E7%8E%87-UVM%20Runtime%20Cmdline%E5%92%8CVCS%E5%88%86%E5%9D%97%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在实际验证过程中，仿真效率是我们常常面临的挑战之一。尤其是在修改代码时，明明只改动了一个文件（例如，在testcase中增加了一行打印），但编译却需要重新编译整个工程中的所有文件。这种情况不仅浪费了大量时间，还显著降低了仿真效率。为了应对这种问题，常用的解决方法有两种：充分利用UVM的runtime cmdline传递参数机制和增量编译。然而，即使采用了增量编译，仿真效率仍然受到一定影响，因为仿真器无法准确识别哪些文件已经被修改。那么，是否有其他方法可以进一步提高仿真效率呢？答案是：分块编译（Partition Compile）。本文将详细介绍这两种方法及其优缺点，特别是分块编译如何作为增量编译的一种有效补充。<a><span id="more"></span></a></p></blockquote><h2 id="1-充分利用UVM的runtime-cmdline传递参数机制"><a href="#1-充分利用UVM的runtime-cmdline传递参数机制" class="headerlink" title="1. 充分利用UVM的runtime cmdline传递参数机制"></a><a>1. 充分利用UVM的runtime cmdline传递参数机制</a></h2><p>在UVM中，我们可以通过命令行动态地传递参数，而不必重新编译代码。这对于提高仿真效率非常重要，因为每次修改UVM相关参数时，都可以避免重新编译整个项目。</p><p>比如，在测试过程中，我们可以使用命令行来动态修改UVM的相关参数，如<code>UVM_TESTNAME</code>、<code>UVM_VERBOSITY</code>等，这样就能在运行时直接影响UVM环境的行为，而不需要重新编译源代码。具体来说，只需在仿真启动时通过命令行传递这些参数，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcs +UVM_TESTNAME=test1 +UVM_VERBOSITY=UVM_LOW</span><br></pre></td></tr></table></figure><p>这种方式不仅避免了不必要的重新编译，还能更灵活地调整仿真设置，提高工作效率。</p><h2 id="2-增量编译"><a href="#2-增量编译" class="headerlink" title="2. 增量编译"></a><a>2. 增量编译</a></h2><p>增量编译是提升仿真效率的另一种常用方法。它的理想情况是：只有修改过的文件需要重新编译，而未修改的文件则跳过编译。通过这种方式，我们可以显著减少编译时间。</p><p>在VCS中，增量编译可以通过添加<code>-Mupdate</code>参数来启用。该参数允许仿真器检测文件是否发生了修改，只有修改过的文件才会被重新编译。然而，实际使用中，我们发现即使启用了增量编译，仿真器依然会重新编译一些未修改的文件。这是因为仿真器的优化能力还不够，无法准确识别哪些文件被修改了。</p><h2 id="3-VCS分块编译（Partition-Compile）"><a href="#3-VCS分块编译（Partition-Compile）" class="headerlink" title="3. VCS分块编译（Partition Compile）"></a><a>3. VCS分块编译（Partition Compile）</a></h2><p>为了进一步提高仿真效率，VCS提供了一种名为<strong>分块编译（Partition Compile）</strong>的方法。分块编译的核心思想是将整个工程中的文件划分为多个独立的“块”，只有当某个块中的文件被修改时，才会重新编译该块中的文件。通过这种方式，我们可以减少每次编译所需处理的文件数量，从而提高仿真效率。</p><h3 id="分块编译的基本原理"><a href="#分块编译的基本原理" class="headerlink" title="分块编译的基本原理"></a>分块编译的基本原理</h3><p>分块编译的本质是将代码拆分成若干个独立的块，每个块都包含一组相关的文件。只有当某个块中的文件发生变化时，仿真器才会重新编译该块。而在其他块中没有修改的文件则不会被重新编译。因此，通过合理划分这些块，我们可以减少编译的范围，从而提高效率。</p><p>然而，分块编译的精细程度需要在“精细”和“高效”之间找到一个平衡。如果将文件拆分得过细，仿真器需要处理的块会增多，从而消耗更多的系统时间；如果块划分过粗，又可能导致重新编译的文件过多。因此，在块分割的粒度上，需要根据实际情况进行调节。</p><h3 id="VCS分块编译的实现"><a href="#VCS分块编译的实现" class="headerlink" title="VCS分块编译的实现"></a>VCS分块编译的实现</h3><p>在VCS中，我们可以通过添加<code>-partcomp</code>参数来启用分块编译功能。具体的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcs -partcomp</span><br></pre></td></tr></table></figure><p>此外，VCS还支持自动划分Partition的大小和数量，可以通过以下选项来指定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcs -partcomp=autopart_[low|medium|high]</span><br></pre></td></tr></table></figure><p>这三个选项分别对应不同的分块粒度（低、中、高），一般情况下可以使用<a>默认设置</a>，不必手动调整。</p><ul><li>添加<code>-pcmakeprof</code>把编译过程中的每一步所花费的时间做分析打印，并在编译日志的结尾进行输出，这样方便比较不同编译参数所花费的编译时间的区别。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcs -pcmakeprof</span><br></pre></td></tr></table></figure></li></ul><h4 id="纵向分析：VCS仿真流程"><a href="#纵向分析：VCS仿真流程" class="headerlink" title="纵向分析：VCS仿真流程"></a>纵向分析：VCS仿真流程</h4><table><thead><tr><th>阶段</th><th>描述</th><th>作用&#x2F;功能</th></tr></thead><tbody><tr><td><strong>Parsing</strong></td><td>解析过程，读取文件并进行语法分析。</td><td>将Verilog&#x2F;SystemVerilog源代码转换为仿真器可以理解的格式，检查语法和结构的正确性。</td></tr><tr><td><strong>_Elabcom</strong></td><td>编译文件生成过程，生成提供给Verdi解析的编译文件（需要<code>-kdb</code>选项）。</td><td>生成仿真器调试信息，供Verdi等工具解析和调试。</td></tr><tr><td><strong>Compiling</strong></td><td>编译过程，检查语法错误并生成中间二进制文件。</td><td>检查Verilog&#x2F;SystemVerilog代码中的语法错误，并生成Elaboration阶段可以识别的二进制文件。</td></tr><tr><td><strong>Elaboration</strong></td><td>精化过程，计算模块的参数值，处理模块的绑定关系，生成最终可执行文件<code>simv</code>。</td><td>根据设计层次结构计算参数，处理模块绑定关系，生成最终的可执行仿真文件<code>simv</code>。</td></tr></tbody></table><h4 id="横向分析：VCS仿真性能指标"><a href="#横向分析：VCS仿真性能指标" class="headerlink" title="横向分析：VCS仿真性能指标"></a>横向分析：VCS仿真性能指标</h4><table><thead><tr><th>性能指标</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td><strong>Real time</strong></td><td>程序从开始到结束的总时间。</td><td>仿真程序执行的真实时间，包括所有计算、I&#x2F;O操作等。</td></tr><tr><td><strong>User time</strong></td><td>程序在用户模式下的CPU耗时。</td><td>仿真程序在执行用户代码时消耗的CPU时间。通常与程序逻辑的复杂度相关。</td></tr><tr><td><strong>Sys time</strong></td><td>程序在内核模式下的CPU耗时。</td><td>仿真程序在执行系统调用、I&#x2F;O操作等内核级任务时消耗的CPU时间。</td></tr><tr><td><strong>Virt</strong></td><td>程序的虚拟内存空间大小。</td><td>仿真程序的虚拟内存空间大小，包括所有可访问的内存地址空间。</td></tr><tr><td><strong>Res</strong></td><td>程序已映射到物理内存的部分。</td><td>程序在物理内存中占用的实际空间。</td></tr><tr><td><strong>Shr</strong></td><td>程序占用的共享内存大小。</td><td>仿真程序占用的共享内存区域，多个进程可能会访问这些内存。</td></tr></tbody></table><h3 id="手动指定Partition"><a href="#手动指定Partition" class="headerlink" title="手动指定Partition"></a>手动指定Partition</h3><p>如果需要更精细的控制，我们还可以手动指定Partition。通过在VCS编译命令中指定<code>-topcfg</code>选项，可以指定特定的配置文件，并在该配置文件中定义Partition。示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcs -partcomp -top topcfg topcfg.v</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/16/cUY6sTmnyQdZoXR.png" alt="image-20241116134607941"></p><ul><li><code>-top</code>后面跟的topcfg根据我的实测是topcfg中的<code>config_name</code></li></ul><p>在<code>topcfg.v</code>文件中，我们可以定义具体的Partition，示例如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">config</span> topcfg;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">design</span>    apb_tb;</span><br><span class="line">  partition <span class="keyword">package</span> uvm_pkg;</span><br><span class="line">  partition <span class="keyword">package</span> svt_amba_uvm_pkg;</span><br><span class="line">  partition <span class="keyword">package</span> svt_uvm_pkg;</span><br><span class="line">  partition <span class="keyword">package</span> apb_pkg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endconfig</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们将<code>apb_tb</code>、<code>uvm_pkg</code>、<code>svt_amba_uvm_pkg</code>、<code>svt_uvm_pkg</code>和<code>apb_pkg</code>分别定义为独立的Partition，当其中的文件发生变化时，仿真器只会重新编译相应的Partition。(其中apb_tb是我顶层的tb)</p><h3 id="Partition并行参数"><a href="#Partition并行参数" class="headerlink" title="Partition并行参数"></a>Partition并行参数</h3><ul><li><code>-fastpartcomp=j4 </code>中的 <code>j4</code> 表示使用 4 个并行作业来执行编译任务。并行处理的优势在于，它可以同时处理多个部分，大大提高编译效率（j和4之间没有空白字符）。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-fastpartcomp=j4</span><br></pre></td></tr></table></figure><h2 id="避免在-unit空间导入package：增量编译效率的陷阱"><a href="#避免在-unit空间导入package：增量编译效率的陷阱" class="headerlink" title="避免在$unit空间导入package：增量编译效率的陷阱"></a><a>避免在$unit空间导入package：增量编译效率的陷阱</a></h2><p>在进行Verilog&#x2F;SystemVerilog的设计和验证时，增量编译是一项至关重要的技术，它能够有效减少编译时间，提高仿真效率。然而，在实际使用过程中，我们需要注意一些常见的陷阱，特别是在项目的$unit空间中导入package（包）这一做法。</p><h3 id="什么是-unit空间？"><a href="#什么是-unit空间？" class="headerlink" title="什么是$unit空间？"></a>什么是$unit空间？</h3><p>在Verilog&#x2F;SystemVerilog中，<code>$unit</code>空间指的是<strong>顶层全局空间</strong>，通常是<code>package...endpackage</code>、<code>module...endmodule</code>、<code>interface...endinterface</code>之外的部分。简单来说，$unit层次是指那些不属于具体模块、接口或包的地方。它包括了定义文件级别的各种设置或行为的区域。</p><h3 id="为什么避免在-unit空间导入package？"><a href="#为什么避免在-unit空间导入package？" class="headerlink" title="为什么避免在$unit空间导入package？"></a>为什么避免在$unit空间导入package？</h3><p>导入<code>package</code>的本意是为了共享其中的定义、类型、函数等，避免重复编写相同的代码。但如果我们在$unit空间导入<code>package</code>，会带来以下几个问题：</p><ol><li><strong>增量编译失效</strong>： 当我们在$unit空间导入一个<code>package</code>时，这个<code>package</code>的变动将直接影响到所有使用它的模块和文件。假设这个<code>package</code>被多次导入，那么在后续修改<code>package</code>中的内容时，仿真器无法精确识别哪些文件发生了变化，进而会导致整个项目的重新编译。这使得增量编译失效，浪费大量编译时间。</li><li><strong>影响编译效率</strong>： 增量编译的核心优势是<strong>仅编译修改过的部分文件</strong>，但如果我们在$unit空间导入<code>package</code>，会使得修改<code>package</code>文件后，所有依赖它的模块都会被重新编译。对于大型项目来说，这种情况会显著降低编译效率，特别是当<code>package</code>较为庞大或被多个模块依赖时，编译时间会显著增加。</li><li><strong>影响项目的可维护性</strong>： 在$unit空间中随意导入<code>package</code>，可能导致代码结构混乱，依赖关系复杂，难以追溯具体依赖了哪些文件，增加了调试和维护的难度。</li></ol><h3 id="如何避免这个问题？"><a href="#如何避免这个问题？" class="headerlink" title="如何避免这个问题？"></a>如何避免这个问题？</h3><p>为了避免在$unit空间导入<code>package</code>带来的问题，我们可以采取以下策略：</p><ol><li><strong>局部导入<code>package</code></strong><br> 最好将<code>package</code>的导入限制在具体的模块、接口或包内部。这样只有在需要的地方才会导入，而不会影响到整个项目的编译。</li><li><strong>合理划分文件结构</strong><br> 尽量将公共包和模块隔离开来，在独立的文件夹中进行管理，避免包的导入影响到顶层全局空间。</li><li><strong>避免频繁修改核心<code>package</code></strong><br> 如果<code>package</code>中包含了多个常用的定义或函数，尽量减少对其结构的修改。若确实需要修改，尽量使这些修改局部化，避免频繁改动全局影响。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a>总结</a></h2><p>提高仿真效率是每个验证工程师都希望解决的问题，尤其是在大型项目中，避免不必要的全量编译可以显著节省时间。通过UVM的runtime cmdline参数机制，我们可以避免重新编译整个项目，只通过命令行传递参数来修改UVM环境；通过增量编译，我们可以减少不必要的文件编译，但仍会遇到仿真器无法精确识别文件修改的情况；而VCS的分块编译则是一种有效的补充方法，它通过将文件划分为多个独立的块，减少每次需要重新编译的文件数量，从而提高仿真效率。</p><p>在实际工作中，我们可以根据项目的需求和仿真器的表现来选择合适的优化方式。分块编译作为增量编译的补充，将会在提高效率和缩短仿真时间方面发挥重要作用。</p>]]></content>
      
      
      <categories>
          
          <category> IC </category>
          
          <category> VCS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DV </tag>
            
            <tag> VCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的基本命令</title>
      <link href="/2024/11/10/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/11/10/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Git 是一种分布式版本控制系统，广泛用于管理代码和文件的版本控制。它允许多个开发者在同一项目中并行工作，同时跟踪每个文件的修改历史，方便合并更改并解决冲突。<a><span id="more"></span></a></p></blockquote><h3 id="Git-基础操作"><a href="#Git-基础操作" class="headerlink" title="Git 基础操作"></a><a>Git 基础操作</a></h3><h4 id="1-初始化-Git-仓库"><a href="#1-初始化-Git-仓库" class="headerlink" title="1. 初始化 Git 仓库"></a>1. <strong>初始化 Git 仓库</strong></h4><p>在一个文件夹中初始化一个新的 Git 仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>这将创建一个 <code>.git</code> 文件夹，Git 用它来跟踪版本和历史。</p><h4 id="2-克隆现有仓库"><a href="#2-克隆现有仓库" class="headerlink" title="2. 克隆现有仓库"></a>2. <strong>克隆现有仓库</strong></h4><p>克隆一个现有的 Git 仓库到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repository_url&gt;</span><br></pre></td></tr></table></figure><p>例如，克隆 GitHub 上的一个仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/username/repository.git</span><br></pre></td></tr></table></figure><h4 id="3-检查-Git-状态"><a href="#3-检查-Git-状态" class="headerlink" title="3. 检查 Git 状态"></a>3. <strong>检查 Git 状态</strong></h4><p>查看当前工作目录和暂存区的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>它会显示哪些文件已更改、哪些文件未被跟踪、哪些文件已暂存等信息。</p><h4 id="4-添加文件到暂存区"><a href="#4-添加文件到暂存区" class="headerlink" title="4. 添加文件到暂存区"></a>4. <strong>添加文件到暂存区</strong></h4><p>将文件添加到暂存区（准备提交）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>如果要添加所有更改的文件，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h4 id="5-提交更改"><a href="#5-提交更改" class="headerlink" title="5. 提交更改"></a>5. <strong>提交更改</strong></h4><p>提交暂存区的更改到本地仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Commit message&quot;</span></span><br></pre></td></tr></table></figure><p><code>-m</code> 后面是提交信息，简要描述这次提交的内容。</p><h4 id="6-查看提交历史"><a href="#6-查看提交历史" class="headerlink" title="6. 查看提交历史"></a>6. <strong>查看提交历史</strong></h4><p>查看提交的历史记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>这将列出所有提交，包括提交ID、作者、提交时间和提交信息。</p><h4 id="7-创建和切换分支"><a href="#7-创建和切换分支" class="headerlink" title="7. 创建和切换分支"></a>7. <strong>创建和切换分支</strong></h4><p>创建并切换到一个新分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><p>切换到已有分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><h4 id="8-合并分支"><a href="#8-合并分支" class="headerlink" title="8. 合并分支"></a>8. <strong>合并分支</strong></h4><p>将另一个分支的更改合并到当前分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><p>如果存在冲突，Git 会提示你手动解决冲突。</p><h4 id="9-推送更改到远程仓库"><a href="#9-推送更改到远程仓库" class="headerlink" title="9. 推送更改到远程仓库"></a>9. <strong>推送更改到远程仓库</strong></h4><p>将本地提交推送到远程仓库（如 GitHub）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><p>如果是第一次推送一个新分支，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><h4 id="10-拉取远程仓库的更改"><a href="#10-拉取远程仓库的更改" class="headerlink" title="10. 拉取远程仓库的更改"></a>10. <strong>拉取远程仓库的更改</strong></h4><p>获取远程仓库的更新并合并到本地分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><p>这相当于 <code>git fetch</code> 和 <code>git merge</code> 的组合。</p><h4 id="11-删除分支"><a href="#11-删除分支" class="headerlink" title="11. 删除分支"></a>11. <strong>删除分支</strong></h4><p>删除本地分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制代码</span><br><span class="line">git branch -d &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><p>删除远程分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><h4 id="12-查看差异"><a href="#12-查看差异" class="headerlink" title="12. 查看差异"></a>12. <strong>查看差异</strong></h4><p>查看文件修改的差异：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>查看已暂存的更改与最后提交的差异：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --staged</span><br></pre></td></tr></table></figure><h4 id="13-撤销更改"><a href="#13-撤销更改" class="headerlink" title="13. 撤销更改"></a>13. <strong>撤销更改</strong></h4><p>如果想撤销对某个文件的修改，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>如果想撤销暂存区的更改（还没有提交的更改）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>要完全撤销最后一次提交的更改（保留文件，但撤销提交）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure><h4 id="14-解决冲突"><a href="#14-解决冲突" class="headerlink" title="14. 解决冲突"></a>14. <strong>解决冲突</strong></h4><p>如果在合并过程中出现冲突，Git 会标记出冲突部分。你需要手动解决冲突，然后使用以下命令标记冲突已解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;conflicted_file&gt;</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><h4 id="15-标签"><a href="#15-标签" class="headerlink" title="15. 标签"></a>15. <strong>标签</strong></h4><p>标签用于标记重要的提交，例如版本发布：</p><p>创建一个标签：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tag_name&gt;</span><br></pre></td></tr></table></figure><p>查看所有标签：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p>推送标签到远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;tag_name&gt;</span><br></pre></td></tr></table></figure><h3 id="Git-常用配置"><a href="#Git-常用配置" class="headerlink" title="Git 常用配置"></a><a>Git 常用配置</a></h3><h4 id="1-配置用户名和邮箱-设置-Git-用户名和邮箱是必要的，它们将用于提交记录"><a href="#1-配置用户名和邮箱-设置-Git-用户名和邮箱是必要的，它们将用于提交记录" class="headerlink" title="1. 配置用户名和邮箱 设置 Git 用户名和邮箱是必要的，它们将用于提交记录"></a>1. <strong>配置用户名和邮箱</strong> 设置 Git 用户名和邮箱是必要的，它们将用于提交记录</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-查看配置-查看-Git-配置信息"><a href="#2-查看配置-查看-Git-配置信息" class="headerlink" title="2. 查看配置 查看 Git 配置信息"></a>2. <strong>查看配置</strong> 查看 Git 配置信息</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><h4 id="3-全局忽略文件-创建一个-gitignore-文件，列出不需要版本控制的文件或文件夹。例"><a href="#3-全局忽略文件-创建一个-gitignore-文件，列出不需要版本控制的文件或文件夹。例" class="headerlink" title="3. 全局忽略文件 创建一个 .gitignore 文件，列出不需要版本控制的文件或文件夹。例"></a>3. <strong>全局忽略文件</strong> 创建一个 <code>.gitignore</code> 文件，列出不需要版本控制的文件或文件夹。例</h4>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*.log</span><br><span class="line">*.tmp</span><br><span class="line">/node_modules</span><br></pre></td></tr></table></figure><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a><a>其他常用命令</a></h3><ul><li><p><strong>查看本地仓库信息</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li><li><p><strong>添加远程仓库</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;repository_url&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>查看分支信息</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></li><li><p><strong>查看文件历史</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git blame &lt;filename&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-rm-的常用用法"><a href="#git-rm-的常用用法" class="headerlink" title="git rm 的常用用法"></a><a><code>git rm</code> 的常用用法</a></h3><h4 id="1-删除一个文件-删除一个文件，并将删除操作加入暂存区，准备提交"><a href="#1-删除一个文件-删除一个文件，并将删除操作加入暂存区，准备提交" class="headerlink" title="1. 删除一个文件 删除一个文件，并将删除操作加入暂存区，准备提交"></a>1. <strong>删除一个文件</strong> 删除一个文件，并将删除操作加入暂存区，准备提交</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;file_name&gt;</span><br></pre></td></tr></table></figure><p>   例如，删除文件 <code>example.txt</code>：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> example.txt</span><br></pre></td></tr></table></figure><p>   删除后，Git 会把这个删除操作添加到暂存区，在下一次提交时会从 Git 仓库中移除该文件。</p><h4 id="2-删除一个文件并保留本地文件-如果你希望删除-Git-仓库中的文件，但保留工作目录中的文件（即本地文件不被删除），可以使用-cached-选项"><a href="#2-删除一个文件并保留本地文件-如果你希望删除-Git-仓库中的文件，但保留工作目录中的文件（即本地文件不被删除），可以使用-cached-选项" class="headerlink" title="2. 删除一个文件并保留本地文件 如果你希望删除 Git 仓库中的文件，但保留工作目录中的文件（即本地文件不被删除），可以使用 --cached 选项"></a>2. <strong>删除一个文件并保留本地文件</strong> 如果你希望删除 Git 仓库中的文件，但保留工作目录中的文件（即本地文件不被删除），可以使用 <code>--cached</code> 选项</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached &lt;file_name&gt;</span><br></pre></td></tr></table></figure><p>   例如，删除文件 <code>example.txt</code> 但保留本地副本：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached example.txt</span><br></pre></td></tr></table></figure><p>   这样做会将文件从 Git 仓库中删除，但文件仍然会保留在你的工作目录中。此操作常用于从 Git 仓库中移除敏感文件（如 <code>.env</code> 文件），但不希望本地文件被删除。</p><h4 id="3-删除多个文件-你可以使用通配符或多个文件路径来一次性删除多个文件"><a href="#3-删除多个文件-你可以使用通配符或多个文件路径来一次性删除多个文件" class="headerlink" title="3. 删除多个文件 你可以使用通配符或多个文件路径来一次性删除多个文件"></a>3. <strong>删除多个文件</strong> 你可以使用通配符或多个文件路径来一次性删除多个文件</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;file1&gt; &lt;file2&gt; &lt;file3&gt;</span><br></pre></td></tr></table></figure><p>   或者使用通配符删除所有 <code>.log</code> 文件：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> *.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><h4 id="4-删除目录-如果你想删除整个目录及其内容，可以使用-r-选项"><a href="#4-删除目录-如果你想删除整个目录及其内容，可以使用-r-选项" class="headerlink" title="4. 删除目录 如果你想删除整个目录及其内容，可以使用 -r 选项"></a>4. <strong>删除目录</strong> 如果你想删除整个目录及其内容，可以使用 <code>-r</code> 选项</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r &lt;directory_name&gt;</span><br></pre></td></tr></table></figure><p>   这将递归删除目录及其所有文件和子目录。</p><h3 id="删除文件后的操作"><a href="#删除文件后的操作" class="headerlink" title="删除文件后的操作"></a>删除文件后的操作</h3><p>在删除文件后，你需要提交更改以将删除操作记录到 Git 仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Removed unnecessary files&quot;</span></span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="1-删除一个文件并提交：-假设你要删除文件-test-txt"><a href="#1-删除一个文件并提交：-假设你要删除文件-test-txt" class="headerlink" title="1. 删除一个文件并提交： 假设你要删除文件 test.txt"></a>1. <strong>删除一个文件并提交：</strong> 假设你要删除文件 <code>test.txt</code></h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> test.txt</span><br><span class="line">git commit -m <span class="string">&quot;Remove test.txt&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-仅从-Git-仓库中删除文件，保留本地文件：-假设你想从-Git-中删除文件-secrets-txt，但保留本地文件"><a href="#2-仅从-Git-仓库中删除文件，保留本地文件：-假设你想从-Git-中删除文件-secrets-txt，但保留本地文件" class="headerlink" title="2. 仅从 Git 仓库中删除文件，保留本地文件： 假设你想从 Git 中删除文件 secrets.txt，但保留本地文件"></a>2. <strong>仅从 Git 仓库中删除文件，保留本地文件：</strong> 假设你想从 Git 中删除文件 <code>secrets.txt</code>，但保留本地文件</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached secrets.txt</span><br><span class="line">git commit -m <span class="string">&quot;Remove secrets.txt from the repository&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDR时序参数</title>
      <link href="/2024/11/09/DDR%E6%97%B6%E5%BA%8F%E5%8F%82%E6%95%B0/"/>
      <url>/2024/11/09/DDR%E6%97%B6%E5%BA%8F%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>PHY手册中ddr的时序参数和uMCTL2的时序参数，以及时序图 <a><span id="more"></span></a></p></blockquote><p><img src="https://s2.loli.net/2024/11/09/QqsBcDPluRTxv18.png" alt="image-20241109195426624"></p><p><img src="https://s2.loli.net/2024/11/09/9WQcjHUTiREafx2.png" alt="image-20241109195501856"></p><p><img src="https://s2.loli.net/2024/11/09/D65cQ2H1bajEIen.png" alt="image-20241109215911953"></p><p><img src="https://s2.loli.net/2024/11/09/6Sg9TQrobNyWqC4.png" alt="image-20241109215933399"></p><p><img src="https://s2.loli.net/2024/11/09/hBkjFDf4qbVRWEd.png" alt="image-20241109201316288"></p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Refresh命令</title>
      <link href="/2024/11/09/Refresh%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/11/09/Refresh%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>自刷新（Self-Refresh） 和 自动刷新（Auto-Refresh） 是两种用来维持内存中数据的有效性、避免丢失数据的刷新模式。这两种模式的主要区别在于刷新操作的控制方式和适用场景。<a><span id="more"></span></a></p></blockquote><h3 id="1-自动刷新（Auto-Refresh）"><a href="#1-自动刷新（Auto-Refresh）" class="headerlink" title="1. 自动刷新（Auto-Refresh）"></a>1. <strong>自动刷新（Auto-Refresh）</strong></h3><p><strong>自动刷新</strong>模式是由<strong>内存控制器</strong>负责周期性地发出<strong>刷新命令</strong>，以确保内存的每个行在特定的时间间隔内都被刷新一次。这个刷新是全局的，控制器会自动在适当的时候发出刷新命令来刷新内存中所有的行。</p><h4 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h4><ul><li>在<strong>Auto-Refresh</strong>模式下，内存控制器会周期性地向DDR内存发出刷新命令（<code>REF</code>命令）。</li><li>刷新命令的频率是固定的，通常由内存的工作频率决定（例如每64ms刷新一次）。</li><li>控制器在这个过程中会根据设定的<strong>刷新周期</strong>，遍历内存的所有bank，并逐行刷新每个bank中的数据。</li><li>自动刷新的过程是由内存控制器统一调度和管理的，用户不需要手动干预。</li></ul><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>自动刷新</strong>的过程由内存控制器完全控制，通常在内存空闲时进行，不影响其他内存操作。</li><li>需要消耗内存带宽，因为刷新操作会占用内存的访问周期。</li><li>适合对实时性要求较高的系统，能够确保内存的数据保持有效，且不需要额外的控制。</li></ul><h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><ul><li><strong>自动刷新</strong>通常用于普通的内存工作模式，在大多数DDR系统中，自动刷新是默认的刷新模式。</li><li>它是由内存控制器在后台管理的，因此适用于无需额外干预的应用。</li></ul><h3 id="2-自刷新（Self-Refresh）"><a href="#2-自刷新（Self-Refresh）" class="headerlink" title="2. 自刷新（Self-Refresh）"></a>2. <strong>自刷新（Self-Refresh）</strong></h3><p><strong>自刷新</strong>模式是一种低功耗模式，在这种模式下，<strong>内存本身</strong>会自动刷新其数据，而不需要依赖内存控制器。自刷新模式通常是在系统进入低功耗状态时使用的模式。</p><h4 id="工作原理：-1"><a href="#工作原理：-1" class="headerlink" title="工作原理："></a>工作原理：</h4><ul><li>在<strong>Self-Refresh</strong>模式下，内存会自主执行刷新操作，不依赖外部控制器发出刷新命令。</li><li>在进入自刷新模式之前，内存控制器会通过发出一个特定的命令将内存置于自刷新状态。</li><li>进入自刷新模式后，DDR内存会定期刷新自身的行（通常按照特定的时间间隔，如64ms），确保数据不丢失。</li><li>内存控制器在自刷新模式下会进入低功耗状态，基本不参与内存的读写操作，直到退出自刷新模式。</li></ul><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>自刷新</strong>模式是一种<strong>低功耗模式</strong>，它使得DDR内存在不需要外部控制的情况下自动进行数据刷新。</li><li>当内存处于<strong>自刷新</strong>模式时，内存控制器不进行数据读写操作，仅仅等待系统恢复或外部控制器的重新启动。</li><li>内存在此模式下自动刷新，而无需占用主系统的带宽，适合系统在待机或低功耗模式下运行时使用。</li></ul><h4 id="应用场景：-1"><a href="#应用场景：-1" class="headerlink" title="应用场景："></a>应用场景：</h4><ul><li><strong>自刷新</strong>模式常用于设备进入低功耗状态时，例如移动设备（智能手机、平板等）在待机时，或服务器系统在闲置时。</li><li>适用于不需要高频繁内存访问的场合，例如系统休眠期间。</li></ul><h3 id="3-两者的区别总结"><a href="#3-两者的区别总结" class="headerlink" title="3. 两者的区别总结"></a>3. <strong>两者的区别总结</strong></h3><table><thead><tr><th>特性</th><th><strong>Auto-Refresh</strong></th><th><strong>Self-Refresh</strong></th></tr></thead><tbody><tr><td><strong>控制方式</strong></td><td>内存控制器发出刷新命令</td><td>内存自主管理刷新</td></tr><tr><td><strong>功耗</strong></td><td>较高（因为控制器持续运行）</td><td>低功耗（内存自主刷新）</td></tr><tr><td><strong>适用场景</strong></td><td>系统正常运行时，需要保证数据有效性时</td><td>系统低功耗模式下，保持数据有效性</td></tr><tr><td><strong>刷新频率</strong></td><td>固定频率（通常是每64ms刷新一次）</td><td>自动刷新，内存自主控制刷新周期</td></tr><tr><td><strong>内存带宽占用</strong></td><td>会占用内存带宽进行刷新操作</td><td>无需占用带宽，因为刷新由内存自己进行</td></tr><tr><td><strong>是否需要控制器干预</strong></td><td>需要控制器发出刷新命令</td><td>不需要控制器，内存自动完成刷新</td></tr></tbody></table><h3 id="4-自刷新与自动刷新结合使用"><a href="#4-自刷新与自动刷新结合使用" class="headerlink" title="4. 自刷新与自动刷新结合使用"></a>4. <strong>自刷新与自动刷新结合使用</strong></h3><p>在某些复杂的DDR系统中，<strong>自刷新</strong>和<strong>自动刷新</strong>可能会结合使用。例如，当系统处于待机状态时，内存可能会切换到<strong>自刷新模式</strong>以减少功耗，但当系统恢复到活跃状态时，内存控制器又会重新启用<strong>自动刷新模式</strong>，以保证内存数据始终有效。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><strong>自动刷新</strong>是内存控制器定期发出刷新命令来刷新内存数据，确保数据保持有效。</li><li><strong>自刷新</strong>是内存本身独立进行刷新操作，适用于系统处于低功耗模式时。</li><li>自刷新通常用于降低功耗，而自动刷新是确保内存数据完整性和有效性的常规操作。</li></ul>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DQS漂移检测与补偿</title>
      <link href="/2024/11/09/DQS%E6%BC%82%E7%A7%BB%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%A1%A5%E5%81%BF/"/>
      <url>/2024/11/09/DQS%E6%BC%82%E7%A7%BB%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%A1%A5%E5%81%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>DQS（Data Strobe）是DDR内存系统中的关键时钟信号，其准确性对数据传输至关重要。在DDR内存系统中，DQS信号的漂移会导致数据读取的错误，因此需要监测并补偿漂移。<a><span id="more"></span></a></p></blockquote><h3 id="1-DQS漂移检测和补偿的概述"><a href="#1-DQS漂移检测和补偿的概述" class="headerlink" title="1. DQS漂移检测和补偿的概述"></a>1. <strong>DQS漂移检测和补偿的概述</strong></h3><p>除了标准的DQS门控LCDL VT补偿外，DDR IP提供了一种可选的功能，用于检测和补偿来自DDR IP内部以及外部（包括SDRAM）的漂移。其基本原理是通过采样进入的读取DQS#信号与门控信号，并持续追踪这些采样值是否发生变化。</p><h3 id="2-门控信号和DQS-信号采样"><a href="#2-门控信号和DQS-信号采样" class="headerlink" title="2. 门控信号和DQS#信号采样"></a>2. <strong>门控信号和DQS#信号采样</strong></h3><ul><li>设计中使用两个门控信号，之间有一个小的可编程延迟（通过<code>DTCR1.RDLVLGDIFF</code>设置）。这两个信号会在DQS#信号的上升沿两侧采样。</li><li>如果没有漂移，两个门控信号的采样值应该分别是0和1（即在DQS信号的上升沿一侧为0，另一侧为1）。</li><li>如果两个门控信号都采样到0或1，表明DQS信号相对于门控信号发生了漂移。采样值的变化指示了漂移的方向，PUB（PHY控制单元）可以根据此信息调整门控信号的位置。</li></ul><h3 id="3-漂移检测和补偿启用"><a href="#3-漂移检测和补偿启用" class="headerlink" title="3. 漂移检测和补偿启用"></a>3. <strong>漂移检测和补偿启用</strong></h3><ul><li>DQS漂移检测和补偿功能通过设置<code>DQSDR0.DFTDTEN</code>来启用。</li><li>需要注意的是，只有两种补偿机制中的一种可以启用：<code>DQSDR0.DFTDTEN</code> 和 <code>DXnGCR3.RGLVT</code> 是互斥的，即不能同时启用。</li></ul><h3 id="4-漂移补偿过程"><a href="#4-漂移补偿过程" class="headerlink" title="4. 漂移补偿过程"></a>4. <strong>漂移补偿过程</strong></h3><ul><li>当PUB检测到漂移时，它会通过标准的DFI PHY更新协议通知控制器，要求DFI总线空闲以便启动漂移补偿机制。</li><li>控制器确认PHY更新后，PUB会执行<code>DQSDR0.DFTUPDRD</code>虚拟读取，以获取最新的漂移状态。</li><li>由于漂移检测机制无法检测漂移的幅度（尤其是在任务模式下进行DFI事务时），PUB需要通过增量补偿例程来确定漂移的幅度。具体做法是，PUB会发出一系列的虚拟读取操作（dummy reads），每次检测到漂移时，PUB会通过<code>DQSDR1.DFTDLY</code>调整延迟来进行补偿。直到不再检测到漂移为止。</li><li>如果<code>DQSDR0.DFTUPDRD</code>设置为0，则PUB只会执行单步漂移补偿，调整数字延迟线的<code>DQSDR0.DTDLY</code>延迟，这时不会在漂移补偿阶段实际确定漂移幅度。</li></ul><h3 id="5-漂移检测的特殊情形"><a href="#5-漂移检测的特殊情形" class="headerlink" title="5. 漂移检测的特殊情形"></a>5. <strong>漂移检测的特殊情形</strong></h3><p>漂移检测可能无法在某些情况下进行，尤其是在没有读取事务或门控信号没有变化时。为此，PUB提供了以下机制：</p><ul><li><strong>无读取场景</strong>：如果控制器长时间没有对某个rank执行读取操作，PUB会在<code>DQSDR1.DFTRDIDLC × DQSDR1.DFTRDIDLF</code>时钟周期后请求PHY更新，执行<code>DQSDR0.DFTIDLRD</code>虚拟读取。</li><li><strong>连续读取场景</strong>：如果控制器发送了连续的读取操作，PUB会在<code>DQSDR1.DFTRDB2BC * DQSDR1.DFTRDB2BF</code>时钟周期后请求PHY更新，执行<code>DQSDR1.DFTB2BRD</code>虚拟读取。</li></ul><h3 id="6-DQS漂移逻辑"><a href="#6-DQS漂移逻辑" class="headerlink" title="6. DQS漂移逻辑"></a>6. <strong>DQS漂移逻辑</strong></h3><p>DQS漂移逻辑只使用<strong>bank 0</strong>进行虚拟读取操作，并根据银行0的状态来决定是否需要发出激活命令。</p><h3 id="7-防止不必要的漂移检测和补偿"><a href="#7-防止不必要的漂移检测和补偿" class="headerlink" title="7. 防止不必要的漂移检测和补偿"></a>7. <strong>防止不必要的漂移检测和补偿</strong></h3><p>为了防止DQS漂移检测和&#x2F;或补偿的过度触发，PUB提供了两个可编程功能来调节漂移检测的频率和补偿：</p><ul><li><strong>漂移监测周期</strong>（<code>DQSDR2.DFTMNTPRD</code>）：指定两次漂移监测事件之间的最小时钟周期数。它控制PUB采样PHY宏的漂移状态的频率。此功能可以用于避免频繁的漂移检测，特别是当系统的漂移更像是抖动（jitter）而非单向漂移时。</li><li><strong>漂移阈值</strong>（<code>DQSDR2.DFTTHRSH</code>）：指定在同一方向上连续检测到的最小漂移次数，只有当检测到该阈值的漂移时，PUB才会认为漂移是有效的。如果漂移方向发生反转，计数器会重置。此功能用于避免频繁检测和&#x2F;或补偿周期性的漂移。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a>总结</a></h2><p>这段话描述了<strong>DQS漂移的检测与补偿机制</strong>，该机制用于确保DQS信号在面临电压温度变化和系统状态变化时仍然稳定可靠。关键的步骤包括通过门控信号采样DQS信号来检测漂移，以及根据漂移的方向来调整DQS门控位置。PUB通过增量补偿和虚拟读取操作来调整系统，以消除漂移的影响。为了避免频繁的补偿，系统提供了可编程功能来控制漂移监测的周期和阈值，从而确保系统的效率和稳定性。</p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
            <tag> VT compensation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DQS门控信号的延迟补偿</title>
      <link href="/2024/11/09/DQS%E9%97%A8%E6%8E%A7%E4%BF%A1%E5%8F%B7%E7%9A%84%E5%BB%B6%E8%BF%9F%E8%A1%A5%E5%81%BF/"/>
      <url>/2024/11/09/DQS%E9%97%A8%E6%8E%A7%E4%BF%A1%E5%8F%B7%E7%9A%84%E5%BB%B6%E8%BF%9F%E8%A1%A5%E5%81%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在电压温度（VT）变化和SDRAM本身的漂移情况下如何确保DQS信号的稳定性和准确性。<a><span id="more"></span></a></p></blockquote><h3 id="1-DQS门控位置漂移的问题"><a href="#1-DQS门控位置漂移的问题" class="headerlink" title="1. DQS门控位置漂移的问题"></a>1. <strong>DQS门控位置漂移的问题</strong></h3><p>一旦DQS的门控位置被训练出来，DQS相对于门控信号的位置可能会发生漂移。这个漂移会减小最初训练的门控位置的裕量。漂移的原因可能是电压和温度的变化（VT变化），或者是来自SDRAM的未定义漂移。</p><h3 id="2-DQS门控信号路径匹配"><a href="#2-DQS门控信号路径匹配" class="headerlink" title="2. DQS门控信号路径匹配"></a>2. <strong>DQS门控信号路径匹配</strong></h3><p>在DDR IP模块内部，DQS门控信号的路径延迟是通过设计与读命令路径和读DQS路径的延迟总和匹配来完成的。为了确保DQS门控信号与读取数据路径的延迟相匹配，设计使用了与读取命令路径相同的时序和组件来驱动DQS门控信号。这是通过将门控信号返回到PHY并通过专用的I&#x2F;O接口（即PDQSG）传递来实现的，从而确保DQS门控信号的路径延迟与读DQS路径相匹配。</p><h3 id="3-匹配的关键组件"><a href="#3-匹配的关键组件" class="headerlink" title="3. 匹配的关键组件"></a>3. <strong>匹配的关键组件</strong></h3><p>在DDR IP中，门控I&#x2F;O（PDQSG）使用与读取命令I&#x2F;O驱动（PDDRIO）和读取DQS I&#x2F;O接收器（PDIFF）相同的驱动器和接收器组件。设计的目标是通过使用这些相同的组件，确保DQS门控信号路径的延迟与读命令和读DQS路径的延迟一致，从而自我补偿电压温度变化的影响。</p><h3 id="4-LCDL（延迟线）对VT变化的影响"><a href="#4-LCDL（延迟线）对VT变化的影响" class="headerlink" title="4. LCDL（延迟线）对VT变化的影响"></a>4. <strong>LCDL（延迟线）对VT变化的影响</strong></h3><p>DQS门控信号路径中唯一没有与读取命令&#x2F;数据路径匹配的主要组件是DQS门控LCDL（Delay Line）。这个延迟线负责确定门控信号的精细延迟。电压和温度变化会影响这个延迟线产生的延迟。因此，为了补偿这个效应，DDR IP使用延迟线VT补偿功能来补偿所有延迟线的VT变化。</p><h3 id="5-LCDL-VT补偿"><a href="#5-LCDL-VT补偿" class="headerlink" title="5. LCDL VT补偿"></a>5. <strong>LCDL VT补偿</strong></h3><p>对于DQS门控LCDL的延迟补偿，可以通过设置<code>DXnGCR3.RGLVT</code>来启用该功能。这意味着，当系统中的SDRAM没有显著的外部漂移时，标准的LCDL基于VT补偿机制就足够应对DQS信号与最初训练的门控信号之间的相对漂移。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>DQS信号的精确门控位置对DDR内存的性能至关重要。然而，DQS信号的延迟路径可能会受到电压和温度变化的影响，导致最初训练的门控位置出现漂移。为了避免这种漂移影响，DDR IP通过精确匹配DQS门控路径和读取数据路径的延迟来实现自我补偿。然而，DQS门控路径中的LCDL（延迟线）并不与其他路径完全匹配，因此必须通过一个专门的VT补偿机制来补偿由于VT变化带来的影响。这种补偿机制可以通过启用<code>DXnGCR3.RGLVT</code>功能来实现，从而保持DQS门控信号的稳定性。</p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
            <tag> VT compensation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFI-update</title>
      <link href="/2024/11/09/DFI-update/"/>
      <url>/2024/11/09/DFI-update/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如何通过寄存器配置DQS漂移检测和补偿逻辑与其他如DDL和阻抗VT漂移的更新进行交互。<a><span id="more"></span></a></p></blockquote><h2 id="与其他PHY-控制器更新的交互"><a href="#与其他PHY-控制器更新的交互" class="headerlink" title="与其他PHY&#x2F;控制器更新的交互"></a><a><strong>与其他PHY&#x2F;控制器更新的交互</strong></a></h2><p>除了由<strong>DQS漂移检测和补偿逻辑</strong>生成的PHY更新请求外，<strong>DQS漂移</strong>还可以在以下情况下进行检测和补偿：</p><ol><li>由<strong>DDL</strong>（数字延迟线）或<strong>阻抗VT漂移</strong>生成的PHY更新。</li><li><strong>控制器更新</strong>期间。</li></ol><p>这类配置通过寄存器位<strong>DQSDR1.PUDFTUP</strong>和<strong>DQSDR1.CUDFTUP</strong>来完成。可以使用<strong>DQSDR0.PUDFTRD</strong>和<strong>DQSDR0.CUDFTRD</strong>寄存器位配置在这些外部更新期间的可选虚拟读操作的次数。</p><p>同样，<strong>DDL</strong>和<strong>阻抗VT漂移</strong>也可以配置为在最初由<strong>DQS漂移</strong>触发的PHY更新期间进行更新。此配置通过寄存器位<strong>DQSDR0.DFTDDLUP</strong>和<strong>DQSDR0.DFTZQUP</strong>来实现。</p><h3 id="关键点解释"><a href="#关键点解释" class="headerlink" title="关键点解释"></a>关键点解释</h3><ul><li><strong>DQS漂移</strong>：指的是数据时钟信号（DQS）由于温度、电压变化或其他因素引起的漂移，需要进行实时检测和补偿。</li><li><strong>DDL和阻抗VT漂移的交互</strong>：在<strong>DQS漂移</strong>的检测和补偿过程中，<strong>DDL</strong>和<strong>阻抗VT漂移</strong>的影响也可能同时被考虑，并在相关的PHY更新周期内进行补偿。</li><li><strong>第三方更新</strong>：指的是在非直接由<strong>DQS漂移</strong>引发的PHY更新中，进行的例如<strong>DDL</strong>或<strong>阻抗补偿</strong>更新，采用了虚拟读操作来确保更新的时序一致性。</li></ul><h3 id="配置寄存器位的功能："><a href="#配置寄存器位的功能：" class="headerlink" title="配置寄存器位的功能："></a>配置寄存器位的功能：</h3><ol><li><strong>DQSDR1.PUDFTUP</strong> 和 <strong>DQSDR1.CUDFTUP</strong>：这些寄存器位用于配置在<strong>DDL</strong>或<strong>阻抗VT漂移</strong>补偿期间的PHY更新。</li><li><strong>DQSDR0.PUDFTRD</strong> 和 <strong>DQSDR0.CUDFTRD</strong>：这些寄存器位用于配置在这些外部更新期间的虚拟读操作次数。</li><li><strong>DQSDR0.DFTDDLUP</strong> 和 <strong>DQSDR0.DFTZQUP</strong>：这些寄存器位用于配置<strong>DDL</strong>和<strong>阻抗VT漂移</strong>是否可以在由<strong>DQS漂移</strong>引发的PHY更新期间进行更新。</li></ol>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
            <tag> DFI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阻抗校准的寄存器编程</title>
      <link href="/2024/11/09/%E9%98%BB%E6%8A%97%E6%A0%A1%E5%87%86%E7%9A%84%E5%AF%84%E5%AD%98%E5%99%A8%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/11/09/%E9%98%BB%E6%8A%97%E6%A0%A1%E5%87%86%E7%9A%84%E5%AF%84%E5%AD%98%E5%99%A8%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在DDR内存初始化和正常运行过程中，用户可以通过配置不同的寄存器来调整和控制阻抗校准的行为。<a><span id="more"></span></a></p></blockquote><h3 id="1-初始化期间的默认寄存器设置"><a href="#1-初始化期间的默认寄存器设置" class="headerlink" title="1. 初始化期间的默认寄存器设置"></a>1. <strong>初始化期间的默认寄存器设置</strong></h3><ul><li><strong>PIR.ZCALBYP</strong> 设置为‘0’，表示在初始化过程中不会绕过阻抗校准。</li><li><strong>ZQCR.PGWAIT</strong> 设置为 <code>0x5</code>，这个值适应控制时钟（ctl_clk）频率为 333 MHz 至 400 MHz。</li><li><strong>ZQCR.ZCALT</strong> 设置为 <code>0x1</code>，表示启用始终开启的背景校准。</li><li><strong>ZQCR.AVGEN</strong> 设置为 <code>0</code>，表示禁用代码平均，这样可以加快校准的完成时间。</li><li><strong>ZQCR.IODLMT</strong> 设置为 <code>0x2</code>，表示当电压温度漂移（VT drift）导致与之前校准的代码相差2个代码时，会触发VT相关的更新请求。</li><li><strong>ZQnPR.PU_ODT_ONLY</strong> 设置为 <code>0</code>，禁用LPDDR3&#x2F;DDR4的只上拉ODT（On Die Termination）校准。</li><li><strong>ZQnPR.ZPROG_ASYM_DRV_PU</strong> 和 <strong>ZQnPR.ZPROG_ASYM_DRV_PD</strong> 设置为 <code>0xb</code>，这两个寄存器用于设置典型工作条件下的上拉和下拉驱动强度校准代码。</li><li><strong>ZQnPR.ZPROG_PU_ODT_ONLY</strong> 设置为 <code>0x7</code>，设置上拉终端（ODT）仅进行校准的代码。</li><li><strong>ZQnPR.PU_DRV_ADJUST</strong> 和 <strong>ZQnPR.PD_DRV_ADJUST</strong> 设置为 <code>0x0</code>，表示禁用上拉和下拉驱动强度调整。</li><li><strong>ZQnPR.ODT_ZDEN</strong> 设置为 <code>0</code>，禁用终端代码覆盖功能。</li><li><strong>ZQnPR.DRV_ZDEN</strong> 设置为 <code>0</code>，禁用驱动强度代码覆盖功能。</li><li><strong>ZQnPR.ZSEGBYP</strong> 设置为 <code>0</code>，禁用校准段旁路。</li></ul><h3 id="2-初始化后的正常操作期间"><a href="#2-初始化后的正常操作期间" class="headerlink" title="2. 初始化后的正常操作期间"></a>2. <strong>初始化后的正常操作期间</strong></h3><ul><li>初始化后的默认设置保持不变，除了以下几点：<ul><li><strong>ZQCR.AVGEN</strong> 被设置为 <code>1</code>，表示始终启用代码平均（对校准过程进行多次平均，减少误差）。</li></ul></li></ul><h3 id="3-用户期望的编程模式"><a href="#3-用户期望的编程模式" class="headerlink" title="3. 用户期望的编程模式"></a>3. <strong>用户期望的编程模式</strong></h3><h4 id="a-非对称驱动强度校准（LPDDR3-DDR4）"><a href="#a-非对称驱动强度校准（LPDDR3-DDR4）" class="headerlink" title="a. 非对称驱动强度校准（LPDDR3&#x2F;DDR4）"></a>a. <strong>非对称驱动强度校准（LPDDR3&#x2F;DDR4）</strong></h4><ul><li>设置 <strong>ZQnPR.PU_ODT_ONLY</strong> 为 <code>1</code>，表示启用只上拉ODT校准。</li><li>设置 <strong>ZQnPR.ZPROG_ASYM_DRV_PU</strong> 为所需的上拉驱动强度分频比。</li><li>设置 <strong>ZQnPR.ZPROG_ASYM_DRV_PD</strong> 为所需的下拉驱动强度分频比。</li></ul><h4 id="b-仅上拉ODT校准（LPDDR3-DDR4）"><a href="#b-仅上拉ODT校准（LPDDR3-DDR4）" class="headerlink" title="b. 仅上拉ODT校准（LPDDR3&#x2F;DDR4）"></a>b. <strong>仅上拉ODT校准（LPDDR3&#x2F;DDR4）</strong></h4><ul><li>设置 <strong>ZQnPR.PU_ODT_ONLY</strong> 为 <code>1</code>，表示启用仅上拉ODT校准。</li><li>设置 <strong>ZQnPR.ZPROG_PU_ODT_ONLY</strong> 为所需的上拉终端分频比。</li></ul><h4 id="c-在非默认ctl-clk频率下进行校准（默认频率为400-MHz）"><a href="#c-在非默认ctl-clk频率下进行校准（默认频率为400-MHz）" class="headerlink" title="c. 在非默认ctl_clk频率下进行校准（默认频率为400 MHz）"></a>c. <strong>在非默认ctl_clk频率下进行校准（默认频率为400 MHz）</strong></h4><ul><li>根据操作频率设置 <strong>ZQCR.PGWAIT</strong> 寄存器的等待周期数。</li></ul><h4 id="d-控制校准重复（默认是背景模式，始终开启校准）"><a href="#d-控制校准重复（默认是背景模式，始终开启校准）" class="headerlink" title="d. 控制校准重复（默认是背景模式，始终开启校准）"></a>d. <strong>控制校准重复（默认是背景模式，始终开启校准）</strong></h4><ul><li><p>设置<code>ZQCR.ZCALT</code>为所需的校准粒度模式。</p><ul><li>注意：某些模式需要触发DFI控制&#x2F;PHY更新才能继续校准。</li></ul></li></ul><h4 id="e-代码平均控制"><a href="#e-代码平均控制" class="headerlink" title="e. 代码平均控制"></a>e. <strong>代码平均控制</strong></h4><ul><li><p>设置 <strong>ZQCR.AVGEN</strong> 为 <code>1</code> 启用代码平均，或设置为 <code>0</code> 禁用代码平均。</p></li><li><p>设置 <code>ZQCR.AVGMAX</code>来控制平均轮次数量。</p><ul><li>注：该值越大，校准时间越长。</li></ul></li></ul><h4 id="f-驱动强度调整"><a href="#f-驱动强度调整" class="headerlink" title="f. 驱动强度调整"></a>f. <strong>驱动强度调整</strong></h4><ul><li>设置 <strong>ZQnPR.PU_DRV_ADJUST</strong> 为所需的上拉驱动强度调整。</li><li>设置 <strong>ZQnPR.PD_DRV_ADJUST</strong> 为所需的下拉驱动强度调整。</li></ul><h4 id="g-代码覆盖"><a href="#g-代码覆盖" class="headerlink" title="g. 代码覆盖"></a>g. <strong>代码覆盖</strong></h4><ul><li><p>设置 <strong>ZQnPR.ODT_ZDEN</strong> 为 <code>1</code>，启用终端代码覆盖功能。</p></li><li><p>设置 <strong>ZQnPR.DRV_ZDEN</strong> 为 <code>1</code>，启用驱动强度代码覆盖功能。</p></li><li><p>设置 <strong>ZQnDR.ZDATA[15:0]</strong> 为所需的驱动强度ZCTRL代码，强制软件在该段上使用。</p></li><li><p>设置 <code>ZQnDR.ZDATA[31:16]</code>为所需的终端ZCTRL代码，强制软件在该段上使用。</p><ul><li>注：这些值需要由软件更新，并且不会进行VT补偿。</li></ul></li></ul><h4 id="h-校准旁路"><a href="#h-校准旁路" class="headerlink" title="h. 校准旁路"></a>h. <strong>校准旁路</strong></h4><ul><li>设置 <strong>PIR.ZCALBYP</strong> 为 <code>1</code>，这将禁用自动校准和VT补偿。</li></ul><h3 id="4-VREF使用设置"><a href="#4-VREF使用设置" class="headerlink" title="4. VREF使用设置"></a>4. <strong>VREF使用设置</strong></h3><ul><li><strong>IOVCR1.ZQREFIEN</strong> 设置为 ‘1’，表示使用内部生成的VREF为PZQ单元提供电压参考（VREF）。</li><li><strong>IOVCR1.ZQREFPEN</strong> 设置为 ‘0’，表示不使用外部VREF。</li><li>如果使用外部VREF，需将 <strong>IOVCR1.ZQREFIEN</strong> 设置为 ‘0’，并将 <strong>IOVCR1.ZQREFPEN</strong> 设置为 ‘1’。</li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这段文档详细描述了<strong>阻抗校准</strong>过程中的寄存器编程，涵盖了从初始化到正常操作阶段，如何通过设置不同的寄存器来控制阻抗校准的细节，包括校准模式、驱动强度、代码覆盖、校准频率、平均控制等方面的内容。通过灵活的编程配置，用户可以根据实际需求调整DDR的性能和稳定性。</p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
            <tag> Impedance Calibration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>延迟线电压温度（VT）漂移检测与补偿的机制</title>
      <link href="/2024/11/09/%E5%BB%B6%E8%BF%9F%E7%BA%BF%E7%94%B5%E5%8E%8B%E6%B8%A9%E5%BA%A6%EF%BC%88VT%EF%BC%89%E6%BC%82%E7%A7%BB%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%A1%A5%E5%81%BF%E7%9A%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/11/09/%E5%BB%B6%E8%BF%9F%E7%BA%BF%E7%94%B5%E5%8E%8B%E6%B8%A9%E5%BA%A6%EF%BC%88VT%EF%BC%89%E6%BC%82%E7%A7%BB%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%A1%A5%E5%81%BF%E7%9A%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>确保在不同电压和温度变化下，DDR系统中的延迟线能够维持稳定的时延，从而保证系统的信号时序和可靠性。<a><span id="more"></span></a></p></blockquote><h3 id="1-VT漂移补偿逻辑"><a href="#1-VT漂移补偿逻辑" class="headerlink" title="1. VT漂移补偿逻辑"></a>1. <strong>VT漂移补偿逻辑</strong></h3><ul><li><strong>PUB（PHY控制单元）</strong>包含一个<strong>VT漂移补偿逻辑</strong>，该逻辑会根据电压和温度的变化自动调整每个延迟线的延迟选择输入，以保持稳定的时延。</li><li><strong>DATX8</strong>和<strong>AC</strong>模块中的所有<strong>DDL（Delay Line）</strong>都具有VT补偿功能。这些延迟线用于调整信号时序，使其符合正确的时间要求。</li></ul><h3 id="2-主延迟线（MDL）的作用"><a href="#2-主延迟线（MDL）的作用" class="headerlink" title="2. 主延迟线（MDL）的作用"></a>2. <strong>主延迟线（MDL）的作用</strong></h3><ul><li><strong>MDL（Master Delay Line，主延迟线）</strong>是一个重要的元件，负责测量DDR时钟周期的延迟，并根据电压和温度的变化进行动态调整。</li><li>在<strong>DATX8</strong>和<strong>AC</strong>组件中，MDL不断测量DDR时钟的周期，并根据电压和温度漂移的变化来更新延迟线的设置。</li><li>每个延迟线类型的更新都可以通过写入<strong>PGCR0寄存器</strong>来启用。</li></ul><h3 id="3-初始校准与周期测量"><a href="#3-初始校准与周期测量" class="headerlink" title="3. 初始校准与周期测量"></a>3. <strong>初始校准与周期测量</strong></h3><ul><li>在<strong>初始校准</strong>或<strong>数据训练</strong>触发后，MDL控制逻辑会存储<strong>初始MDL校准周期</strong>、<strong>前一个MDL校准周期</strong>和<strong>当前（新的）MDL校准周期</strong>。</li><li>校准后的MDL会定期进行周期测量，并记录每次新的MDL校准周期。</li><li>如果新的MDL校准周期与上一个周期不相等，且差异超过了由<strong>PGCR6.DLDLMT</strong>值指定的漂移阈值，则会触发VT漂移状态（通过<strong>vt_drift输出引脚</strong>来指示）。</li></ul><h3 id="4-延迟选择值的VT补偿"><a href="#4-延迟选择值的VT补偿" class="headerlink" title="4. 延迟选择值的VT补偿"></a>4. <strong>延迟选择值的VT补偿</strong></h3><ul><li><p>在检测到MDL周期变化时，VT补偿逻辑会根据以下公式计算VT补偿后的延迟线值：<br>$$<br>D L_{\text {new }}&#x3D;\frac{M D L_{\text {new }}}{M D L_{\text {init }}} \times D L_{\text {init }}<br>$$</p><ul><li><strong>MDLinit</strong>：初始MDL校准周期</li><li><strong>MDLnew</strong>：当前或新的MDL校准周期</li><li><strong>DLinit</strong>：在MDLinit时评估的初始延迟选择值</li><li><strong>DLnew</strong>：补偿后的延迟线值（即VT补偿值）</li></ul></li></ul><h3 id="5-VT更新"><a href="#5-VT更新" class="headerlink" title="5. VT更新"></a>5. <strong>VT更新</strong></h3><ul><li>当检测到MDL周期变化时，VT补偿逻辑会被触发，计算出一个VT补偿后的DDL值。</li><li>该计算后的值会存储在每个DDL的本地寄存器中，但不会立即应用到DDL上。只有当<strong>VT更新</strong>通过<strong>PUB</strong>服务时，补偿后的值才会被应用。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>这段描述的核心内容是如何通过<strong>VT漂移补偿机制</strong>来保持DDR系统中延迟线（DDL）的时延稳定性。具体来说，当电压和温度变化时，主延迟线（MDL）会不断测量时钟周期，并根据这些变化调整各个延迟线的延迟选择值，确保信号时序稳定。每次检测到漂移并计算补偿后的延迟值时，VT补偿逻辑会自动进行调整，保证系统的可靠运行。</p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
            <tag> VT compensation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDR阻抗校准过程</title>
      <link href="/2024/11/09/DDR%E9%98%BB%E6%8A%97%E6%A0%A1%E5%87%86%E8%BF%87%E7%A8%8B/"/>
      <url>/2024/11/09/DDR%E9%98%BB%E6%8A%97%E6%A0%A1%E5%87%86%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>DDR接口中的阻抗校准过程，涉及如何通过控制逻辑、专用的单元和总线来实现对SSTL（Stub Series Terminated Logic）信号的阻抗调节。这个过程确保信号在传输过程中能维持正确的阻抗，以优化信号的质量和稳定性。<a><span id="more"></span></a></p></blockquote><p><img src="https://s2.loli.net/2024/11/09/eJG2RrbQ5IF1McU.png" alt="image-20241109184303118"></p><h3 id="关键组件和流程"><a href="#关键组件和流程" class="headerlink" title="关键组件和流程"></a>关键组件和流程</h3><h4 id="1-PZQ单元与PZCTRL单元的配合"><a href="#1-PZQ单元与PZCTRL单元的配合" class="headerlink" title="1. PZQ单元与PZCTRL单元的配合"></a>1. <strong>PZQ单元与PZCTRL单元的配合</strong></h4><ul><li>一个<strong>PZQ（Programmable Impedance）单元</strong>和一个<strong>PZCTRL单元</strong>可以用于一个或多个SSTL组，这些SSTL组需要独立的驱动阻抗和ODT（On-Die Termination，芯片内终端电阻）阻抗控制。</li><li>每个<strong>PZCTRL单元</strong>必须与一个<strong>PZQ单元</strong>配对使用，这两个单元的协作用于控制信号的阻抗。</li></ul><h4 id="2-PVSSQZB单元和ZIOH总线"><a href="#2-PVSSQZB单元和ZIOH总线" class="headerlink" title="2. PVSSQZB单元和ZIOH总线"></a>2. <strong>PVSSQZB单元和ZIOH总线</strong></h4><ul><li><strong>PVSSQZB单元</strong>用来创建一个独立的<strong>ZIOH总线段</strong>，专门用于阻抗校准。<strong>ZIOH总线</strong>是连接各个阻抗控制单元的总线，确保信号的正确传输。</li><li>在没有连接阻抗控制逻辑的接口段中，<strong>PVREF单元</strong>不能使用。这是为了避免信号干扰和不必要的电压参考误差。</li></ul><h4 id="3-阻抗校准触发与绕过"><a href="#3-阻抗校准触发与绕过" class="headerlink" title="3. 阻抗校准触发与绕过"></a>3. <strong>阻抗校准触发与绕过</strong></h4><ul><li>通过PIR寄存器的<strong>ZCALBYP位</strong>，可以随时绕过阻抗校准过程。</li><li>如果校准被绕过，那么阻抗需要在稍后的时间通过重新触发校准或直接编程控制寄存器<strong>ZQnDR</strong>来进行重新校准。</li></ul><h4 id="4-阻抗校准流程"><a href="#4-阻抗校准流程" class="headerlink" title="4. 阻抗校准流程"></a>4. <strong>阻抗校准流程</strong></h4><ul><li><p>一旦触发校准，阻抗校准逻辑会按照以下顺序依次校准四个阻抗元素：</p><ol><li><strong>输出阻抗拉低（pull-down）</strong></li><li><strong>输出阻抗拉高（pull-up）</strong></li><li><strong>ODT拉低（pull-down）</strong></li><li><strong>ODT拉高（pull-up）</strong></li></ol></li><li><p>对每个阻抗元素，阻抗控制逻辑会通过<strong>ZCTRL总线</strong>发送一个阻抗代码到<strong>PZCTRL单元</strong>，然后PZCTRL单元将这些数据进行编码并转换电平，传送到SSTL单元中的功能性I&#x2F;O单元和<strong>PZQ单元</strong>。</p></li></ul><h4 id="5-PZQ单元与外部电阻的匹配"><a href="#5-PZQ单元与外部电阻的匹配" class="headerlink" title="5. PZQ单元与外部电阻的匹配"></a>5. <strong>PZQ单元与外部电阻的匹配</strong></h4><ul><li><strong>PZQ单元</strong>接收到来自<strong>PZCTRL单元</strong>的控制代码，并与外部电阻进行比较，从而确定最佳的阻抗值。</li><li><strong>PZQ单元</strong>还接收到<strong>PUB</strong>（PHY控制器）的分频比（ZPROG），用于调整阻抗校准的精度。</li><li>当<strong>PZQ单元</strong>计算出阻抗匹配情况后，会将<strong>zcomp</strong>值反馈给阻抗控制逻辑，阻抗控制逻辑会根据反馈值更新控制代码，继续优化阻抗。</li></ul><h4 id="6-闭环控制"><a href="#6-闭环控制" class="headerlink" title="6. 闭环控制"></a>6. <strong>闭环控制</strong></h4><ul><li>阻抗控制过程是一个闭环控制系统。每次校准都会根据反馈信息调整阻抗代码，直到找到最匹配的阻抗值为止。</li><li>一旦一个阻抗元素的校准完成，逻辑会自动开始下一个阻抗元素的校准。</li></ul><h4 id="7-错误监控和完成状态"><a href="#7-错误监控和完成状态" class="headerlink" title="7. 错误监控和完成状态"></a>7. <strong>错误监控和完成状态</strong></h4><ul><li>在校准过程中，用户可以通过<strong>ZQnSR寄存器</strong>监控回路状态，检查是否有错误。</li><li>当所有四个阻抗元素的校准完成后，逻辑会在**PGSR[ZCDONE]**寄存器的**ZCDONE**位中标记“完成”状态，表示校准成功。</li></ul><h4 id="8-时钟控制"><a href="#8-时钟控制" class="headerlink" title="8. 时钟控制"></a>8. <strong>时钟控制</strong></h4><ul><li>校准逻辑使用<strong>PUB控制器时钟</strong>作为采样时钟来控制阻抗校准回路的操作。由于这个回路不需要高频操作，因此通常使用较低的时钟频率来保证稳定性。</li><li>该回路的频率比<strong>PUB时钟</strong>低得多，阻抗控制模块包含一个<strong>可编程时钟计数器</strong>，用于控制等待一定的时钟周期再进行采样。</li></ul><h4 id="9-背景运行与DFI更新"><a href="#9-背景运行与DFI更新" class="headerlink" title="9. 背景运行与DFI更新"></a>9. <strong>背景运行与DFI更新</strong></h4><ul><li>校准初始化完成后，阻抗校准会继续在后台运行，周期性地进行DFI控制和PHY更新，将更新后的VT（Voltage Threshold，电压阈值）代码传播到DDR接口上的I&#x2F;O单元。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>这段描述的内容主要讲述了<strong>DDR接口阻抗校准的流程</strong>，以及如何通过一系列专用单元和总线实现对信号阻抗的精确调节。通过这个校准过程，信号的阻抗可以被精确地控制和优化，从而确保DDR接口能够稳定高效地工作。这个过程不仅考虑了不同工艺、电压和温度的变化，还确保了校准的反馈是闭环的，能够实时调整，最终达到最佳的阻抗匹配效果。</p><p><img src="https://s2.loli.net/2024/11/09/vdy18QaBkEmLHUY.png" alt="image-20241109184846343"></p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阻抗控制模块（Impedance Controller Module）</title>
      <link href="/2024/11/09/%E9%98%BB%E6%8A%97%E6%8E%A7%E5%88%B6%E6%A8%A1%E5%9D%97%EF%BC%88Impedance%20Controller%20Module%EF%BC%89/"/>
      <url>/2024/11/09/%E9%98%BB%E6%8A%97%E6%8E%A7%E5%88%B6%E6%A8%A1%E5%9D%97%EF%BC%88Impedance%20Controller%20Module%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>阻抗控制模块 提供了必要的阻抗控制功能，使得功能性的SSTL单元能够启用可编程且基于PVT（工艺、电压、温度）补偿的ODT和输出阻抗控制。<a><span id="more"></span></a></p></blockquote><h3 id="详细解释："><a href="#详细解释：" class="headerlink" title="详细解释："></a>详细解释：</h3><h4 id="1-Sample-based-tracking-of-RZQ："><a href="#1-Sample-based-tracking-of-RZQ：" class="headerlink" title="1. Sample-based tracking of RZQ："></a>1. <strong>Sample-based tracking of RZQ</strong>：</h4><ul><li><strong>RZQ</strong> 是指阻抗参考电阻值，通常与DDR总线的阻抗匹配有关。该功能表示通过采样来跟踪RZQ的变化，以保证SSTL接口的稳定信号传输，并使阻抗回路电路能够在较低功耗下稳定运行。</li></ul><h4 id="2-Impedance-code-override："><a href="#2-Impedance-code-override：" class="headerlink" title="2. Impedance code override："></a>2. <strong>Impedance code override</strong>：</h4><ul><li>该功能允许直接控制阻抗代码（Impedance Code）。这些阻抗代码是用来控制SSTL信号的驱动阻抗的，这项功能使得用户能够绕过自动控制，手动设置阻抗，从而有更多的灵活性和控制。</li></ul><h4 id="3-Impedance-code-output："><a href="#3-Impedance-code-output：" class="headerlink" title="3. Impedance code output："></a>3. <strong>Impedance code output</strong>：</h4><ul><li>通过输出阻抗代码，用户可以监控控制回路的操作情况。这意味着可以实时查看当前控制回路在调节阻抗时的状态，帮助调试和优化。</li></ul><h4 id="4-Programmable-divide-on-the-input-clock-signal："><a href="#4-Programmable-divide-on-the-input-clock-signal：" class="headerlink" title="4. Programmable divide on the input clock signal："></a>4. <strong>Programmable divide on the input clock signal</strong>：</h4><ul><li>这项功能提供了一个可编程的分频器，可以在输入时钟信号上进行分频。通过分频，可以实现稳定的操作，适应不同频率范围的输入时钟。这对于支持高频信号的稳定性非常重要。</li></ul><h4 id="5-Automatic-sequencing-for-independent-impedance-compensation："><a href="#5-Automatic-sequencing-for-independent-impedance-compensation：" class="headerlink" title="5. Automatic sequencing for independent impedance compensation："></a>5. <strong>Automatic sequencing for independent impedance compensation</strong>：</h4><ul><li>该功能会自动进行独立的阻抗补偿，针对四个不同的阻抗元素进行逐一补偿：<ul><li>ODT（On-Die Termination）拉高&#x2F;拉低电阻</li><li>输出阻抗拉高&#x2F;拉低</li></ul></li><li>这样可以确保每个阻抗元素在不同操作状态下都能得到最佳的匹配与补偿。</li></ul><h4 id="6-Programmable-asymmetric-drive-strength-and-pullup-only-termination-calibration："><a href="#6-Programmable-asymmetric-drive-strength-and-pullup-only-termination-calibration：" class="headerlink" title="6. Programmable asymmetric drive strength and pullup-only termination calibration："></a>6. <strong>Programmable asymmetric drive strength and pullup-only termination calibration</strong>：</h4><ul><li>支持可编程的不对称驱动强度调节和仅拉高终止校准。也就是说，用户可以对SSTL接口的驱动强度进行调节，以应对不同的负载需求。</li></ul><h4 id="7-VT-drift-detection-and-automatic-DFI-update-request："><a href="#7-VT-drift-detection-and-automatic-DFI-update-request：" class="headerlink" title="7. VT drift detection and automatic DFI update request："></a>7. <strong>VT drift detection and automatic DFI update request</strong>：</h4><ul><li><strong>VT drift</strong>（电压漂移）指的是随着温度、工艺变化，电压参考点可能发生的漂移。这项功能能够检测到电压漂移，并在发现漂移时，自动发出DFI（DDR接口）更新请求，以调整内存接口的配置，确保系统始终稳定运行。</li></ul><h4 id="8-Code-averaging-support-for-smoother-code-transitions："><a href="#8-Code-averaging-support-for-smoother-code-transitions：" class="headerlink" title="8. Code averaging support for smoother code transitions："></a>8. <strong>Code averaging support for smoother code transitions</strong>：</h4><ul><li>支持代码平均（Code Averaging），用来平滑阻抗代码的过渡。这意味着当阻抗代码变化时，变化的过程会更为平滑，从而避免因突变引起的信号不稳定。</li></ul><h4 id="9-Programmable-drive-strength-adjustment-for-pullup-drive-and-pulldown-drive-strengths："><a href="#9-Programmable-drive-strength-adjustment-for-pullup-drive-and-pulldown-drive-strengths：" class="headerlink" title="9. Programmable drive strength adjustment for pullup drive and pulldown drive strengths："></a>9. <strong>Programmable drive strength adjustment for pullup drive and pulldown drive strengths</strong>：</h4><ul><li>允许用户调节驱动强度，分别调整拉高和拉低的驱动强度。这使得在不同的工作条件下，SSTL接口能够适应各种负载，从而优化信号的完整性和稳定性。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>这段描述的功能是为了确保DDR接口在不同的环境和工作条件下能够保持稳定和高效。阻抗校准的关键目标是减少信号反射、确保数据传输的可靠性，并在较低功耗下完成这一切。通过这些功能，SSTL接口能够应对各种复杂的工作条件，如不同的时钟频率、温度变化等，保证信号传输的质量。</p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
            <tag> Impedance Calibration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信号反射</title>
      <link href="/2024/11/09/%E4%BF%A1%E5%8F%B7%E5%8F%8D%E5%B0%84/"/>
      <url>/2024/11/09/%E4%BF%A1%E5%8F%B7%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>信号反射是由于信号传输过程中遇到阻抗不匹配的情况，导致信号在传输线路上被部分或完全反射回源端的现象。信号反射可能导致信号质量下降，造成数据错误或通信中断。理解反射的原因，首先需要了解阻抗匹配的概念。<a><span id="more"></span></a></p></blockquote><h3 id="1-阻抗匹配的重要性"><a href="#1-阻抗匹配的重要性" class="headerlink" title="1. 阻抗匹配的重要性"></a>1. <strong>阻抗匹配的重要性</strong></h3><p>在信号传输过程中，信号需要沿着导线（比如电路板上的铜线或导线）传输。导线的特性阻抗（<strong>Zo</strong>）指的是信号沿导线传播时对电压和电流的响应。当信号从一个地方传播到另一个地方时，如果信号的源端、传输线和接收端的阻抗不匹配，就会发生反射。</p><h4 id="阻抗不匹配时的反射机制："><a href="#阻抗不匹配时的反射机制：" class="headerlink" title="阻抗不匹配时的反射机制："></a>阻抗不匹配时的反射机制：</h4><ul><li><strong>阻抗匹配</strong>：如果信号源的输出阻抗、传输线路的特性阻抗以及接收端的输入阻抗是相等的，那么信号会顺利地通过传输线路，几乎没有反射发生。</li><li><strong>阻抗不匹配</strong>：如果信号源的输出阻抗与传输线路的特性阻抗不同，或者传输线路的特性阻抗与接收端的输入阻抗不同，信号就会在接触到不匹配的阻抗时发生反射。</li></ul><h3 id="2-为什么会反射？"><a href="#2-为什么会反射？" class="headerlink" title="2. 为什么会反射？"></a>2. <strong>为什么会反射？</strong></h3><p>信号反射发生的原因是，信号遇到不同阻抗时会产生一种<strong>反射波</strong>，与原始信号方向相反。具体来说，信号遇到不匹配的阻抗时，会被部分地反射回去，同时另一部分会继续前进。</p><h4 id="反射的过程："><a href="#反射的过程：" class="headerlink" title="反射的过程："></a>反射的过程：</h4><ul><li>当信号通过传输线时，它的电流和电压会受到线路的特性阻抗影响。</li><li>如果传输线路的<strong>阻抗</strong>与信号源的<strong>输出阻抗</strong>或接收端的<strong>输入阻抗</strong>不同，信号的部分能量就会被反射回源端，产生反射信号。</li><li>反射波可能会干扰到原始信号，导致数据错误、时序问题或信号干扰。</li></ul><h3 id="3-反射会带来哪些问题？"><a href="#3-反射会带来哪些问题？" class="headerlink" title="3. 反射会带来哪些问题？"></a>3. <strong>反射会带来哪些问题？</strong></h3><ol><li><strong>信号失真</strong>：反射波与原始信号重叠，导致信号在接收端发生畸变，可能使信号变得模糊不清，从而产生错误的解码。</li><li><strong>时序问题</strong>：在高速信号传输中，反射可能导致信号的延迟，进而引发时序问题，特别是在同步电路中，导致数据丢失或错误。</li><li><strong>噪声增加</strong>：反射会在电路中引入不必要的噪声，影响电路的正常工作。</li></ol><h3 id="4-信号反射的常见原因"><a href="#4-信号反射的常见原因" class="headerlink" title="4. 信号反射的常见原因"></a>4. <strong>信号反射的常见原因</strong></h3><ul><li><strong>传输线的阻抗不匹配</strong>：如果电路板的走线设计不合理，传输线的阻抗与信号源或接收端的阻抗不匹配，就会发生反射。</li><li><strong>接头和连接器</strong>：在信号传输过程中，连接器或插座的接触不良、插头不正确或松动，都会导致阻抗不匹配，进而产生反射。</li><li><strong>不连续的线路</strong>：例如，信号线弯曲得太急或有不规则的变化，这些都可能导致局部的阻抗变化，进而产生反射。</li><li><strong>终端未连接或连接不当</strong>：如果传输线路没有正确的终端（即阻抗匹配），或者终端与线路的阻抗不匹配，也会导致反射。</li></ul><h3 id="5-如何避免信号反射？"><a href="#5-如何避免信号反射？" class="headerlink" title="5. 如何避免信号反射？"></a>5. <strong>如何避免信号反射？</strong></h3><ul><li><strong>阻抗匹配</strong>：最有效的方法是确保信号源、传输线路和接收端之间的阻抗是匹配的。这可以通过设计电路时选择合适的导线宽度、材料和布局来实现。</li><li><strong>使用终端电阻（ODT）</strong>：在信号传输线路的末端加入适当的电阻，确保终端阻抗与线路阻抗匹配。内存接口、SSTL标准和DDR接口常使用<strong>ODT</strong>（On-Die Termination）来实现阻抗匹配。</li><li><strong>避免信号线的急转弯</strong>：设计时避免信号线的急剧弯曲，保持较为平缓的线路走向，减少阻抗不连续的可能性。</li><li><strong>使用阻抗匹配的连接器</strong>：确保使用合适的连接器或插头，避免因连接不当而产生阻抗不匹配。</li></ul><h3 id="6-阻抗匹配的应用："><a href="#6-阻抗匹配的应用：" class="headerlink" title="6. 阻抗匹配的应用："></a>6. <strong>阻抗匹配的应用：</strong></h3><ul><li><strong>内存接口</strong>：如DDR内存中，阻抗匹配是确保信号稳定传输的关键，通常采用ODT（On-Die Termination）技术来实现。</li><li><strong>高速信号传输</strong>：例如，在PCIe、USB、HDMI等高速通信协议中，信号传输的阻抗匹配至关重要，反射会极大地影响数据传输速率和可靠性。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>信号反射的根本原因是阻抗不匹配，导致信号在传输过程中部分反射回源端。为了避免反射，必须确保信号源、传输线和接收端的阻抗匹配，设计时注意电路走线、使用合适的终端电阻等。通过这些方法，可以确保信号的完整性，提高系统的性能和可靠性。</p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ODT</title>
      <link href="/2024/11/09/ODT/"/>
      <url>/2024/11/09/ODT/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ODT（On-Die Termination） 是一种在半导体芯片（尤其是内存芯片，如DDR SDRAM）中用于信号完整性和减少反射的技术。它的作用是提供一种终端电阻，通常通过内置的电阻网络实现，用来匹配信号线路的阻抗，确保信号的稳定传输。<span id="more"></span></p></blockquote><h2 id="ODT的工作原理"><a href="#ODT的工作原理" class="headerlink" title="ODT的工作原理"></a><a>ODT的工作原理</a></h2><h4 id="1-目的"><a href="#1-目的" class="headerlink" title="1. 目的"></a>1. <strong>目的</strong></h4><ul><li>在高速信号传输中，尤其是大规模集成电路（如内存）中，信号在传输过程中可能会发生反射，这种反射会导致信号质量下降。ODT技术通过在信号线路终端提供一个匹配的阻抗，消除或减少信号反射，从而提高信号的完整性和系统的稳定性。</li></ul><h4 id="2-如何工作"><a href="#2-如何工作" class="headerlink" title="2. 如何工作"></a>2. <strong>如何工作</strong></h4><ul><li>ODT通过将终端电阻放置在芯片的I&#x2F;O端口（如内存芯片的DQS、DQ等数据线）上，以减少信号的反射。</li><li>ODT电阻通常会根据内存控制器的需求动态调节。例如，在数据传输期间，内存控制器可以启用ODT以进行有效的信号匹配，而在没有数据传输时，ODT可以被禁用以节省功耗。</li></ul><h4 id="3-ODT的类型："><a href="#3-ODT的类型：" class="headerlink" title="3. ODT的类型："></a>3. <strong>ODT的类型</strong>：</h4><ul><li><p>拉高（Pull-up）和拉低（Pull-down）终端：ODT可以通过两种方式进行配置：</p><ul><li><strong>拉高（Pull-up）</strong>：将信号线连接到VDD（电源电压）以增强信号的上升沿。</li><li><strong>拉低（Pull-down）</strong>：将信号线连接到地（GND）以增强信号的下降沿。</li></ul></li><li><p><strong>动态可编程ODT</strong>：在一些现代内存系统中，ODT的电阻值是可以动态调整的（例如根据工作频率、温度或其他条件），这种灵活性帮助系统在不同工作条件下优化信号传输。</p></li></ul><h4 id="4-优势："><a href="#4-优势：" class="headerlink" title="4. 优势："></a>4. <strong>优势</strong>：</h4><ul><li><strong>信号完整性</strong>：ODT能够减少信号反射和串扰，从而确保数据传输的准确性。</li><li><strong>功耗优化</strong>：通过在不需要的时候关闭ODT，可以减少功耗。</li><li><strong>高速操作</strong>：在高速DDR内存和其他高速I&#x2F;O接口中，ODT帮助信号在较高的频率下保持稳定。</li></ul><h4 id="5-常见应用："><a href="#5-常见应用：" class="headerlink" title="5. 常见应用："></a>5. <strong>常见应用</strong>：</h4><ul><li><strong>内存控制器</strong>：在DDR、LPDDR等内存标准中，ODT广泛应用于内存的读写过程中。</li><li><strong>高速数据总线</strong>：如SSTL、HSTL等标准，在高速数据传输中也会使用ODT技术。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a>总结</a></h2><p>ODT技术是现代电子系统中用于提高信号质量、减少反射和优化功耗的重要技术。它通过在芯片内部集成电阻来终止信号线，从而实现信号的阻抗匹配，广泛应用于内存接口和其他高速I&#x2F;O接口中。</p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRAM Command Unit(DCU)</title>
      <link href="/2024/11/06/DRAM%20Command%20Unit(DCU)/"/>
      <url>/2024/11/06/DRAM%20Command%20Unit(DCU)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>DRAM Command Unit (DCU) 是一个执行内存命令的模块，主要用于通过配置端口发出和控制 DRAM（动态随机存取存储器）命令以及 RDIMM（注册式双列直插内存模块）缓冲芯片的命令。它在 DRAM 系统中的作用是确保内存的初始化、调试和控制能够独立于内存控制器进行操作，提供灵活性和可调试性。<span id="more"></span></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><a>简介</a></h2><h3 id="1-允许通过配置端口执行-DRAM-初始化"><a href="#1-允许通过配置端口执行-DRAM-初始化" class="headerlink" title="1. 允许通过配置端口执行 DRAM 初始化"></a>1. <strong>允许通过配置端口执行 DRAM 初始化</strong></h3><ul><li><strong>DRAM 初始化</strong> 是指在内存模块首次启用或复位时，需要进行的一系列操作，以确保内存正常工作。通常包括设置内存时序、刷新模式、存取模式等参数。</li><li><strong>配置端口</strong> 提供了一种通过软件来控制 DRAM 初始化过程的方法，而不需要依赖复杂的硬件控制逻辑。这意味着，用户可以通过编程接口向 DRAM 发出命令，从而实现初始化操作。这种方法使得内存初始化过程可以更加灵活和可控。</li><li>举个例子，执行 DRAM 初始化时，可能需要向内存发送预充电、行激活、读取、写入等命令，通过配置端口，开发人员可以精确控制这些命令的发送顺序和时序，确保内存的可靠性。</li></ul><h3 id="2-提供独立于控制器的统一硅调试和表征功能"><a href="#2-提供独立于控制器的统一硅调试和表征功能" class="headerlink" title="2. 提供独立于控制器的统一硅调试和表征功能"></a>2. <strong>提供独立于控制器的统一硅调试和表征功能</strong></h3><ul><li><strong>硅调试</strong> 和 <strong>表征</strong> 是指在开发过程中通过硬件和软件的协同工作来验证和测试芯片（尤其是内存子系统）的性能、时序、功耗等特性。</li><li>DCU 允许开发人员通过软件接口直接向 DRAM 发送命令进行调试，而不依赖于内存控制器（如内存控制器的硬件实现）。这样，即使没有完整的内存控制器，调试人员仍然可以独立地对内存进行测试和验证。</li><li>例如，可以使用 DCU 单元发送特定的命令流来验证 DRAM 在各种工作负载下的性能，或者进行精确的时序分析，确保内存与控制器之间的信号传输没有问题。</li></ul><h3 id="3-提供-DRAM-命令的通用软件执行机制"><a href="#3-提供-DRAM-命令的通用软件执行机制" class="headerlink" title="3. 提供 DRAM 命令的通用软件执行机制"></a>3. <strong>提供 DRAM 命令的通用软件执行机制</strong></h3><ul><li>DCU 不仅仅是一个硬件单元，它还支持通过软件来执行一系列 DRAM 命令。这使得开发人员能够通过编程方式控制内存的各个方面。</li><li>例如，软件可以通过 DCU 向 DRAM 发出常见的命令，如 <strong>读取</strong>（READ）、<strong>写入</strong>（WRITE）、<strong>预充电</strong>（PRECHARGE）、<strong>行激活</strong>（ACTIVATE）等。这样，开发人员可以在不同的工作模式下测试内存，验证功能是否正常。</li><li>这种通用软件执行的机制使得软件开发人员能够灵活地模拟和控制内存行为，方便进行不同的测试和操作。</li></ul><p><img src="https://s2.loli.net/2024/11/06/Qmv5cFEN6lDIjGn.png" alt="image-20241106235450107"></p><p><img src="https://s2.loli.net/2024/11/06/KPkgvjCd9mGOTEH.png" alt="image-20241106235724242"></p><h3 id="1-读取状态块-Read-Status-Block"><a href="#1-读取状态块-Read-Status-Block" class="headerlink" title="1. 读取状态块 (Read Status Block)"></a>1. <strong>读取状态块 (Read Status Block)</strong></h3><p>读取状态块是一个用于管理和跟踪内存读取操作状态的模块。它通常存储与读取操作相关的信息，例如读取请求是否完成、是否发生了错误等。在这个上下文中，读取状态块内有两个重要的缓存（期望缓存和读取缓存），它们共同工作来验证读取的数据是否符合预期。</p><h3 id="2-期望缓存-Expected-Cache"><a href="#2-期望缓存-Expected-Cache" class="headerlink" title="2. 期望缓存 (Expected Cache)"></a>2. <strong>期望缓存 (Expected Cache)</strong></h3><p>期望缓存用于存储系统预期从内存中读取的数据。当系统发起读取操作时，通常会预设一个预期值，并将其存入期望缓存中。然后，读取的数据将与这个期望值进行比较，用以验证读取的正确性。如果读取的数据与预期数据不符，则可能表明出现了错误或数据不一致。</p><h3 id="3-读取缓存-Read-Cache"><a href="#3-读取缓存-Read-Cache" class="headerlink" title="3. 读取缓存 (Read Cache)"></a>3. <strong>读取缓存 (Read Cache)</strong></h3><p>读取缓存存储实际从内存中读取的数据。它充当了内存与其他系统组件之间的缓冲区，用于缓存刚刚从内存中读取的数据。读取缓存中的数据会与期望缓存中的数据进行比较，从而确认数据是否符合预期。</p><h3 id="4-读取比较逻辑-Read-Compare-Logic"><a href="#4-读取比较逻辑-Read-Compare-Logic" class="headerlink" title="4. 读取比较逻辑 (Read Compare Logic)"></a>4. <strong>读取比较逻辑 (Read Compare Logic)</strong></h3><p>读取比较逻辑的作用是将读取缓存中的数据与期望缓存中的数据进行比较。这一步是确保数据一致性和正确性的重要环节。如果读取到的数据和期望的数据不匹配，系统可以根据需要触发错误或执行某些修复措施。这对于数据完整性检测和故障诊断至关重要。</p><h3 id="5-PUB引擎-PUB-Engines"><a href="#5-PUB引擎-PUB-Engines" class="headerlink" title="5. PUB引擎 (PUB Engines)"></a>5. <strong>PUB引擎 (PUB Engines)</strong></h3><p>PUB 引擎是系统中负责处理特定任务的模块或单元。文中提到，这些引擎与读取状态块共享期望缓存和读取缓存。也就是说，多个不同的处理单元或模块都可以访问这些缓存和比较逻辑，这样可以实现对内存读取的集中管理和处理。</p><h3 id="6-DCU寄存器-DCU-Registers"><a href="#6-DCU寄存器-DCU-Registers" class="headerlink" title="6. DCU寄存器 (DCU Registers)"></a>6. <strong>DCU寄存器 (DCU Registers)</strong></h3><p><strong>DCU</strong>（DRAM命令单元）是与内存控制器进行交互的模块，它负责发出命令、控制内存操作等。DCU寄存器是访问期望缓存和读取缓存的接口。换句话说，期望缓存和读取缓存的内容是通过DCU寄存器来读写的。开发人员或硬件组件可以通过操作这些寄存器来控制缓存中的数据或获取所需的信息。</p><h3 id="7-写入或读取DCU缓存-Writing-or-Reading-DCU-Caches"><a href="#7-写入或读取DCU缓存-Writing-or-Reading-DCU-Caches" class="headerlink" title="7. 写入或读取DCU缓存 (Writing or Reading DCU Caches)"></a>7. <strong>写入或读取DCU缓存 (Writing or Reading DCU Caches)</strong></h3><p>这部分描述了如何通过DCU寄存器来访问期望缓存和读取缓存。系统可以通过向这些寄存器写入数据来加载期望的值，或通过读取寄存器来获取实际读取的数据。通过这种方式，DCU为内存操作提供了灵活的控制接口，开发人员可以通过它来执行各种内存读取验证操作。</p><hr><h2 id="DCU命令（DCU-Commands）"><a href="#DCU命令（DCU-Commands）" class="headerlink" title="DCU命令（DCU Commands）"></a><a><strong>DCU命令（DCU Commands）</strong></a></h2><p><strong>DCU</strong>（DRAM命令单元）允许用户通过配置端口、APB（外设总线）或JTAG接口发出SDRAM命令。这个部分描述了如何编程DCU来执行SDRAM命令以及相关的时序要求。</p><h4 id="1-通过DCU执行SDRAM命令"><a href="#1-通过DCU执行SDRAM命令" class="headerlink" title="1. 通过DCU执行SDRAM命令"></a>1. <strong>通过DCU执行SDRAM命令</strong></h4><ul><li>DCU能够支持执行各种SDRAM命令，具体命令可以在文档的“PUB Commands”部分（第471页）找到。SDRAM命令是内存控制器与SDRAM之间通信的基本单元，例如读写操作、激活（Activate）、预充电（Precharge）等。</li><li>用户通过编程DCU来设置这些命令，并将其发送到SDRAM。这意味着通过DCU，用户可以控制SDRAM的操作，而无需直接控制硬件级别的细节。</li></ul><h4 id="2-时序要求"><a href="#2-时序要求" class="headerlink" title="2. 时序要求"></a>2. <strong>时序要求</strong></h4><ul><li><strong>时序控制</strong>：当用户编程DCU并发出命令时，DCU并不会自动处理这些命令的时序。也就是说，DCU只是将命令发送到SDRAM，但不会自动根据命令的执行顺序和时序要求来调整操作。</li><li><strong>NOP命令</strong>：在SDRAM命令序列中，NOP（No Operation，无操作）命令常用于填充时序空隙或者确保系统的时序满足要求。如果DCU在执行命令时存在时间间隔，需要通过插入适当数量的NOP命令来填补这些空白。</li><li><strong>时序特性</strong>：为了确保命令按预期执行，用户可以使用DCU的一些<strong>时序功能</strong>来调整命令之间的间隔，确保满足设备的时序要求。设备的时序要求包括每个命令的最小间隔时间，以及不同命令之间的依赖关系（例如，读取命令与激活命令之间的时序关系）。</li></ul><h4 id="3-激活（Activate）和预充电（Precharge）命令"><a href="#3-激活（Activate）和预充电（Precharge）命令" class="headerlink" title="3. 激活（Activate）和预充电（Precharge）命令"></a>3. <strong>激活（Activate）和预充电（Precharge）命令</strong></h4><ul><li><strong>激活命令（Activate Command）</strong>：用于打开SDRAM的一个特定的行。只有在激活命令之后，SDRAM的特定行才能被访问。</li><li><strong>预充电命令（Precharge Command）</strong>：用于关闭SDRAM的一个行，为新的读取或写入操作腾出空间。预充电命令通常在进行写入操作之前发出，以确保行被正确关闭。</li><li><strong>手动控制</strong>：DCU不会自动生成激活命令或预充电命令。这意味着在执行读取或写入命令之前，用户需要手动发出激活命令来打开正确的行，并在操作结束后发出预充电命令以关闭该行。</li></ul><h4 id="4-操作顺序和依赖关系"><a href="#4-操作顺序和依赖关系" class="headerlink" title="4. 操作顺序和依赖关系"></a>4. <strong>操作顺序和依赖关系</strong></h4><ul><li>在执行SDRAM命令时，命令之间有严格的顺序和依赖关系。例如，在发出读写命令之前，必须确保相应的SDRAM银行（bank）已被激活（Activate），并且在结束写入操作后需要发出预充电（Precharge）命令。</li><li>用户必须根据SDRAM的时序规范来手动安排这些命令的顺序。如果命令顺序不正确，可能导致读取或写入错误，甚至是内存损坏。</li></ul><hr><h2 id="DCU缓存（DCU-Caches）-的详细解释："><a href="#DCU缓存（DCU-Caches）-的详细解释：" class="headerlink" title="DCU缓存（DCU Caches） 的详细解释："></a><a><strong>DCU缓存（DCU Caches）</strong> 的详细解释：</a></h2><p>DCU（DRAM命令单元）有三个主要缓存，用于提高操作效率和数据访问的灵活性。下面对这三个缓存进行详细解释：</p><h3 id="1-命令缓存（Command-Cache）"><a href="#1-命令缓存（Command-Cache）" class="headerlink" title="1. 命令缓存（Command Cache）"></a>1. <strong>命令缓存（Command Cache）</strong></h3><ul><li><strong>深度</strong>：16深度（16 entries）。</li><li><strong>功能</strong>：命令缓存用于存储待执行的DRAM命令。这些命令由调度器（scheduler）执行。命令缓存是一个队列，按顺序存储和调度将要发送到DRAM的命令。通过使用命令缓存，系统可以按顺序缓冲多个命令，提高执行效率。</li><li><strong>内容</strong>：缓存中的每个条目不仅包括DRAM命令，还包含调度器所需的所有字段。特别地，每个条目还包含一个3位的RPT字段（Repeat Field），用于指示命令是否需要重复执行。RPT字段允许命令被执行多次。</li></ul><h3 id="2-读取数据缓存（Read-Data-Cache）"><a href="#2-读取数据缓存（Read-Data-Cache）" class="headerlink" title="2. 读取数据缓存（Read Data Cache）"></a>2. <strong>读取数据缓存（Read Data Cache）</strong></h3><ul><li><strong>深度</strong>：4深度（4 entries）。</li><li><strong>别名</strong>：也叫做<strong>捕获缓存（Capture Cache）</strong>。</li><li><strong>功能</strong>：读取数据缓存用于捕获从DRAM读取的数据。它存储从DRAM读取的一个字节的数据。这是为了快速捕捉和暂存读取的数据，在后续的操作中可以直接从缓存中获取，而不必每次都去访问DRAM。</li><li><strong>应用</strong>：该缓存是一个非常小的缓存，它通过缓存最常用的数据，减少了访问DRAM的次数，从而提高了数据读取的效率。</li></ul><h3 id="3-期望数据缓存（Expected-Data-Cache）"><a href="#3-期望数据缓存（Expected-Data-Cache）" class="headerlink" title="3. 期望数据缓存（Expected Data Cache）"></a>3. <strong>期望数据缓存（Expected Data Cache）</strong></h3><ul><li><strong>深度</strong>：16深度（16 entries）。</li><li><strong>功能</strong>：期望数据缓存用于存储预期与读取数据进行比较的数据。通过将读取数据与期望数据进行比对，系统能够判断数据是否正确或是否存在错误。该缓存是数据验证的一部分。</li><li><strong>内容</strong>：缓存中的每个条目都包含一个5位的数据码，共80个寄存器。为了提高配置端口的访问速度，期望数据缓存是作为一个1深度、80位宽的缓存来定义的，这样只需要3次寄存器写入（而如果定义为16深度5位的缓存，则需要16次写入）。这个设计减少了配置数据写入的次数，从而提高了数据加载的效率。</li></ul><h3 id="4-缓存结构和访问"><a href="#4-缓存结构和访问" class="headerlink" title="4. 缓存结构和访问"></a>4. <strong>缓存结构和访问</strong></h3><ul><li>每个缓存行都有一个与之对应的地址，用于标识缓存中的具体条目。例如，命令缓存有16行，因此缓存行的地址范围是0到15。</li><li>每个缓存行会被划分为若干个<strong>32位片段（slice）</strong>，其中第0片段是缓存行中的最低有效字（least significant word）。每行的片段数量取决于设计中存在的字节通道数（byte lanes）和缓存类型。</li><li>例如，<strong>读取数据缓存</strong>和<strong>期望数据缓存</strong>仅存储数据，不包含命令信息，而<strong>命令缓存</strong>除了包含命令字段外，还包括调度器需要的其他字段。</li></ul><h3 id="5-命令缓存条目的结构"><a href="#5-命令缓存条目的结构" class="headerlink" title="5. 命令缓存条目的结构"></a>5. <strong>命令缓存条目的结构</strong></h3><ul><li><strong>命令缓存</strong>的每个条目包括多个字段，这些字段由调度器使用。命令字段的格式类似于系统中其他内部引擎所使用的格式。这些字段包括命令类型、地址、数据和控制信号。</li><li>需要注意的是，<strong>命令缓存行的宽度不一定需要是32位的倍数</strong>。如果不是，最重要的字段（即最高有效字）应该通过填充0来确保它成为一个完整的32位字，以便进行写入操作。</li></ul><h3 id="6-访问方式"><a href="#6-访问方式" class="headerlink" title="6. 访问方式"></a>6. <strong>访问方式</strong></h3><ul><li>用户可以通过<strong>DCU地址寄存器（DCUAR）</strong>和<strong>DCU数据寄存器（DCUDR）</strong>来读写这些缓存。DCU地址寄存器用于选择缓存的条目（例如，选择命令缓存的某一行），而数据寄存器则用于存取该条目的数据。</li><li>在配置端口上，数据的写入或读取操作是通过寄存器来完成的，每个条目的数据通过这些寄存器进行传输。</li></ul><h3 id="7-缓存行格式"><a href="#7-缓存行格式" class="headerlink" title="7. 缓存行格式"></a>7. <strong>缓存行格式</strong></h3><ul><li>每个缓存行的格式对于正确编程和使用DCU命令缓存至关重要。特别是，编程DCU命令缓存时，必须正确设置每个字段的宽度，以确保数据能够按预期方式存储和访问。</li></ul><h3 id="8-BIST和训练功能的使用"><a href="#8-BIST和训练功能的使用" class="headerlink" title="8. BIST和训练功能的使用"></a>8. <strong>BIST和训练功能的使用</strong></h3><ul><li>读取数据缓存和期望数据缓存不仅仅用于标准的DRAM命令执行，它们还被其他PUB内部引擎（如<strong>BIST</strong>或<strong>训练功能</strong>）所使用。BIST（内建自测试，Built-In Self Test）和训练功能通常用于自检或优化SDRAM的性能。</li></ul><p><img src="https://s2.loli.net/2024/11/07/dum25cyYqCeDQjl.png" alt="image-20241107000127665"></p><hr><h2 id="写入或读取DCU缓存（Writing-or-Reading-DCU-Caches）-的详细解释："><a href="#写入或读取DCU缓存（Writing-or-Reading-DCU-Caches）-的详细解释：" class="headerlink" title="写入或读取DCU缓存（Writing or Reading DCU Caches） 的详细解释："></a><a><strong>写入或读取DCU缓存（Writing or Reading DCU Caches）</strong> 的详细解释：</a></h2><p>写入和读取DCU缓存（命令缓存、读取数据缓存、期望数据缓存）有两种方法。下面详细解释了这两种方法。</p><h3 id="1-手动写入或读取"><a href="#1-手动写入或读取" class="headerlink" title="1. 手动写入或读取"></a>1. <strong>手动写入或读取</strong></h3><ul><li>步骤<ul><li><strong>写入</strong>：要写入数据，首先需要将<strong>行地址（row address）**和**切片地址（slice address）**写入到**DCU地址寄存器（DCUAR）<strong>。接着，将32位的数据写入</strong>DCU数据寄存器（DCUDR）</strong>。这个过程需要手动控制行地址和切片地址的变化，确保每次都写入正确的地址位置。</li><li><strong>读取</strong>：与写入类似，读取数据时也需要首先设置正确的行地址和切片地址，然后读取相应的数据。</li></ul></li></ul><p>这种方法虽然可以精确控制缓存的读写，但也可能比较繁琐，因为每次都需要手动更新地址寄存器，逐步填写每个缓存行的内容。</p><h3 id="2-自动地址递增机制"><a href="#2-自动地址递增机制" class="headerlink" title="2. 自动地址递增机制"></a>2. <strong>自动地址递增机制</strong></h3><p>为了简化写入和读取过程，PUB实现了一种<strong>自动地址递增机制</strong>，该机制通过设置<strong>DCUAR寄存器中的INCA字段</strong>来启用。这种方式简化了手动控制的步骤，减少了错误和混乱的可能性。</p><ul><li><p>如何工作</p><p>：</p><ul><li><strong>启用自动递增</strong>：通过在<strong>DCUAR寄存器</strong>中设置<strong>INCA字段</strong>，用户只需要指定<strong>起始行地址</strong>和<strong>起始切片地址</strong>，而不需要逐个更新地址。</li><li><strong>自动递增</strong>：每次将32位数据写入<strong>DCUDR寄存器</strong>时，切片地址（slice address）会自动递增，直到当前缓存行被填满。当当前缓存行被填满时，切片地址会重置为0，并且行地址会自动递增，跳转到下一个缓存行。</li><li><strong>简化操作</strong>：用户只需要进行一次起始地址和切片地址的设置，之后的所有操作会自动进行地址递增，极大简化了缓存操作，减少了手动控制的复杂性。</li></ul></li></ul><h3 id="3-自动地址递增的优点"><a href="#3-自动地址递增的优点" class="headerlink" title="3. 自动地址递增的优点"></a>3. <strong>自动地址递增的优点</strong></h3><ul><li><strong>减少复杂性</strong>：启用自动递增后，用户不需要每次都手动更新地址和切片地址，系统会自动处理这些步骤。这样可以减少配置错误和不必要的操作。</li><li><strong>提高效率</strong>：自动递增机制加快了数据写入的速度，因为它减少了对寄存器的频繁写入，并且在写入时，缓存行地址和切片地址的更新都是自动完成的。</li><li><strong>更少的错误</strong>：由于不需要手动跟踪和更新每个地址，减少了出错的可能性，尤其是在需要处理大批量数据时。</li></ul><hr><h2 id="DCU命令缓存写入示例（DCU-Command-Cache-Write-Example）-的详细解释："><a href="#DCU命令缓存写入示例（DCU-Command-Cache-Write-Example）-的详细解释：" class="headerlink" title="DCU命令缓存写入示例（DCU Command Cache Write Example） 的详细解释："></a><a><strong>DCU命令缓存写入示例（DCU Command Cache Write Example）</strong> 的详细解释：</a></h2><p>此部分展示了如何使用<strong>地址&#x2F;切片模式（address&#x2F;slice mode）</strong>来写入DCU命令缓存（command cache）。此模式用于将一个46位宽的命令字写入缓存。这是典型的用于支持LPDDRn系统的系统，其中使用了20位地址，并支持最多4个rank（内存通道）。</p><h4 id="1-背景说明"><a href="#1-背景说明" class="headerlink" title="1. 背景说明"></a>1. <strong>背景说明</strong></h4><ul><li><strong>命令字宽度</strong>：每个命令字为46位。为了在命令缓存中写入此类数据，每一行将被拆分成两个32位的字（也就是两个切片），因此一个缓存行会由两个32位的字组成，其中第二个32位的字只有前14位有效（因为总宽度是46位）。</li><li><strong>命令缓存行数</strong>：命令缓存的每一行有两个32位的切片，其中每个切片（32位）存储命令字的一个部分。第二个切片中的数据只有前14位有效，后18位将被忽略。</li></ul><h4 id="2-写入过程"><a href="#2-写入过程" class="headerlink" title="2. 写入过程"></a>2. <strong>写入过程</strong></h4><p>要在此模式下写入命令缓存，必须按如下步骤通过配置端口（或者APB或JTAG）向寄存器写入数据：</p><p><strong>步骤 1：写入DCU地址寄存器（<code>DCUAR</code>）</strong></p><ul><li>将以下字段写入<code>DCUAR</code>寄存器，设置用于命令缓存的地址和切片信息：<ul><li><strong>CSEL &#x3D; 2’b00</strong>：选择命令缓存（Command Cache）。</li><li><strong>INCA &#x3D; 0</strong>：禁用地址递增（即每次写入时，地址不会自动递增，需要手动递增切片地址）。</li><li><strong>ATYPE &#x3D; 0</strong>：写入访问（Write Access）。</li><li><strong>CWADDR &#x3D; 0</strong>：选择缓存行地址为0。</li><li><strong>CSADDR &#x3D; 0</strong>：选择缓存切片为0（即写入第一部分的32位数据）。</li></ul></li></ul><p><strong>步骤 2：写入32位数据到DCU数据寄存器（<code>DCUDR</code>）</strong></p><ul><li>写入<strong>32位数据字</strong>，该数据字代表命令字的第0到31位（即命令字的低32位）。这是缓存行的第一部分数据。</li></ul><p><strong>步骤 3：更新DCU地址寄存器（<code>DCUAR</code>）以选择切片1</strong></p><ul><li>在<code>DCUAR</code>寄存器中再次写入（保持之前的设置，更新切片地址）：<ul><li><strong>CWADDR &#x3D; 0</strong>：行地址保持为0。</li><li><strong>CSADDR &#x3D; 1</strong>：选择缓存的第二个切片（即写入命令字的第32到45位）。</li></ul></li></ul><p><strong>步骤 4：写入32位数据到DCU数据寄存器（DCUDR）</strong></p><ul><li>写入<strong>32位数据字</strong>，该数据字代表命令字的第32到45位（即命令字的高14位）。请注意，命令字的第14到31位会被忽略，只写入有效的高14位数据。</li></ul><p><strong>步骤 5：重复上述步骤</strong></p><ul><li>对于每个命令缓存行（从行地址0开始），重复步骤1到步骤4，直到所有命令缓存行都写入数据。每次操作时，更新<strong>CWADDR（行地址）</strong>，使其递增，直到所有缓存行完成写入。</li></ul><h4 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. <strong>注意事项</strong></h4><ul><li><strong>起始和结束地址</strong>：命令缓存的写入不一定需要从行地址<strong>CWADDR &#x3D; 0</strong>开始。你可以通过<strong>DCU运行寄存器（DCURR）</strong>指定任何起始和结束地址。但是，结束地址必须大于起始地址，因为执行会在命令缓存的最后一行结束，而不会环绕到缓存的开头。</li><li><strong>命令缓存的执行顺序</strong>：即使你指定了不同的起始和结束行地址，命令缓存的执行仍会按顺序从起始行执行到结束行，不会回绕到缓存的开头。</li></ul><hr><h2 id="DCU期望数据缓存写入示例（DCU-Expected-Cache-Write-Example）-的详细解释："><a href="#DCU期望数据缓存写入示例（DCU-Expected-Cache-Write-Example）-的详细解释：" class="headerlink" title="DCU期望数据缓存写入示例（DCU Expected Cache Write Example） 的详细解释："></a><a><strong>DCU期望数据缓存写入示例（DCU Expected Cache Write Example）</strong> 的详细解释：</a></h2><p>该示例展示了如何使用<strong>自动地址递增模式（automatic address incrementing mode）</strong>来写入DCU的期望数据缓存（expected data cache）。为了加速从配置端口的访问，期望数据缓存被定义为1深度、80位宽的缓存，这使得只需要<strong>3次寄存器写入</strong>即可加载数据，而如果该缓存被定义为**16深度、5位宽，则需要16次写入。</p><h4 id="1-背景说明-1"><a href="#1-背景说明-1" class="headerlink" title="1. 背景说明"></a>1. <strong>背景说明</strong></h4><ul><li><strong>缓存行宽度</strong>：期望数据缓存的行宽为80位。为了适应这个宽度，每行会被分成三个32位切片（即3个切片）。其中，第三个32位切片中只有前16位有效，因为总行宽只有80位，剩余的16位会被忽略。</li><li><strong>缓存的格式</strong>：期望数据缓存的每一行包含3个32位数据字（切片），每个数据字的位宽分别为[31:0]、[63:32]和[79:64]。</li></ul><h4 id="2-写入过程-1"><a href="#2-写入过程-1" class="headerlink" title="2. 写入过程"></a>2. <strong>写入过程</strong></h4><p>要在期望数据缓存中写入数据，并启用自动地址递增模式，需要按照以下步骤通过配置端口（或APB或JTAG）向寄存器写入数据：</p><p><strong>步骤 1：写入DCU地址寄存器（<code>DCUAR</code>）</strong></p><ul><li>将以下字段写入<code>DCUAR</code>寄存器，设置用于期望数据缓存的地址和切片信息：<ul><li><strong>CSEL &#x3D; 2’b01</strong>：选择期望数据缓存（Expected Data Cache）。</li><li><strong>INCA &#x3D; 1</strong>：启用地址递增（即每次写入时，地址会自动递增）。</li><li><strong>ATYPE &#x3D; 0</strong>：写入访问（Write Access）。</li><li><strong>CWADDR &#x3D; 0</strong>：选择缓存行地址为0（行地址为0）。</li><li><strong>CSADDR &#x3D; 0</strong>：选择缓存切片为0（即写入第一部分的32位数据）。</li></ul></li></ul><p><strong>步骤 2：写入32位数据到DCU数据寄存器（<code>DCUDR</code>）</strong></p><ul><li>写入<strong>32位数据字</strong>，该数据字代表期望数据缓存的第0到31位（即命令字的低32位）。这是缓存行的第一部分数据。</li></ul><p><strong>步骤 3：更新DCU地址寄存器（<code>DCUAR</code>）以选择切片1</strong></p><ul><li>在<code>DCUAR</code>寄存器中再次写入（保持之前的设置，更新切片地址）：<ul><li><strong>CWADDR &#x3D; 0</strong>：行地址保持为0。</li><li><strong>CSADDR &#x3D; 1</strong>：选择缓存的第二个切片（即写入命令字的第32到63位）。</li></ul></li></ul><p><strong>步骤 4：写入32位数据到DCU数据寄存器（<code>DCUDR</code>）</strong></p><ul><li>写入<strong>32位数据字</strong>，该数据字代表期望数据缓存的第32到63位（即命令字的第32到63位）。写入的数据会填充缓存行的第二部分。</li></ul><p><strong>步骤 5：更新DCU地址寄存器（&#96;&#96;DCUAR&#96;）以选择切片2</strong></p><ul><li>在DCUAR寄存器中再次写入（保持之前的设置，更新切片地址）：<ul><li><strong>CWADDR &#x3D; 0</strong>：行地址保持为0。</li><li><strong>CSADDR &#x3D; 2</strong>：选择缓存的第三个切片（即写入命令字的第64到79位）。</li></ul></li></ul><p><strong>步骤 6：写入32位数据到DCU数据寄存器（<code>DCUDR</code>）</strong></p><ul><li>写入<strong>32位数据字</strong>，该数据字代表期望数据缓存的第64到79位（即命令字的第64到79位）。请注意，此时数据的第16到31位将被忽略，只会写入有效的前16位。</li></ul><h4 id="3-注意事项-1"><a href="#3-注意事项-1" class="headerlink" title="3. 注意事项"></a>3. <strong>注意事项</strong></h4><ul><li><strong>地址递增</strong>：启用<strong>INCA &#x3D; 1</strong>后，每次写入时切片地址会自动递增，直到缓存行写满为止。这样可以省去手动更新地址的步骤，简化操作。</li><li><strong>无效数据位</strong>：期望数据缓存的每行宽度为80位，第三个32位切片中只有前16位有效，后16位的数据会被忽略，因此每次写入时，需要确保只写入有效数据。</li></ul><hr><h2 id="DCU读取数据缓存读取示例（DCU-Read-Data-Cache-Read-Example）的详细解释："><a href="#DCU读取数据缓存读取示例（DCU-Read-Data-Cache-Read-Example）的详细解释：" class="headerlink" title="DCU读取数据缓存读取示例（DCU Read Data Cache Read Example）的详细解释："></a><a><strong>DCU读取数据缓存读取示例（DCU Read Data Cache Read Example）</strong>的详细解释：</a></h2><p>此示例展示了如何使用<strong>自动地址递增模式（automatic address incrementing mode）</strong>读取DCU的读取数据缓存（read data cache）。读取数据缓存每行包含32位数据，并且总共有4行，每行包含1个32位数据字（或1个切片）。</p><h4 id="1-背景说明-2"><a href="#1-背景说明-2" class="headerlink" title="1. 背景说明"></a>1. <strong>背景说明</strong></h4><ul><li><strong>缓存行宽度</strong>：读取数据缓存的每一行宽度为32位，即每行只有1个切片。</li><li><strong>缓存的行数</strong>：共有4行数据，分别对应读取缓存的不同部分。</li></ul><h4 id="2-读取过程"><a href="#2-读取过程" class="headerlink" title="2. 读取过程"></a>2. <strong>读取过程</strong></h4><p>要从读取数据缓存中读取数据，并启用自动地址递增模式，需要按照以下步骤通过配置端口（或APB或JTAG）与寄存器进行交互：</p><p><strong>步骤 1：写入DCU地址寄存器（DCUAR）</strong></p><ul><li>向DCUAR寄存器写入以下字段，设置用于读取数据缓存的地址和切片信息：<ul><li><strong>CSEL &#x3D; 2’b10</strong>：选择读取数据缓存（Read Data Cache）。</li><li><strong>INCA &#x3D; 1</strong>：启用地址递增（即每次读取时，地址会自动递增）。</li><li><strong>ATYPE &#x3D; 1</strong>：读取访问（Read Access）。</li><li><strong>CWADDR &#x3D; 0</strong>：选择缓存行地址为0（行地址为0）。</li><li><strong>CSADDR &#x3D; 0</strong>：选择缓存切片为0（即从第一个切片开始读取）。</li></ul></li></ul><p><strong>步骤 2：从DCU数据寄存器（DCUDR）读取32位数据</strong></p><ul><li>读取<strong>32位数据字</strong>，该数据字代表缓存行的第0行数据（即缓存字的[31:0]位）。这是读取数据缓存的第一部分。</li></ul><p><strong>步骤 3：更新DCU地址寄存器（DCUAR）以选择下一行（行1）</strong></p><ul><li>在DCUAR寄存器中再次写入（保持之前的设置，更新行地址和切片地址）：<ul><li><strong>CWADDR &#x3D; 1</strong>：选择缓存行地址为1（读取缓存的第二行数据）。</li><li><strong>CSADDR &#x3D; 0</strong>：继续选择缓存切片为0。</li></ul></li></ul><p><strong>步骤 4：从DCU数据寄存器（DCUDR）读取32位数据</strong></p><ul><li>读取<strong>32位数据字</strong>，该数据字代表缓存行的第1行数据（即缓存字的[31:0]位）。这是读取数据缓存的第二部分。</li></ul><p><strong>步骤 5：更新DCU地址寄存器（DCUAR）以选择下一行（行2）</strong></p><ul><li>在DCUAR寄存器中再次写入：<ul><li><strong>CWADDR &#x3D; 2</strong>：选择缓存行地址为2（读取缓存的第三行数据）。</li><li><strong>CSADDR &#x3D; 0</strong>：继续选择缓存切片为0。</li></ul></li></ul><p><strong>步骤 6：从DCU数据寄存器（DCUDR）读取32位数据</strong></p><ul><li>读取<strong>32位数据字</strong>，该数据字代表缓存行的第2行数据（即缓存字的[31:0]位）。这是读取数据缓存的第三部分。</li></ul><p><strong>步骤 7：更新DCU地址寄存器（DCUAR）以选择下一行（行3）</strong></p><ul><li>在DCUAR寄存器中再次写入：<ul><li><strong>CWADDR &#x3D; 3</strong>：选择缓存行地址为3（读取缓存的第四行数据）。</li><li><strong>CSADDR &#x3D; 0</strong>：继续选择缓存切片为0。</li></ul></li></ul><p><strong>步骤 8：从DCU数据寄存器（DCUDR）读取32位数据</strong></p><ul><li>读取<strong>32位数据字</strong>，该数据字代表缓存行的第3行数据（即缓存字的[31:0]位）。这是读取数据缓存的最后部分。</li></ul><h4 id="3-注意事项-2"><a href="#3-注意事项-2" class="headerlink" title="3. 注意事项"></a>3. <strong>注意事项</strong></h4><ul><li><strong>地址递增</strong>：由于每行的宽度为32位，并且每行只有一个切片，因此每次从DCUDR读取32位数据时，地址会自动递增。这样每次读取的数据都会对应到下一行的内容。即每次读取时，<strong>行地址（CWADDR）会自动递增</strong>，不需要手动更新。</li><li><strong>缓存行宽度</strong>：读取数据缓存的每行宽度为32位，这意味着每次读取的数据都会填充整个缓存行，不会出现需要裁剪或忽略的部分。</li></ul><p><a>BDXSEL 由 DCU 读数据缓存使用，以选择字节通道来捕获读取数据。</a></p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BIST（内建自检模块简介）</title>
      <link href="/2024/11/05/BIST%E5%86%85%E5%BB%BA%E8%87%AA%E6%A3%80%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/"/>
      <url>/2024/11/05/BIST%E5%86%85%E5%BB%BA%E8%87%AA%E6%A3%80%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>BIST (Built-In Self-Test)</strong> 模块是一种可编程的自检引擎，它为应用程序提供了一种测试 DDR PHY 和 I&#x2F;O 的方法，主要用于高速生产测试。BIST 模块通过 <strong>回路回送</strong>（loopback）方式来验证 PHY 的发送路径和接收路径的功能。除此之外，还可以选择测试外部内存的功能。<a><span id="more"></span></a></p></blockquote><h3 id="BIST-模块的功能"><a href="#BIST-模块的功能" class="headerlink" title="BIST 模块的功能"></a>BIST 模块的功能</h3><ol><li><strong>PHY 测试</strong>：<br>BIST 通过将数据从 PHY 的发送路径通过回路回送到接收路径，来测试 PHY 的发送和接收功能。通过此方式，不需要外部存储器即可完成测试。</li><li><strong>I&#x2F;O 测试</strong>：<br>BIST 还可以测试 I&#x2F;O 的功能，确保数据能够正确地通过 I&#x2F;O 接口传输。</li><li><strong>外部内存测试</strong>（可选）：<br>如果需要，BIST 还提供了测试外部内存的功能。此时，BIST 会发送常规的写读事务到外部 DRAM，并比较从 DRAM 读取的数据和写入的数据是否一致。</li></ol><h3 id="BIST-模块的工作原理"><a href="#BIST-模块的工作原理" class="headerlink" title="BIST 模块的工作原理"></a>BIST 模块的工作原理</h3><ul><li><strong>回路回送模式</strong>（Loopback Mode）：<br>在回路回送模式下，BIST 将数据从 PHY 的发送路径通过 I&#x2F;O 返回到接收路径。这样，数据就可以在 PHY 内部进行循环回送，进行自检。这种模式不需要外部内存，因此适用于不需要依赖外部存储器的测试场景。</li><li><strong>DRAM 模式</strong>（DRAM Mode）：<br>在 DRAM 模式下，BIST 会向 DRAM 发送正常的写读事务，并将读取的数据与预期数据进行比较。该模式适用于测试外部 DRAM 存储器。</li></ul><h3 id="BIST-模块的结构（Block-Diagram）"><a href="#BIST-模块的结构（Block-Diagram）" class="headerlink" title="BIST 模块的结构（Block Diagram）"></a><strong>BIST 模块的结构（Block Diagram）</strong></h3><ul><li><p>BIST 模块的框图（提供详细图示）展示了各个功能模块之间的连接方式。它通常包括以下几个主要组件：</p><ul><li><strong>传输路径（Transmit Path）</strong>：用于将数据从 PHY 的发送端发送出去。</li><li><strong>接收路径（Receive Path）</strong>：用于接收回送的数据并进行比较。</li><li><strong>外部内存接口</strong>：如果使用 DRAM 测试模式，则通过外部内存接口与 DRAM 进行通信。</li><li><strong>测试模式选择器</strong>：允许选择回路回送模式或 DRAM 模式。</li><li><strong>控制寄存器</strong>：通过这些寄存器，可以控制 BIST 模块的启停，配置回送模式、DRAM 模式、错误检测等。</li></ul></li></ul><p>通过该图示，用户可以理解如何在不同测试模式下配置 BIST 模块，并进行 PHY 和 I&#x2F;O 的功能验证。</p><p><img src="https://s2.loli.net/2024/11/05/KVoF7RqgQZnbhmH.png" alt="image-20241105231703048"></p><hr><h3 id="1-环回模式（Loopback-Mode）"><a href="#1-环回模式（Loopback-Mode）" class="headerlink" title="1. 环回模式（Loopback Mode）"></a>1. <strong>环回模式（Loopback Mode）</strong></h3><p>环回模式是用来测试 PHY（物理层）和 I&#x2F;O 接口的。其原理是将写入的数据直接送回接收路径，这样就不需要外部存储器（例如 DRAM）来进行测试。具体来说：</p><ul><li><strong>DATXn 写路径和接收路径的环回：</strong> 在环回模式下，<strong>DATXn</strong>（数据线组）的写入数据将直接通过 I&#x2F;O 传输到接收路径上。也就是说，BIST 发送数据之后，数据直接回到发送端，而不经过外部存储器，这样可以用来验证 PHY 数据通道是否正常。</li><li><strong>AC 输出路径的环回：</strong> 另外，<strong>AC 输出路径</strong>也会在 I&#x2F;O 处被环回到专用的 AC 环回逻辑。AC 是指命令和地址通道（Address&#x2F;Command），它用于传输内存的读写地址和控制信号。这部分的环回确保地址和命令通道也能正确工作。</li></ul><p>这种模式的好处是无需连接外部 DRAM，测试过程可以在没有外部存储器的情况下进行，适合用于检查 PHY 层和 I&#x2F;O 接口的基本功能。</p><ul><li><strong>最小的 WL&#x2F;RL：</strong> 环回模式下支持的最小 WL（写延迟）和 RL（读延迟）为 6。WL&#x2F;RL 是内存操作的延时设置，通常与内存的时序参数有关。BIST 测试时，环回模式对延迟有最低要求。</li></ul><h3 id="2-DRAM模式（DRAM-Mode）"><a href="#2-DRAM模式（DRAM-Mode）" class="headerlink" title="2. DRAM模式（DRAM Mode）"></a>2. <strong>DRAM模式（DRAM Mode）</strong></h3><p>在 DRAM 模式下，BIST 会像正常的内存访问一样进行读写操作，写入数据到 DRAM 中，并从 DRAM 中读取数据来进行对比。这个模式实际上测试的是内存的数据完整性以及内存与 PHY 接口之间的配合。具体来说：</p><ul><li><strong>写读事务：</strong> 在 DRAM 模式下，BIST 会执行正常的<strong>写读事务</strong>（Write&#x2F;Read Transactions）。即，它将数据写入 DRAM 并从 DRAM 中读取数据来进行对比，确保内存和 PHY 层能够正常交互。</li><li><strong>地址和命令通道的环回：</strong> 即使是在 DRAM 模式下，<strong>地址&#x2F;命令通道</strong>（Address&#x2F;Command Channel）依然会在 I&#x2F;O 处进行环回。这意味着，BIST 不会向外部发送命令和地址信号，而是会将这些信号发送回自身，以确保地址&#x2F;命令通道的功能正确。</li><li><strong>外部存储器测试：</strong> 在 DRAM 模式下，可以将其用作测试外部内存（例如，外部的 DRAM 存储芯片），通过发送写读事务并进行数据比较，验证 DRAM 和 PHY 层的通信是否正确。</li></ul><hr><h3 id="PHY环回功能"><a href="#PHY环回功能" class="headerlink" title="PHY环回功能"></a><strong>PHY环回功能</strong></h3><p>PHY（物理层）环回是通过 <strong>I&#x2F;O</strong> 接口的环回功能实现的，目的是将从 I&#x2F;O 驱动出去的数据通过环回机制传回，以便进行测试和验证。环回的实现取决于 <strong>PGCR1[IOLB] 寄存器位的设置</strong>。</p><h3 id="环回机制的工作方式"><a href="#环回机制的工作方式" class="headerlink" title="环回机制的工作方式"></a><strong>环回机制的工作方式</strong></h3><ul><li><p>数据的环回：当数据从 I&#x2F;O 驱动出来时，它可以在两种不同的位置进行环回：</p><ul><li><strong>I&#x2F;O的pad侧：</strong> 这种方式是将数据在I&#x2F;O的pad（物理引脚）端进行环回，即数据通过I&#x2F;O引脚直接返回。</li><li><strong>I&#x2F;O的核心侧：</strong> 另一种方式是在I&#x2F;O的核心侧进行环回，即数据回到I&#x2F;O的内部逻辑。</li></ul></li></ul><p>具体选择哪种环回方式，取决于 <strong>PGCR1[IOLB]</strong> 寄存器位的设置。PGCR1 寄存器中的 <strong>[IOLB]</strong> 位用于配置环回的模式：</p><ul><li>如果 <strong>IOLB</strong> 位设置为某个特定值，它将决定数据是从 <strong>pad侧</strong> 还是 <strong>核心侧</strong> 进行环回。</li></ul><hr><h3 id="DATX8-Loopback"><a href="#DATX8-Loopback" class="headerlink" title="DATX8 Loopback"></a>DATX8 Loopback</h3><p><strong>DATX8 读路径与环回路径：</strong></p><ul><li><strong>DATX8</strong> 是 DDR 接口中的一部分，它在数据字节传输中负责读取数据。</li><li>在环回模式下，<strong>DATX8 的读路径</strong>会被用作环回路径。也就是说，数据（DQ、DM）和写入的 <strong>DQS</strong>（数据选通信号）会被环回到 <strong>DATX8</strong> 读路径中，并被当作 <strong>读 DQ&#x2F;DM</strong> 和 <strong>读 DQS</strong> 来处理。</li></ul><p><strong>DQS 信号的对齐问题：</strong></p><ul><li><strong>DQS</strong> 是在 DDR 写入操作中与数据一起传输的同步信号。在 <strong>写入路径</strong> 中，<strong>DQS</strong> 会相对于 <strong>DQ&#x2F;DM</strong> 信号提前 90 度发送，这样可以帮助在读取时对齐数据。</li><li>但是在 <strong>读路径</strong> 中，<strong>DATX8</strong> 期望 <strong>读 DQS</strong> 和 <strong>读 DQ&#x2F;DM</strong> 信号是 <strong>边缘对齐</strong>（edge-aligned）的，意味着它们应该在时序上保持同步。</li></ul><p><strong>问题：</strong></p><ul><li>在环回测试中，由于 <strong>写路径</strong> 会将 <strong>DQS</strong> 信号相对于 <strong>DQ&#x2F;DM</strong> 信号提前 90 度（这是为了帮助读取数据），<strong>DATX8</strong> 读路径会接收到已经提前 90 度的 <strong>DQS</strong> 信号。这个提前的 90 度是写路径的特性，而 <strong>DATX8</strong> 需要去掉这个提前，以确保 <strong>读 DQS</strong> 与 <strong>读 DQ&#x2F;DM</strong> 对齐。</li></ul><p><strong>解决方案：</strong></p><ul><li>为了消除这个 90 度的提前，应该通过 设置 LCDL（读取延迟控制）来调整 DQS信号的相位。具体来说：<ul><li>设置 <strong>DXnLCDLR4[RDQSD]</strong> 和 <strong>DXnLCDLR4[RDQSND]</strong> 为 0，这样可以去掉读取路径中 DQS 信号的 90 度偏移。</li><li>这确保了 <strong>环回模式</strong> 下，<strong>DQS</strong> 信号相对于 <strong>读数据</strong> 只会偏移 90 度，且 <strong>读取数据</strong> 和 <strong>读取 DQS</strong> 是同步对齐的。</li></ul></li></ul><p><strong>DDR3 写操作的预置（Write Preamble）：</strong></p><ul><li><strong>预置</strong> 是指在数据传输开始之前，信号在一定周期内的初始状态。在 DDR3 中，写操作通常有一个 <strong>全翻转预置</strong>（full toggle preamble），即信号在开始时进行翻转。</li><li>这个预置是为了保证数据的正确性，确保数据和控制信号能够准确地同步。</li></ul><p><strong>环回模式中的问题：</strong></p><ul><li>在 <strong>环回模式</strong> 下，数据通过 I&#x2F;O 路径被送回到接收器。通常在环回测试中，我们期望数据传输的信号在写入路径和读取路径之间能够同步。</li><li>由于 <strong>写预置</strong> 是一个全翻转预置，这意味着写入路径中的 <strong>DQS</strong>（数据选通信号）会进行翻转。</li><li>但是，如果环回时将这个信号直接送回读取路径，那么读取路径的 <strong>DQS 预置</strong> 也会跟着翻转，这就与预期的读取数据（通常来自 SDRAM 的数据）不一致。</li></ul><p><strong>问题的根源：</strong></p><ul><li><strong>预期的读取数据</strong> 应该是一个稳定的、没有翻转的信号。在标准的 <strong>SDRAM 写入操作</strong> 中，数据的读取路径中的 <strong>DQS</strong> 信号应该是一个稳定的 <strong>全时钟预置</strong>（non-toggling full-clock preamble），而不是像写路径中那样进行翻转。</li><li>如果将 <strong>写预置</strong> 在环回模式下直接传递到读取路径，那么读取路径的 <strong>DQS</strong> 信号也会经历翻转，导致数据和时序的错误。</li></ul><p><strong>解决方案：</strong></p><ul><li>为了保证环回模式下的正确性，需要 <strong>生成非翻转的全时钟预置</strong>（non-toggling full-clock preamble）信号，而不是全翻转的写预置。通过这种方式，可以确保在环回测试中，<strong>DQS</strong> 信号与读取数据的同步要求一致，避免了翻转问题。</li><li>具体来说，环回模式下会 <strong>生成与 SDRAM 预期相符的读取数据</strong>，即通过 <strong>不翻转的时钟预置</strong> 来确保 <strong>DQS</strong> 信号稳定，以匹配标准的 <strong>SDRAM</strong> 行为。</li></ul><hr><h3 id="AC-Loopback"><a href="#AC-Loopback" class="headerlink" title="AC Loopback"></a>AC Loopback</h3><h4 id="1-地址-命令通道-AC-Lane-："><a href="#1-地址-命令通道-AC-Lane-：" class="headerlink" title="1. 地址&#x2F;命令通道 (AC Lane)："></a>1. <strong>地址&#x2F;命令通道 (AC Lane)：</strong></h4><ul><li>地址&#x2F;命令通道负责与 <strong>SDRAM</strong>（同步动态随机存取存储器）进行通信，传输地址和控制信号。例如，<strong>地址信号</strong> 用于定位存储位置，<strong>命令信号</strong> 用于控制读写操作。</li></ul><h4 id="2-AC-PHY-环回逻辑："><a href="#2-AC-PHY-环回逻辑：" class="headerlink" title="2. AC PHY 环回逻辑："></a>2. <strong>AC PHY 环回逻辑</strong>：</h4><ul><li>在 DDR3 或 DDR4 系统中，AC PHY 负责处理地址和命令的物理层传输。为了在测试时不依赖外部内存，AC PHY 提供了内建的 <strong>环回逻辑</strong>，允许将地址和命令信号从 SDRAM 发送到 AC PHY，再从 AC PHY 环回到接收路径。环回后的信号被当作 <strong>读取数据</strong> 和 <strong>读取时钟</strong> 进行处理。</li></ul><h4 id="3-CK-CK-时钟信号的环回："><a href="#3-CK-CK-时钟信号的环回：" class="headerlink" title="3. CK&#x2F;CK# 时钟信号的环回："></a>3. <strong>CK&#x2F;CK# 时钟信号的环回</strong>：</h4><ul><li><strong>CK&#x2F;CK#</strong> 是用于同步数据传输的差分时钟信号。在 AC 环回模式下，<strong>CK&#x2F;CK#</strong> 信号被环回到 AC PHY，并被当作 <strong>读取时钟</strong> 来使用。</li><li>在环回过程中，时钟会被 <strong>反向</strong>（inverted），以确保 <strong>ck_do</strong>（环回后的时钟信号）能在 <strong>DDR 时钟</strong> 的一个周期之前传输，确保第一个环回数据能够被正确地采样。</li></ul><h4 id="4-BISTRR-BCKSEL-寄存器："><a href="#4-BISTRR-BCKSEL-寄存器：" class="headerlink" title="4. BISTRR[BCKSEL] 寄存器："></a>4. <strong>BISTRR[BCKSEL] 寄存器</strong>：</h4><ul><li>该寄存器字段用于选择哪个时钟信号（**CK[n]**）将用于捕捉地址和命令信号。在环回模式下，可以根据需要配置时钟源。</li></ul><h4 id="5-时钟反转（Inverted-Clock）："><a href="#5-时钟反转（Inverted-Clock）：" class="headerlink" title="5. 时钟反转（Inverted Clock）："></a>5. <strong>时钟反转（Inverted Clock）</strong>：</h4><ul><li>在 AC 环回模式中，时钟信号会被 <strong>反转</strong>，这样可以使环回数据在 DDR 时钟周期的 <strong>提前一个周期</strong>（一个 DDR 时钟周期提前）时被正确采样。</li><li><strong>反向时钟</strong> 的目的是确保 <strong>第一个环回的数据</strong> 能够在正确的时钟边沿上被采样，从而避免时序问题。</li></ul><h4 id="6-cke-和-cs-n-对齐："><a href="#6-cke-和-cs-n-对齐：" class="headerlink" title="6. cke 和 cs_n 对齐："></a>6. <strong>cke 和 cs_n 对齐</strong>：</h4><ul><li><strong>cke</strong>（时钟启用信号）和 <strong>cs_n</strong>（芯片选择信号）会与 <strong>ck_do</strong> 上升沿对齐。尽管时钟反转了，但因为 <strong>cke</strong> 和 <strong>cs_n</strong> 并没有被用于外部 DRAM 的操作，因此在环回测试中它们的对齐不会造成问题。</li><li>这意味着，即使时钟信号发生了反转，<strong>cke</strong> 和 <strong>cs_n</strong> 信号与时钟的对齐状态并不影响环回模式中的测试，因为它们并不直接影响 DRAM 的操作。</li></ul><h4 id="环回模式中的信号流程："><a href="#环回模式中的信号流程：" class="headerlink" title="环回模式中的信号流程："></a><strong>环回模式中的信号流程：</strong></h4><ol><li><strong>地址和命令信号</strong>：从 <strong>SDRAM</strong> 发出，通过 <strong>AC PHY</strong> 环回逻辑，进入 <strong>AC PHY</strong> 接收路径，并被视为 <strong>读取数据</strong>。</li><li><strong>时钟信号（CK&#x2F;CK#）</strong>：时钟信号同样被环回，反转后成为用于 <strong>读取数据</strong> 的时钟信号。</li><li><strong>cke 和 cs_n</strong>：这些信号与时钟信号对齐，但由于它们不影响 DRAM，时序对齐不影响测试。</li></ol><hr><h3 id="Loopback-Data-Capture"><a href="#Loopback-Data-Capture" class="headerlink" title="Loopback Data Capture"></a>Loopback Data Capture</h3><h4 id="时钟路径和数据路径的延迟差异"><a href="#时钟路径和数据路径的延迟差异" class="headerlink" title="时钟路径和数据路径的延迟差异"></a><strong>时钟路径和数据路径的延迟差异</strong></h4><p>在 <strong>环回数据捕获</strong>（loopback data capture）模式下，时钟路径和数据路径的延迟存在差异：</p><ul><li><strong>时钟路径</strong>：时钟信号的传播通常会有更大的延迟，因为时钟信号需要经过更多的逻辑单元（如时钟缓冲器、分配网络等）。</li><li><strong>数据路径</strong>：数据从发送端到接收端的路径可能涉及不同的逻辑单元，但相对于时钟路径的延迟，数据路径的延迟通常较小。</li></ul><p>这种延迟差异的产生是因为：</p><ul><li>时钟信号必须被精确同步并分配到所有相关的接收器。</li><li>数据路径通常依赖于更少的逻辑单元来传输实际的数据。</li></ul><h4 id="2-如何补偿时钟路径和数据路径之间的延迟差异"><a href="#2-如何补偿时钟路径和数据路径之间的延迟差异" class="headerlink" title="2. 如何补偿时钟路径和数据路径之间的延迟差异"></a>2. <strong>如何补偿时钟路径和数据路径之间的延迟差异</strong></h4><p>为了确保 <strong>环回数据</strong> 的正确捕获，需要补偿时钟路径和数据路径之间的延迟差异。这个补偿的方式是通过增加 <strong>数据路径的延迟</strong> 来实现，使其与时钟路径的延迟差异相匹配。</p><ul><li>为了补偿这种延迟差异，可以通过设置 <strong>AC BDLs</strong>（Address&#x2F;Command Bus Delay Line）为 <strong>0xA</strong> 来添加延迟。BDLs 控制 <strong>数据路径的延迟</strong>，通过设置这些寄存器的值为 0xA，可以在数据路径中引入适当的延迟，使其与时钟路径的延迟差异相匹配。<ul><li><strong>AC BDLs</strong>: 这是一个控制地址和命令通道中数据路径延迟的寄存器字段。</li><li><strong>值 0xA</strong>：这个值表示一个特定的延迟量，根据设计的要求，这个延迟可以通过该设置来调整。</li></ul></li></ul><h4 id="3-延迟的计算"><a href="#3-延迟的计算" class="headerlink" title="3. 延迟的计算"></a>3. <strong>延迟的计算</strong></h4><p>补偿的延迟必须满足以下条件：</p><ul><li><strong>数据路径的延迟</strong>必须大于时钟路径和数据路径延迟差异加上<strong>捕获触发器的保持时间（Capture FF hold）</strong>。</li><li>这种延迟补偿需要适应不同的 <strong>PVT（Process, Voltage, Temperature）角度</strong>，即考虑到工艺、工作电压和温度的变化。</li></ul><p>换句话说，设置的数据路径延迟应该足够大，以确保数据能够正确捕获，避免因为时钟和数据路径的不同步导致的错误。</p><h4 id="4-RTL仿真中的特别情况"><a href="#4-RTL仿真中的特别情况" class="headerlink" title="4. RTL仿真中的特别情况"></a>4. <strong>RTL仿真中的特别情况</strong></h4><ul><li><p>在 RTL仿真</p><p> 中，由于仿真模型通常不考虑时钟和数据路径之间的实际延迟差异，因此不需要显式地为数据路径添加额外的延迟。</p><ul><li><strong>RTL仿真</strong>：这是指在设计阶段使用 <strong>寄存器传输级（RTL）模型</strong> 进行的仿真。在这种仿真中，设计的时钟和数据路径延迟差异通常是通过仿真工具的建模来忽略的，因此无需手动增加额外的延迟。</li></ul></li></ul><hr><h3 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h3><h3 id="1-AC-I-O-接收器默认关闭"><a href="#1-AC-I-O-接收器默认关闭" class="headerlink" title="1. AC I&#x2F;O 接收器默认关闭"></a>1. <strong>AC I&#x2F;O 接收器默认关闭</strong></h3><ul><li><strong>AC I&#x2F;O 接收器</strong>：在 AC（地址&#x2F;命令）通道中，接收器用于接收来自外部的地址和命令信号（例如，SDRAM 地址、命令信号）。这些接收器通常在系统初始化时处于关闭状态，以节省功耗。</li><li><strong>必须启用接收器</strong>：在进行 <strong>AC 环回测试</strong> 时，必须确保接收器已被启用，否则环回信号将无法被正确接收。因此，需要通过配置 <strong>ACIOCR0[*PDR] 寄存器</strong> 来启用 AC I&#x2F;O 接收器。<ul><li>**ACIOCR0[*PDR]**：这是一个配置寄存器，用于控制 <strong>AC I&#x2F;O 接收器的电源管理</strong>。通过设置该寄存器，可以启用这些接收器。</li></ul></li></ul><h3 id="2-DATX8-环回测试前的准备"><a href="#2-DATX8-环回测试前的准备" class="headerlink" title="2. DATX8 环回测试前的准备"></a>2. <strong>DATX8 环回测试前的准备</strong></h3><ul><li><p><strong>DATX8</strong>：指的是数据通道中的接收器和相关的时序控制信号（如 DQ、DQS 等）。在进行 <strong>DATX8 环回测试</strong> 时，必须确保与数据通道相关的所有 I&#x2F;O 接收器和终端电路已启用，且拉电阻（pull-down&#x2F;pull-up）已配置正确。</p></li><li><p><strong>启用 DATX8 接收器和终端</strong>：通过配置 <strong>DXnGCR3 寄存器</strong> 来启用接收器、终端（termination）和数据选通信号（DQS）的拉电阻。具体来说：</p><ul><li><strong>接收器（Receivers）</strong>：确保接收器能够接收环回信号。</li><li><strong>终端（Termination）</strong>：确保数据总线上的信号被适当终结，以避免信号反射。</li><li><strong>DQS 拉电阻（DQS Pulldown &#x2F; DQSN Pullup）</strong>：拉电阻用于控制 <strong>DQS</strong>（数据选通信号）和 <strong>DQSN</strong>（反向数据选通信号）的电平，以确保信号稳定，避免不期望的浮动电平。</li></ul><p>这些配置项都需要在 <strong>DATX8 环回测试</strong> 前进行编程。</p></li></ul><h3 id="3-环回测试的步骤总结"><a href="#3-环回测试的步骤总结" class="headerlink" title="3. 环回测试的步骤总结"></a>3. <strong>环回测试的步骤总结</strong></h3><ul><li>AC 环回测试前：<ul><li>启用 <strong>AC I&#x2F;O 接收器</strong>，通过配置 <strong>ACIOCR0[*PDR]</strong> 寄存器。</li></ul></li><li>DATX8 环回测试前：<ul><li>启用 <strong>DATX8 接收器、终端和拉电阻</strong>，通过配置 <strong>DXnGCR3</strong> 寄存器。</li></ul></li></ul><p>这些配置步骤保证了 <strong>环回测试</strong> 能够成功地进行，确保 <strong>地址、命令</strong> 和 <strong>数据</strong> 信号都能够正确地回到接收路径并被正确处理。</p><h3 id="4-寄存器功能概述"><a href="#4-寄存器功能概述" class="headerlink" title="4. 寄存器功能概述"></a>4. <strong>寄存器功能概述</strong></h3><ul><li><strong>ACIOCR0[*PDR] 寄存器</strong>：用于控制 <strong>AC I&#x2F;O 接收器的电源</strong>，确保其在进行 AC 环回测试时已经启用。</li><li><strong>DXnGCR3 寄存器</strong>：用于配置 <strong>DATX8 接收器、终端</strong> 和 <strong>拉电阻</strong>，这些设置是进行 DATX8 环回测试的必要步骤。</li></ul>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BIST Example Test Sequence</title>
      <link href="/2024/11/05/BIST%20Example%20Test%20Sequence/"/>
      <url>/2024/11/05/BIST%20Example%20Test%20Sequence/</url>
      
        <content type="html"><![CDATA[<blockquote><p>描述了如何执行 <strong>BIST（内建自检）</strong> 测试的具体步骤，包括 DDR PHY 的测试初始化、配置和错误检查<a><span id="more"></span></a></p></blockquote><h3 id="BIST-示例测试序列"><a href="#BIST-示例测试序列" class="headerlink" title="BIST 示例测试序列"></a>BIST 示例测试序列</h3><p>下面是每个步骤的详细说明：</p><hr><h4 id="1-配置复位后-PHY-初始化"><a href="#1-配置复位后-PHY-初始化" class="headerlink" title="1. 配置复位后 PHY 初始化"></a>1. <strong>配置复位后 PHY 初始化</strong></h4><ul><li><strong>操作</strong>：在配置复位解除后，系统需要等待 PHY 完成初始化。</li><li><strong>方法</strong>：通过轮询 <strong>PGSR0.IDONE</strong> 位，等到它的值变为‘1’，表示初始化完成。</li><li><strong>注意</strong>：在等待 PHY 初始化时，可以同时配置其他 PUB（PHY 微控制器）寄存器。</li><li><strong>原因</strong>：此步骤确保 PHY 在测试前已经准备好，类似于正常运行模式下的初始化过程。</li></ul><h4 id="2-选择-DRAM-模式或-BIST-循环回路模式"><a href="#2-选择-DRAM-模式或-BIST-循环回路模式" class="headerlink" title="2. 选择 DRAM 模式或 BIST 循环回路模式"></a>2. <strong>选择 DRAM 模式或 BIST 循环回路模式</strong></h4><ul><li><p><strong>DRAM 模式</strong>：</p><ul><li><strong>操作</strong>：向<code>PIR</code>（PHY 初始化寄存器）写入以下设置：<ul><li>设置 <strong>PIR.INIT</strong> &#x3D; 1，表示初始化 PHY。</li><li>设置 <strong>PIR.DRAMRST</strong> &#x3D; 1（仅 DDR3）以重置 DRAM。</li><li>设置 <strong>PIR.DRAMINIT</strong> &#x3D; 1 来初始化 DRAM。</li></ul></li></ul></li><li><p><strong>循环回路模式(Loopback)</strong></p><ul><li><strong>操作</strong>：如果不需要 DRAM 模式，只需设置 <strong>PIR.INIT</strong> &#x3D; 1 和 <strong>PIR.CTLDINIT</strong> &#x3D; 1，表示跳过 DRAM 初始化。</li></ul></li><li><p><strong>原因</strong>：这一步确保选择正确的测试模式（DRAM 模式或循环回路模式）。</p></li></ul><h4 id="3-等待-PHY-初始化完成"><a href="#3-等待-PHY-初始化完成" class="headerlink" title="3. 等待 PHY 初始化完成"></a>3. <strong>等待 PHY 初始化完成</strong></h4><ul><li><strong>操作</strong>：等待 PHY 完成初始化，或者通过轮询 <strong>PGSR0.IDONE</strong> 位来确认初始化是否完成。</li><li><strong>原因</strong>：确保 PHY 在开始 BIST 测试之前已经完全初始化。</li></ul><h4 id="4-配置读-DQS-90-度偏移和门控设置"><a href="#4-配置读-DQS-90-度偏移和门控设置" class="headerlink" title="4. 配置读 DQS 90 度偏移和门控设置"></a>4. <strong>配置读 DQS 90 度偏移和门控设置</strong></h4><ul><li><p><strong>操作</strong>：可选择性地配置在 BIST 运行期间如何控制读 DQS（数据使能信号）的 90 度偏移和门控设置，通过写入 <code>PGCR1.LBDQSS</code>和 <code>PGCR1.LBGDQS</code>。</p><ul><li><strong>推荐</strong>：保持默认值，这样可以确保 DQS 信号正确对齐，并且在 BIST 循环回路测试期间 DQS 门控始终开启。</li></ul></li><li><p><strong>选择回路模式</strong>：在配置PGCR1寄存器时，还需要通过写入 <code>PGCR1.IOLB</code>选择使用 pad-side还是 core-side回路。</p><ul><li><strong>推荐</strong>：使用 <strong>core-side</strong> 回路模式。</li></ul></li><li><p><strong>原因</strong>：确保数据在 BIST 期间正确对齐，避免数据捕获时的对齐问题。</p></li></ul><h4 id="5-设置-BIST-生成的测试模式数量"><a href="#5-设置-BIST-生成的测试模式数量" class="headerlink" title="5. 设置 BIST 生成的测试模式数量"></a>5. <strong>设置 BIST 生成的测试模式数量</strong></h4><ul><li><p><strong>操作</strong>：通过向 BISTWCR.BWNCT写入，设置要生成的模式数量。</p><ul><li><strong>默认值</strong>：默认值 32 个模式通常足以覆盖大部分测试。</li></ul></li><li><p><strong>原因</strong>：这一步是可选的，但可以根据需要配置测试模式的数量。</p></li></ul><h4 id="6-确保地址-命令和I-O-接收器被供电"><a href="#6-确保地址-命令和I-O-接收器被供电" class="headerlink" title="6. 确保地址&#x2F;命令和I&#x2F;O 接收器被供电"></a>6. <strong>确保地址&#x2F;命令和I&#x2F;O 接收器被供电</strong></h4><ul><li><strong>操作</strong>：如果计划使用 <strong>pad-side</strong> 回路，需要确保地址&#x2F;命令 I&#x2F;O 接收器已供电，可以通过向 <strong>ACIOCR0</strong> 写入 <strong>0x20000000</strong> 来确保这一点。</li><li><strong>原因</strong>：地址和命令信号默认是关闭的，这一步确保它们在测试前被供电。</li></ul><h4 id="7-重置-PHY-FIFO"><a href="#7-重置-PHY-FIFO" class="headerlink" title="7. 重置 PHY FIFO"></a>7. <strong>重置 PHY FIFO</strong></h4><ul><li><p>操作：通过写入 <code>PGCR0.PHYFRST = 0</code> 来重置 PHY FIFO。</p><ul><li><strong>等待</strong>：等待至少 8 个 <strong>cfg_clk 周期</strong>，以确保 FIFO 完全重置。</li><li><strong>清除复位</strong>：通过写入 <strong><code>PGCR0.PHYFRST</code></strong> &#x3D; 1 清除复位状态，准备好进行测试。</li></ul></li><li><p><strong>原因</strong>：确保 FIFO 中没有残留的坏数据或错误状态，避免影响 BIST 测试。</p></li></ul><h4 id="8-触发-BIST-运行"><a href="#8-触发-BIST-运行" class="headerlink" title="8. 触发 BIST 运行"></a>8. <strong>触发 BIST 运行</strong></h4><ul><li><p>操作：通过写入 3’b001到 BISTRR.BINST启动 BIST 测试。</p><ul><li><p>其他配置</p><p>：在触发 BIST 时，还需要配置 </p><p>BISTRR</p><p> 寄存器中的其他字段，如：</p><ul><li>选择 <strong>循环回路模式</strong> 或 <strong>DRAM 模式</strong>。</li><li>启用 <strong>地址&#x2F;命令通道</strong> 或 <strong>字节通道</strong>。</li><li>启用 <strong>数据掩码</strong>。</li><li>选择用于测试的具体 <strong>字节通道</strong>。</li></ul></li></ul></li><li><p><strong>原因</strong>：这一步启动了 BIST 测试，并且确保其他配置正确设置。</p></li></ul><h4 id="9-等待-BIST-完成"><a href="#9-等待-BIST-完成" class="headerlink" title="9. 等待 BIST 完成"></a>9. <strong>等待 BIST 完成</strong></h4><ul><li><strong>操作</strong>：通过轮询 <strong>BISTSR.BDONE</strong> 位，等待 BIST 测试完成，状态为 ‘1’。</li><li><strong>原因</strong>：这一步确认 BIST 测试已成功完成。</li></ul><h4 id="10-检查是否有错误"><a href="#10-检查是否有错误" class="headerlink" title="10. 检查是否有错误"></a>10. <strong>检查是否有错误</strong></h4><ul><li><p>操作：通过读取 BISTWER.ACWER地址&#x2F;命令通道错误）或 BISTWER.DXWER字节通道错误）来检查是否有错误。</p><ul><li>如果没有错误，测试完成。</li></ul></li><li><p>如果发现错误，进一步读取 <strong>BIST 错误寄存器</strong>，查看具体哪些信号发生了错误。</p><ul><li>可选地，使用 <strong>BIST 调试模式寄存器</strong> 来帮助定位故障。</li></ul></li><li><p><strong>原因</strong>：确保在 BIST 测试中发现并处理任何错误。</p></li></ul><hr><h3 id="关键操作总结："><a href="#关键操作总结：" class="headerlink" title="关键操作总结："></a>关键操作总结：</h3><ol><li><strong>初始化 PHY</strong> 并配置相关寄存器。</li><li><strong>选择测试模式</strong>（循环回路模式或 DRAM 模式）。</li><li><strong>触发 BIST 测试</strong>，等待完成并检查错误。</li><li>使用 <strong>BIST 调试寄存器</strong> 定位并调试可能的错误。</li></ol><p>这些步骤确保 DDR PHY 的 BIST 测试能够正确运行，并在发现问题时提供调试信息。这为测试人员提供了一种灵活的方式来验证 DDR PHY 的功能，确保其在生产中的可靠性。</p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim操作</title>
      <link href="/2024/11/05/vim%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/11/05/vim%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>VIM的快捷操作<a><span id="more"></span></a></p></blockquote><h3 id="设置文件格式为-Unix"><a href="#设置文件格式为-Unix" class="headerlink" title="设置文件格式为 Unix"></a>设置文件格式为 Unix</h3><blockquote><p>在 vim 中，你可以通过设置文件格式来确保文件使用 Unix 风格的换行符（即仅使用 \n）。<br>输入以下命令：</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">set</span> ff=unix</span><br><span class="line">:<span class="keyword">wq</span></span><br></pre></td></tr></table></figure><h3 id="手动调整整个文件的缩进"><a href="#手动调整整个文件的缩进" class="headerlink" title="手动调整整个文件的缩进"></a>手动调整整个文件的缩进</h3><blockquote><p>如果你想一次性调整整个文件的缩进，可以使用 <code>gg=G</code> 命令。这两个命令的作用是：</p></blockquote><ul><li><code>gg</code>：跳转到文件的开始。</li><li><code>=G</code>：对整个文件进行自动缩进。</li></ul><p>使用 <code>gg=G</code> 后，<code>vim</code> 会根据当前的缩进设置（如 <code>shiftwidth</code> 和 <code>tabstop</code>）对整个文件进行重新缩进。</p>]]></content>
      
      
      <categories>
          
          <category> VIM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-swap_4bit_block</title>
      <link href="/2024/11/05/C%E8%AF%AD%E8%A8%80-swap-4bit-block/"/>
      <url>/2024/11/05/C%E8%AF%AD%E8%A8%80-swap-4bit-block/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4e95431e3451c4a47cac61eb048a3eb073f146c1118d7959f460f340d3f79e2e">bc784a9a828376686ad79bc9be5654d361b361fd88beba2111ec0856b1960915f938a61ca008a7d77c2c4dafcc20a13dec000d6e8dfb085dada8da63426de172c8d43ffc55b872d29be296e19b6912bfbf4bc145b62b5e3902781fa369346d2ac0cd153de12acc03908056048b3e24496c6b7155767cfdbe4527f7541f8ee1586638e2538b22c9ebaf2d613266d2f2aedeb0af7663d048464ab0d4cb687655b353490564c428e44e8dee2a2868acc53f0238f2bce6617ad6681d84951ae70e66239abaf093c7defa8a75ae902103d20561085469a55a56229164165b91d07464b9a843b083a4d10427e910f1d4eb2c6f07b03572dace8343912a7fb9d92cc1f7f7b9adb2dc594f01abd348e38f87b3c9d6c39d12090eb92af7d4cf66f739e48bb1c43f8bd9788696ea855afa6acae17baf6fd87c6ba237bcf971724e725efba24673f1941111d496cf16fa1ea10c248791adfefeabca682d7413f14457c6e5a97814265248e28fb785cc210c47ffd1b8b6356cc052ece5dd4281f8cc165742e303a353a7e51510db2d921196d907d75e9676b230a3b91a98f4f01b9910b72a90de7bd7be65fda8a636f568025c115393f7caf937a4f3dad00608fa5941d51d13c428c0eab6877da9e5ee96d3503650e30c2a541060e789e0567ddd8132a1afed0f6aaac0aad8bc22175521f656bf460384a10a41ead5de0c84c0052cded6f3770fc4c63ee1469b66ee53b6488920d311645b410aea432c07d03a22270a48506c099d0c1cefb7deda259cda6c8c7d9e7d43df4fa067ec3a32362ef89ac913d396408508a8ee32bba7400a52aef511d357fffc9b9da056e44c92ea7a47e6448cb96b770c3e04ef062d68978a06510f41cc3c482228faa1f1789b828db47a2acc184e947312aeae0de8ddeaf290f2bb0d5cf4cef29bb3c2ed1703c1940c4f3bfee4c726849fdb9d9d3e0522893daccdd622b28a31d1688d60a083a292b724ba687cf2549fc1058d1256e3bb54a278dfb048a7e7762936b20d84aebc3c814ddaf395c682523217afe8735fe85200e92de95a9ff6fcae418747ae7b7950bb5f4abeaa579e811a25af5efd21c0f072aa85b9112972a7568558d51df06eadb3b5bf3311c6f9bb2bc0e63e71eab55e0e8f6afd94f5d13209aaef0a26fac741d3979b836e67dd27da8afba37c082ae2da12fe2d15ccc0e4aaa1504a4a7fee4d22b5de7ae6e1d92ed22d016ace30dd7473d99245c98d61c220dd34a0a980308949b55ea7fbd01987869a70c756c1bfb502c4440e48d74af1da4f1792d3f580c7013a6ed769e584c57e5b29217825b8b627a540301ec10a35b50dd8efb094bcda477c1b6f87c658b6c7b84fd461aba87a80aa3e3a0e2c0d870797f162a19cb32435b6366a52a018004fa2281bdb184551c88d2408b8a37d09c3a648fefb58bf525ce29841a312b44a1e356b31804852f6011bbb9ca5e38d87541e6bbd01c845af346d4e07422f6ab83dc63d0ce23af7ac983a121f3a851639b0300808ad5671f2afb96c2f723e262d9f580fdb080251adc0758246b3e94c9b575bda3b6835ddcf2ba8be22a2443a62d3af16f724e987c7fae4d2cab8fab0726e0ee4f233d3c9655a84b7e7ca9ef05b2b8c1a1182013b9f082314cd22c878bc9c0e551f30e08ebe028e3b40fa9cd3ba0ba8ddd7f6a6665ca03cf8d00e19e8b87cf7e431583d16b42a2921930f5f298a964951756262ee21fc714b77c364fd0b1c347d9b3c708e7a3486124d2e2ac014ee010590936df494bad3c2a470bb79dd81a672ffd5a78c6fb7666a8eb1499575b3114887f95eb843098504db7ec0122800c498b1b82ef26f762cdad14ce809f34abe0b4d40552d9e01bae64a9a513e0a2c79cf40e7547ed496429fd693c00b6b1c339eb78b3e20b027feb1b83b1ba1299eaaecc70ff481642cae2aa3039e7bdbd6b179ad9ec8d42f81ccf23a05bb9101f95bd37d5eeb3e2edb2042bdd9731b0ff6c4dbb66ac639e66ebf3e398e23e1ab558045a99fa7377df298d12386cd9363b8d91d0b5e1139240c72bc5646e6bc253e608576559224aa38945e1439f4ed74313b48c6c782d5e8d2d56d9663f581eac1905c9561b49b6ac95495e3b364cc26ab4a787ee8578b12a2416d7fa7fd6edbeab2e696e0bb9ea4fc8b65d577bbd3214e417b54a246ab6cd9fda3532f04382e47d058fd1268174802a6fd8a27dd6bf0dc5a76988421e2475ff7ba03aacd61eef89f8bcf5db1730333bcd36cdadd293fc731acb3e3bbf8580721bdb90e468309bf3c3e28df1ff3b09b9916fd24f84710b15eacf3d9ad71a4540e921e21b7af13175973785a4c3840f68f65a3e9c22a5bfa3ffaf3aec285487e981fb54cfd978f46bf091e0bee32ff5c92e9193b55b94080496e27da76848ff1893b305419aa29b61e83a2b2788393714b6973fc6ea61ca031eb1298ba583afee45346278c11c06f042001d8eb5a93639cec89a72919137ff7ef288a0b2985bbdb752d9bfcd53492c45f9cbaeaac863c0e717ba35ee5353c5e2e401e407f63ca5ee37890bc92b478c2082ee57d522c3d360716b74a97a9ea651ac6603b9096b5dec21f32249473b704dff17dd63e634ca320efd37c95a4f421668a97ec29736c38d13b09b4127d5354a964deb78d55285be0cac975022f9c9ee98954f5b1a92a56cea0794e4879a7e6e5132bf83c6b820b4d1437bde3f5ff782ff7d4f72d15ca3c42348de0836ec59c49e1d358e4dcd146803758d6cc7c11bd7574bddb965c7edfa756ac3f831c4726d433ee42c45b01fb45f9d50ff1cb7061b4c69b8b4b2e2921995c557662e37d3000658eb7236cf830cb66e2d690b0e4e617901081fa8b3fabddd0e11c2842e1ce09aeee52c91004aeaa31f6c6a4ca8e051356f545b565d3f471131111dabeaaa599ae9b91ffdaf3897f804d95ad6cc25acb9c5fc936241d2957ec73847911c0f04aa9ba3769923c18050874989ddbdbed51d77a37c3227f727059f1360b6f2cbd44bf669456fc2bdb6c54c1013ed8f1ea61bdfb80aa6aaa1bb49af733b63adff85493e3aa730961c2cab18820b709a0f84ce981c2555cd48dfc0a980ae9212b2ee7c4e3f56de51cdb76336fc145ada79bc248862f349094aad5e4730640d3f45eb8478f6b3c1aaee4a8e30c916f7b7afa3503f8a1d3fcb27274d82984ee65085c6f027f35dc10cf883b6fc946a68e950c5c4f28e3124ceb3e07dfd13d1d70d97922d0ef72a45e272f46fb4f511b5ebca9a51b4e64ff55a7997fc6a50ae019c97441b39ec352159700831a68daf7a3c691da22e646178ed8944dc92f6e791e0812aa8e150a5a3b001faa360822c0e4376cd16a9c14a88d184a3ef11ba6db3e7ef55311ba87557e392f58a065474c9ce05c559c2f4e33c4ee815f714787a4d6a4c789ba5fbd218d7d6fd9bc1a9e923a7b02ced7430e2f6bde1b72e150de19ded699993dc4bf52dd5c9179f56160a5f3f515843ebade91f544c632c806c6c9138a7595d7f1e4de84174e4dc97d02d529aa5780ac2c2ee6a9a2cf7f325558ebcd9e1d8f410a39fcd3b4fe76085d6f997e8fd801cfd8c16069c00c0d5620756edc74e416f783e68ed15538c19877865cc363e2702b8e8b70a5f15c77e6f1326a3d97f5dbbef5978d51831d62a7768b9cc6a43eb8b5fc9ce1903917eae333446aabce25568335cb6884fb412784ae5d9c11b4b626590182b253f8636993f2c4d223d672d09ee06aa72929c356207ed6492cba39ea03f2d4d90bcb65d56b539a5872ddc7b49baf2f226017d2c63ddeb89e87c7d4bc408ba66b551d3ba270093850f674c770582051a8482588b1e5d7fb0e7533666f44a9bd6d593abd97792c68bd4bf5ed21bf6648e2c7dcbe165327b897bc8088ce8e0e20160f1a1649fad2bd3a53f37687346f8574646b18a857a98c7223b81d1569dc6b52fb1e3ae68b669934ee2cd4257b0aee8dcfe5a627a5069a0993c177f8353fff104af578cc125cf7d4f75b42d6c45db45294c9417ae544310f7c52af2d1a02d02bc9d5c19ec5557acdfa2c8b3bf120ef3783cd63feacda3d7d554ac590d9955fc019c3644046880a3169306456805fe8116943065566bd32afa1eaa8e5858175695824a3c03ae038cf778a796812942a2f0533441588cb529979f784254628a5d23e0666bdcb209893507c67166c02307642eaabe7d3bdf2cff0d277be431a077b547fb5ffc5fce17bbcc02e407518637ffa171a0e0280101ee8ac838fbbf6ea04d6ce5ac35dd6ab4048c5ed0849f002134f3d936c29df8a84ac604aa8cdd0bcaa7fe71db2fc4e6490eb959de5d45880ec5b20355b86c7a909827d6d76a287fe71c9fb4e82793b131fec16289382f006d6544cbf31d10ee2579ddb7c0d308310e9478e8d2c48a25197ce17dd664a667dd7dee8a6c067c383f86b6a86f4fdf6aa35d8f069f2cb6b53ff8af8dbf002b27f28221743de53f22de894c6c272c24eb6c515da40c53e528811c5072401a23ebd55b994f3d65e584d45bde538cd87b98ef7b1e67f6540e493643556087ac53626247d4f6aa97d0797fa2429e4a7481bee0c629cb6af47bee5ff629418f0a822b250cc1c3d8ffc79acdd00e53d195c0a8b57ca24bb08415409377abdc9ad45e32ee496c758a9602b94b89574095e2b0a5708f271b1e6960c5444ce06830e45dabdedc705a2394ac475c0861e55e5bc96422258872f3b03c31ade4d43f1bff90e6d0de0ca3cc1a494dc6a4100bb340cfca4563d4f4f02e0bc9203a19c34725563e9e83300f984a17f1affff130b430af12252b67ff3bc8dc040439825539ce0e2efb41a38fdc94b6e3dcf109fccb4207232097a3c7b1b570fe6e63f244e4f83a1d21a97e3c56b91e5ead37d75308b27dd7ce57b492d009733f858d9729b350629730d961c883d977e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">不是哥们，你谁啊？</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于C-Model的验证方法</title>
      <link href="/2024/11/03/%E5%9F%BA%E4%BA%8EC-Model%E7%9A%84%E9%AA%8C%E8%AF%81%E6%96%B9%E6%B3%95/"/>
      <url>/2024/11/03/%E5%9F%BA%E4%BA%8EC-Model%E7%9A%84%E9%AA%8C%E8%AF%81%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="84c95a067a469732ba427cde4507dac4933a2cddd5ff38054478d8419b0eb057"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">不是哥们，你谁啊？</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> IC </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> C </tag>
            
            <tag> DV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本-delete_output</title>
      <link href="/2024/11/03/shell%E8%84%9A%E6%9C%AC-delete-output/"/>
      <url>/2024/11/03/shell%E8%84%9A%E6%9C%AC-delete-output/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This script traverses the current directory and its subdirectories.<a><span id="more"></span></a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Author: ZLin</span></span><br><span class="line"><span class="comment"># Date: 2024-11-03</span></span><br><span class="line"><span class="comment"># Description: This script traverses the current directory and its subdirectories,</span></span><br><span class="line"><span class="comment">#              searching for directories that end with &#x27;test&#x27;. If found, it deletes</span></span><br><span class="line"><span class="comment">#              the &#x27;output&#x27; directory within those &#x27;test&#x27; directories, if it exists</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Function to traverse directories</span></span><br><span class="line"><span class="function"><span class="title">traverse</span></span>() &#123;</span><br><span class="line">  <span class="comment"># Loop through all items in the current directory</span></span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span>/*; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># Check if the item is a directory</span></span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$item</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="comment"># Check if the directory name ends with &#x27;test&#x27;</span></span><br><span class="line">      <span class="keyword">if</span> [[ <span class="string">&quot;<span class="subst">$(basename <span class="string">&quot;<span class="variable">$item</span>&quot;</span>)</span>&quot;</span> == *<span class="built_in">test</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Entering directory: <span class="variable">$item</span>&quot;</span></span><br><span class="line">        <span class="comment"># Check if &#x27;output&#x27; directory exists, then delete it</span></span><br><span class="line">        <span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$item</span>/output&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">          <span class="built_in">echo</span> <span class="string">&quot;Deleting output directory in: <span class="variable">$item</span>&quot;</span></span><br><span class="line">          <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$item</span>/output&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      <span class="comment"># Recursively traverse subdirectories</span></span><br><span class="line">      traverse <span class="string">&quot;<span class="variable">$item</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start traversing from the current directory</span></span><br><span class="line">traverse <span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>editorconfig</title>
      <link href="/2024/11/03/editorconfig/"/>
      <url>/2024/11/03/editorconfig/</url>
      
        <content type="html"><![CDATA[<blockquote><p>EditorConfig file for github <a><span id="more"></span></a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">top-most EditorConfig file</span></span><br><span class="line">root = true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">all files</span></span><br><span class="line">[*]</span><br><span class="line">indent_style = tab</span><br><span class="line">indent_size = 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本-check_process</title>
      <link href="/2024/11/03/Shell%E8%84%9A%E6%9C%AC-check_process/"/>
      <url>/2024/11/03/Shell%E8%84%9A%E6%9C%AC-check_process/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9cf873942620fa4ebb1cdb4f2a08fab0b2047b05cd5c32502e3ba72f37ce0dd3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">不是哥们，你谁啊？</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python脚本-replace_script</title>
      <link href="/2024/11/02/Python%E8%84%9A%E6%9C%AC-replace_script/"/>
      <url>/2024/11/02/Python%E8%84%9A%E6%9C%AC-replace_script/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e3f3debe155ab7fe8eb7ee619d05d9074c71a8ac7ce9e4eeeac1918cc93abbe5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">不是哥们，你谁啊？</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eye Diagram</title>
      <link href="/2024/10/30/Eye%20Diagram/"/>
      <url>/2024/10/30/Eye%20Diagram/</url>
      
        <content type="html"><![CDATA[<blockquote><p>眼图（Eye Diagram）是用于分析数字信号完整性的一种图形工具。 <a><span id="more"></span></a></p></blockquote><h3 id="眼图的主要特点包括："><a href="#眼图的主要特点包括：" class="headerlink" title="眼图的主要特点包括："></a><a>眼图的主要特点包括：</a></h3><ol><li><strong>重叠显示</strong>：通过在同一图形中叠加多个信号周期，能够直观地看到信号在不同时间点的状态。这种重叠可以揭示信号的噪声、抖动和失真等问题。</li><li><strong>眼高和眼宽</strong>：眼图的“眼睛”部分的高度（眼高）代表信号的噪声裕度，越高意味着抗干扰能力越强。眼宽则与信号的时钟同步和抖动有关，越宽通常意味着更好的定时裕度。</li><li><strong>使用场景</strong>：眼图常用于评估传输线的设计、信号的放大和调节，以及整个系统的性能。设计工程师可以根据眼图调整电路，改善信号完整性。</li></ol><h3 id="DDR读写眼图的特点："><a href="#DDR读写眼图的特点：" class="headerlink" title="DDR读写眼图的特点："></a><a>DDR读写眼图的特点：</a></h3><h4 id="1-读眼图："><a href="#1-读眼图：" class="headerlink" title="1. 读眼图："></a>1. <strong>读眼图</strong>：</h4><ul><li><strong>读操作时的信号</strong>：在进行读操作时，数据总线上的信号状态会根据时钟的上升沿和下降沿变化。</li><li><strong>眼图的形成</strong>：多个读操作周期的数据波形叠加形成眼图。通过观察眼图，可以评估信号的眼高和眼宽，判断是否存在噪声、抖动和时序问题。</li><li><strong>重要参数</strong>：眼高反映了信号的噪声裕度，眼宽则表示定时裕度，二者都对系统的稳定性至关重要。</li></ul><h4 id="2-写眼图："><a href="#2-写眼图：" class="headerlink" title="2. 写眼图："></a>2. <strong>写眼图</strong>：</h4><ul><li><strong>写操作时的信号</strong>：在写操作中，数据总线也会随时钟的变化而改变。</li><li><strong>眼图的形成</strong>：类似于读眼图，通过叠加多个写操作周期的数据波形生成眼图。</li><li><strong>写操作的关注点</strong>：写眼图通常需要关注信号的上升和下降时间，以确保数据能够在正确的时钟边缘被接收。</li></ul><h3 id="眼图分析的意义："><a href="#眼图分析的意义：" class="headerlink" title="眼图分析的意义："></a><a>眼图分析的意义：</a></h3><ul><li><strong>信号完整性评估</strong>：通过分析眼图，设计工程师可以发现潜在的信号完整性问题，比如时序偏移、过多的抖动和噪声。</li><li><strong>优化设计</strong>：根据眼图的结果，工程师可以调整传输线的设计、增加终端匹配、改善信号的驱动能力等，以优化DDR接口的性能。</li></ul><p>总之，DDR读写眼图是验证和优化DDR信号传输性能的重要工具，有助于确保数据的准确传输和系统的稳定运行。</p><blockquote><p><strong>眼高和眼宽是眼图中两个重要的参数，用于评估信号的完整性。</strong></p></blockquote><h3 id="眼高-Eye-Height"><a href="#眼高-Eye-Height" class="headerlink" title="眼高 (Eye Height)"></a><a>眼高 (Eye Height)</a></h3><ul><li><strong>定义</strong>：眼高是眼图中“眼睛”打开部分的高度。它表示信号的电压范围，反映了信号的抗噪声能力。</li><li><strong>重要性</strong>：眼高越大，说明信号在逻辑高和逻辑低状态之间的差异越明显，这样可以更好地抵抗噪声的干扰。如果眼高较小，信号可能更容易受到噪声的影响，导致错误读取。</li></ul><h3 id="眼宽-Eye-Width"><a href="#眼宽-Eye-Width" class="headerlink" title="眼宽 (Eye Width)"></a><a>眼宽 (Eye Width)</a></h3><ul><li><strong>定义</strong>：眼宽是眼图中“眼睛”打开部分的宽度。它表示信号在有效传输期间的时间窗口，反映了信号的时序裕度。</li><li><strong>重要性</strong>：眼宽越大，表示信号在时钟周期内保持稳定的时间越长，这样可以确保数据在多个时钟边缘被正确采样。如果眼宽较小，意味着信号在有效传输时间内的变化范围有限，容易导致数据的时序错误。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a>总结</a></h3><ul><li><p><strong>眼高</strong>：反映信号的抗干扰能力，眼高越大，抗噪声能力越强。</p><ul><li><strong>电压差异</strong>：眼高反映了逻辑高电平（通常对应于信号的高电压状态）和逻辑低电平（通常对应于信号的低电压状态）之间的电压差。当眼高较大时，逻辑高和逻辑低的电压差明显，使得接收器更容易区分这两种状态。</li><li><strong>噪声裕度</strong>：在信号传输过程中，电磁干扰、热噪声和其他因素可能会对信号造成影响。较大的眼高意味着在噪声干扰下，逻辑高和逻辑低的电压仍有足够的差距，可以减少错误判断的风险。也就是说，接收器能够在一定范围内的噪声干扰下，仍然正确识别信号的状态。</li><li><strong>容错能力</strong>：较大的眼高使得系统在面对信号波动时具备更好的容错能力。如果信号电平因噪声而发生轻微变化，但仍在逻辑高和逻辑低之间的电压差距内，接收器能够准确判断信号状态，而不会误判为错误的逻辑状态。</li></ul></li><li><p><strong>眼宽</strong>：反映信号的定时裕度，眼宽越大，数据传输的可靠性越高。</p></li></ul><blockquote><p><strong>通过观察眼高和眼宽，工程师可以评估和优化高速信号传输的设计，确保系统的稳定性和可靠性。</strong></p></blockquote><h3 id="示例：DDR3接口信号"><a href="#示例：DDR3接口信号" class="headerlink" title="示例：DDR3接口信号"></a><a>示例：DDR3接口信号</a></h3><blockquote><p>假设在一个DDR3接口中，逻辑高电平的电压（Vih）为 1.5V，逻辑低电平的电压（Vil）为 0V。这意味着：</p></blockquote><ul><li><strong>逻辑高电平（Vih）</strong>: 1.5V</li><li><strong>逻辑低电平（Vil）</strong>: 0V</li><li><strong>眼高</strong>: 1.5V - 0V &#x3D; 1.5V</li></ul><h3 id="情况分析"><a href="#情况分析" class="headerlink" title="情况分析"></a>情况分析</h3><h4 id="1-大眼高："><a href="#1-大眼高：" class="headerlink" title="1. 大眼高："></a>1. <strong>大眼高</strong>：</h4><ul><li>如果眼高为1.5V，信号的逻辑高和逻辑低电平有足够的电压差异。在这种情况下，即使信号受到噪声的干扰（例如，0.1V的干扰），逻辑高电平的实际电压可能在1.4V到1.6V之间（1.5V ± 0.1V），而逻辑低电平仍然保持在0V。由于逻辑高和逻辑低之间的电压差异仍然很大，接收器能够轻松区分这两种状态，从而保持信号的准确性。</li></ul><h4 id="2-小眼高："><a href="#2-小眼高：" class="headerlink" title="2. 小眼高："></a>2. <strong>小眼高</strong>：</h4><ul><li>如果眼高较小，比如只有0.3V（逻辑高为0.15V，逻辑低为-0.15V），噪声干扰可能会将逻辑高电平的电压降低到0.1V（0.15V - 0.1V），而逻辑低电平的电压可能保持在-0.15V。这时，接收器在识别信号时可能会出现混淆，因为0.1V可能被误判为逻辑低电平，从而导致错误的信号解码。</li></ul>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Write Bit De-skew Algorithm</title>
      <link href="/2024/10/30/Write-Bit-De-skew-Algorithm/"/>
      <url>/2024/10/30/Write-Bit-De-skew-Algorithm/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写入比特去偏移（Write Bit De-skew）算法的工作原理和步骤。<a><span id="more"></span></a></p></blockquote><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a><a>目标</a></h3><ul><li>确保在写入路径中的每个数据位都能够正确对齐，特别是在0到1的转换时，确保数据传输的可靠性和准确性。</li></ul><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a><a>算法步骤</a></h3><h4 id="1-初始写入操作"><a href="#1-初始写入操作" class="headerlink" title="1. 初始写入操作"></a>1. <strong>初始写入操作</strong></h4><ul><li>算法首先执行一系列写入操作，以确保数据正确写入指定的地址，包括DTAR0（x0000）、DTAR1（x0008）和DTAR2（x0010）。这些地址是用于后续的数据对齐和错误检测的基础。</li></ul><h4 id="2-执行顺序"><a href="#2-执行顺序" class="headerlink" title="2. 执行顺序"></a>2. <strong>执行顺序</strong></h4><ul><li>写入比特去偏移必须在写入均衡（write leveling）和写入均衡调整（write leveling adjustment，若适用）之后进行。通常建议在执行读取比特去偏移（read bit deskew）或读取比特去偏移和读取眼中心化（read eye centering）之后执行写入比特去偏移。这并不是强制要求，尤其是在已知读取操作正常的情况下。</li></ul><h4 id="3-检测数据眼的左边缘"><a href="#3-检测数据眼的左边缘" class="headerlink" title="3. 检测数据眼的左边缘"></a>3. <strong>检测数据眼的左边缘</strong></h4><ul><li>算法首先尝试检测数据眼（data eye）的左边缘，即至少有一个写入数据位发生故障的位置。数据眼是描述数据传输中有效信号的时序窗口。DQS和DQS#信号在这一位置的最新的0到1的转换会被检测到。</li></ul><h4 id="4-逐位右移检测"><a href="#4-逐位右移检测" class="headerlink" title="4. 逐位右移检测"></a>4. <strong>逐位右移检测</strong></h4><ul><li>每个数据位将被逐个右移，直到检测到相应位的读取故障。比较失败的次数由寄存器“DTCR.DTRPT”定义。当达到这一失败次数时，表明该数据位的时序可能需要调整。</li></ul><h4 id="5-数据掩码对齐"><a href="#5-数据掩码对齐" class="headerlink" title="5. 数据掩码对齐"></a>5. <strong>数据掩码对齐</strong></h4><ul><li>在完成每个写入数据位的去偏移之后，算法可以选择定位数据掩码（data mask）相对于数据位的位置，并随后进行掩码的去偏移。这有助于确保掩码信号与数据信号的同步。</li></ul><h4 id="6-定位数据眼的右边缘"><a href="#6-定位数据眼的右边缘" class="headerlink" title="6. 定位数据眼的右边缘"></a>6. <strong>定位数据眼的右边缘</strong></h4><ul><li>在去偏移掩码之后，算法还可以选择进一步定位数据眼的右边缘。当右边缘被检测到后，算法会计算数据眼的中心位置，并将DQS&#x2F;DQS#信号定位在数据眼的中心。这是为了确保数据的稳定性和正确性，使得信号在其最佳时机内被读取。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a>总结</a></h3><blockquote><p>总的来说，这段文字描述了写入比特去偏移算法的目的和步骤，通过精确的时序调整和检测，确保数据在DDR内存中的写入操作是可靠的。通过对数据位和掩码的同步管理，算法能够优化数据传输的完整性，减少错误发生的可能性。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Read Bit De-skew Algorithm 2</title>
      <link href="/2024/10/30/Read-Bit-De-skew-Algorithm-2/"/>
      <url>/2024/10/30/Read-Bit-De-skew-Algorithm-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>描述了PUB（物理控制单元）中的读取比特去偏移（de-skew）算法的目标和过程<a><span id="more"></span></a></p></blockquote><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a><a>目标</a></h3><ul><li>确保在读取路径中，数据比特的0到1的转换是对齐的。这是为了优化数据的传输可靠性，确保数据能够被准确读取。</li></ul><h3 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a><a>算法过程</a></h3><h4 id="1-写入数据："><a href="#1-写入数据：" class="headerlink" title="1. 写入数据："></a>1. <strong>写入数据</strong>：</h4><ul><li>算法开始时，会向指定地址（DTAR0: x0000、DTAR1: x0008、DTAR2: x0010）发出一系列写入命令，确保数据正确写入。这一步骤是算法的基础。</li></ul><h4 id="2-可选的写入延长："><a href="#2-可选的写入延长：" class="headerlink" title="2. 可选的写入延长："></a>2. <strong>可选的写入延长</strong>：</h4><ul><li>在写入序列之前，可以选择执行写入定级（Write Leveling Adjustment）。为此，DQS（数据选通信号）可以通过寄存器DTCR.DTEXD延长一个额外的周期。</li></ul><h4 id="3-读取数据："><a href="#3-读取数据：" class="headerlink" title="3. 读取数据："></a>3. <strong>读取数据</strong>：</h4><ul><li>数据写入后，算法进入读取阶段，开始进行读取比特去偏移操作。</li></ul><h4 id="4-检测数据眼的左边缘："><a href="#4-检测数据眼的左边缘：" class="headerlink" title="4. 检测数据眼的左边缘："></a>4. <strong>检测数据眼的左边缘</strong>：</h4><ul><li>读取比特去偏移算法的关键步骤是检测数据眼（data eye）的左边缘，即在这个位置上，至少有一个读取数据比特的故障被检测到。这可以理解为找到数据信号从0到1变化的第一个位置。</li></ul><h4 id="5-右移比特："><a href="#5-右移比特：" class="headerlink" title="5. 右移比特："></a>5. <strong>右移比特</strong>：</h4><ul><li>一旦检测到左边缘，算法将对每个比特进行右移，直到检测到相应比特的读取故障，并且比较失败的次数达到寄存器DTCR.DTRPT中定义的次数n。</li></ul><h4 id="6-扫掠读取数据眼："><a href="#6-扫掠读取数据眼：" class="headerlink" title="6. 扫掠读取数据眼："></a>6. <strong>扫掠读取数据眼</strong>：</h4><ul><li>完成所有比特的去偏移后，算法将扫掠读取数据眼，以定位右边缘。</li></ul><h4 id="7-计算眼中心："><a href="#7-计算眼中心：" class="headerlink" title="7. 计算眼中心："></a>7. <strong>计算眼中心</strong>：</h4><ul><li>一旦检测到右边缘，算法将计算数据眼的中心，并将读取的DQS信号置于该中心位置。这样可以确保在读取数据时，DQS信号与数据的中心对齐，从而提高读取的成功率和准确性。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>整个算法的目标是通过精确定位和调整数据眼的边缘，确保读取过程中的数据比特在时间上是对齐的，从而减少读取错误。这在高速数据传输（如DDR内存）中尤为重要，因为任何微小的偏差都可能导致数据损坏。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Read Bit De-skew Algorithm</title>
      <link href="/2024/10/30/Read-Bit-De-skew-Algorithm/"/>
      <url>/2024/10/30/Read-Bit-De-skew-Algorithm/</url>
      
        <content type="html"><![CDATA[<blockquote><p>描述了读取比特去偏移（read bit de-skew）算法的过程<a><span id="more"></span></a></p></blockquote><h3 id="1-读取比特去偏移算法概述"><a href="#1-读取比特去偏移算法概述" class="headerlink" title="1. 读取比特去偏移算法概述"></a><a>1. 读取比特去偏移算法概述</a></h3><ul><li>目的<ul><li>读取比特去偏移算法旨在消除由于数据传输延迟而导致的比特间偏移，从而确保数据的准确接收。</li></ul></li><li>并行执行<ul><li>该算法在所有字节通道（byte lanes）上并行执行，并且需要对内存进行写入和读取访问。</li></ul></li></ul><h3 id="2-内存访问要求"><a href="#2-内存访问要求" class="headerlink" title="2. 内存访问要求"></a><a>2. 内存访问要求</a></h3><ul><li><strong>单通道访问</strong>：<ul><li>只能访问一个存储器通道（rank），这个通道通过寄存器 <code>DTCR.DTRANK</code> 来定义。</li></ul></li><li><strong>可编程地址</strong>：<ul><li>使用四个可编程寄存器（<code>DTAR0-3</code>）定义内存的起始地址。这些地址用于 SDRAM 的写入和读取突发（burst），要求一共需要访问 32 个地址单元。</li></ul></li><li><strong>寄存器配置</strong>：<ul><li>每个地址的列地址提供一个 BL8（Burst Length 8）或两个 BL4（Burst Length 4）命令的起始地址。</li><li>所有 <code>DTARn</code> 寄存器的行和bank地址必须相同。</li><li>列地址的最低三位（[2:0]）推荐为 3’b000，以便访问连续的 8 个突发地址。</li></ul></li></ul><h3 id="3-SSO-数据模式"><a href="#3-SSO-数据模式" class="headerlink" title="3. SSO 数据模式"></a><a>3. SSO 数据模式</a></h3><ul><li>减少 SSO<ul><li>固定的连续写入序列旨在提供减少的 SSO（Simultaneous Switching Output）数据模式。具体来说：<ul><li>在地址 <code>DTAR3</code> 和 <code>DTAR1</code> 之间，所有奇数位从 0 转换到 1。</li><li>在地址 <code>DTAR3</code> 和 <code>DTAR2</code> 之间，所有偶数位从 0 转换到 1。</li></ul></li></ul></li></ul><h3 id="4-写入和读取过程"><a href="#4-写入和读取过程" class="headerlink" title="4. 写入和读取过程"></a><a>4. 写入和读取过程</a></h3><ul><li><strong>写入访问</strong>：<ul><li>读取比特去偏移算法使用八次 BL8 写入到内存。</li><li>例如，假设 DTAR0-3 的默认值分别为 x0000、x0008、x0010 和 x0018，写入访问的过程如下：<ul><li>向地址 x0000 写入数据（BL8）</li><li>向地址 x0008 写入数据（BL8）</li><li>向地址 x0010 写入数据（BL8）</li><li>向地址 x0018 写入数据（BL8）</li></ul></li></ul></li><li><strong>读取访问</strong>：<ul><li>该算法使用四次 BL8 读取内存，返回 32 个比特的数据。</li><li>例如，在读取过程中，假设读数据的过程如下：<ul><li>从地址 x0000 读取数据（BL8）</li><li>从地址 x0008 读取数据（BL8）</li><li>从地址 x0010 读取数据（BL8）</li><li>从地址 x0018 读取数据（BL8）</li></ul></li><li>仅比较从 0 到 31 中的比特 4 到 11 和 20 到 27。</li></ul></li></ul><h3 id="5-示例"><a href="#5-示例" class="headerlink" title="5. 示例"></a><a>5. 示例</a></h3><p>假设我们要使用读取比特去偏移算法对一个存储器通道进行去偏移：</p><ul><li><strong>配置寄存器</strong>：<ul><li>DTAR0 &#x3D; x0000</li><li>DTAR1 &#x3D; x0008</li><li>DTAR2 &#x3D; x0010</li><li>DTAR3 &#x3D; x0018</li></ul></li><li><strong>写入过程</strong>：<ol><li>向 x0000 写入数据，奇数位 0 转换为 1。</li><li>向 x0008 写入数据，偶数位 0 转换为 1。</li><li>向 x0010 和 x0018 写入数据，继续执行相同的模式。</li></ol></li><li><strong>读取过程</strong>：<ol><li>从 x0000 读取数据，检查比特 4 到 11 和 20 到 27 的值。</li><li>从 x0008 读取数据，继续比较相关比特。</li></ol></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>通过这个过程，读取比特去偏移算法能够有效地消除由于延迟引起的比特间偏移，确保数据传输的准确性。这一过程结合了写入和读取操作，通过连续访问内存来实现数据的对比和分析，从而优化数据传输。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Built-In Self Test(BIST)</title>
      <link href="/2024/10/28/Built-In%20Self%20Test(BIST)/"/>
      <url>/2024/10/28/Built-In%20Self%20Test(BIST)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>内建自测试（BIST）运行的机制、配置选项、错误计数和状态指示。<a><span id="more"></span></a></p></blockquote><h3 id="BIST-运行的触发与配置"><a href="#BIST-运行的触发与配置" class="headerlink" title="BIST 运行的触发与配置"></a><a>BIST 运行的触发与配置</a></h3><h4 id="1-触发-BIST-运行："><a href="#1-触发-BIST-运行：" class="headerlink" title="1. 触发 BIST 运行："></a>1. <strong>触发 BIST 运行</strong>：</h4><ul><li>通过写入 BIST 运行寄存器（<code>BISTRR</code>）并选择 RUN 操作来触发 BIST 运行。</li></ul><h4 id="2-运行配置选项："><a href="#2-运行配置选项：" class="headerlink" title="2. 运行配置选项："></a>2. <strong>运行配置选项</strong>：</h4><ul><li>无限运行<ul><li>BIST 可以配置为无限期运行，直到接收到 STOP 命令为止。</li></ul></li><li>停止条件<ul><li>可以配置为在检测到失败时停止。</li><li>也可以设置为在发出一定数量的测试模式后自动停止。</li><li>或在达到预设的最大地址值时自动停止。</li></ul></li></ul><h4 id="3-BIST-模式选择："><a href="#3-BIST-模式选择：" class="headerlink" title="3. BIST 模式选择："></a>3. <strong>BIST 模式选择</strong>：</h4><ul><li>可选择的测试模式包括：<ul><li>行走1（Walking 1s）</li><li>行走0（Walking 0s）</li><li>伪随机（Pseudo-random）</li><li>用户定义（User defined）</li></ul></li></ul><h3 id="数据字节BIST运行过程"><a href="#数据字节BIST运行过程" class="headerlink" title="数据字节BIST运行过程"></a><a>数据字节BIST运行过程</a></h3><h4 id="1-写入操作"><a href="#1-写入操作" class="headerlink" title="1. 写入操作"></a>1. <strong>写入操作</strong></h4><ul><li>数据字节BIST从<code>BISTARn</code>寄存器中设置的地址开始，执行一系列写入（WR）操作，直到发送的字数达到<code>BISTWCR.BWCNT</code>。</li></ul><h4 id="2-地址递增"><a href="#2-地址递增" class="headerlink" title="2. 地址递增"></a>2. <strong>地址递增</strong></h4><ul><li>地址根据<code>BISTAR1.BAINC</code>递增，同时自动处理<code>bank</code>的关闭或打开以及行激活。</li></ul><h4 id="3-回环模式"><a href="#3-回环模式" class="headerlink" title="3. 回环模式"></a>3. <strong>回环模式</strong></h4><ul><li>在回环模式下，一旦发送的字数等于<code>BWCNT</code>, BIST操作结束，回环数据与写入数据进行比较，记录任何失败。</li></ul><h4 id="4-DRAM-模式"><a href="#4-DRAM-模式" class="headerlink" title="4. DRAM 模式"></a>4. <strong>DRAM 模式</strong></h4><ul><li>BIST现在会执行一系列读取（RD）操作，从DRAM中读取之前写入的数据，并与写入的数据进行比较，记录任何失败。</li></ul><h3 id="无限模式"><a href="#无限模式" class="headerlink" title="无限模式"></a><a>无限模式</a></h3><ul><li>在无限模式下（<code>BISTRR.BINF== 0x1</code>），写入-读取序列将无限进行，直到满足某一停止条件：<ul><li>用户发出 BIST STOP（<code>BISTRR.BINST == STOP</code>）。</li><li>比较失败的次数达到预设限制（<code>BISTRR.NFAIL</code>），如果 <code>BISTRR.SONF == 0x1</code>。</li><li>在 RD 操作中，地址达到预设的最大值（<code>BISTRR.BSOMA == 0x1</code>），允许 BIST 通过完整的内存数组。</li></ul></li></ul><h3 id="错误状态与计数"><a href="#错误状态与计数" class="headerlink" title="错误状态与计数"></a><a>错误状态与计数</a></h3><h4 id="1-错误计数器："><a href="#1-错误计数器：" class="headerlink" title="1. 错误计数器："></a>1. <strong>错误计数器</strong>：</h4><ul><li><p>位错误计数器</p><ul><li>每个 DRAM 引脚有一个位错误计数器，例如，DATX8 上有9个计数器（8个数据位和1个数据掩码位），地址&#x2F;命令通道最多可有34个计数器。</li><li>位错误计数器设计较小，以限制设计尺寸，每个计数器为2位宽，因此可以记录每个引脚上的最多3个错误。</li></ul></li><li><p>字错误计数器</p><ul><li>计数整个字的错误，如果数据字节通道或地址&#x2F;命令通道的任何位发生错误，则相应的字错误计数器会增加。</li><li>字错误计数器为16位宽，可以计数最多64K个错误。</li></ul></li></ul><h4 id="2-数据掩码："><a href="#2-数据掩码：" class="headerlink" title="2. 数据掩码："></a>2. <strong>数据掩码</strong>：</h4><ul><li>提供数据掩码功能，以便在某个位上记录更多错误，通常在诊断阶段使用。</li></ul><h3 id="BIST状态与重置"><a href="#BIST状态与重置" class="headerlink" title="BIST状态与重置"></a><a>BIST状态与重置</a></h3><h4 id="1-完成状态："><a href="#1-完成状态：" class="headerlink" title="1. 完成状态："></a>1. <strong>完成状态</strong>：</h4><ul><li>一旦 BIST 模式执行完毕（停止或执行最后的测试模式），完成状态位（<code>BDONE</code>）将被设置在 BIST 状态通用寄存器（<code>BISTGSR</code>）中，这是测试模式执行结束的唯一有效指示。</li></ul><h4 id="2-轮询状态："><a href="#2-轮询状态：" class="headerlink" title="2. 轮询状态："></a>2. <strong>轮询状态</strong>：</h4><ul><li>用户必须轮询此位，确保它被设置后才能读取其他状态寄存器。</li></ul><h4 id="3-BIST-重置指令："><a href="#3-BIST-重置指令：" class="headerlink" title="3. BIST 重置指令："></a>3. <strong>BIST 重置指令</strong>：</h4><ul><li>提供 BIST 重置指令，通过<code>BISTRR</code>寄存器，重置某些 BIST 状态寄存器位为默认值。</li></ul><h4 id="4-系统重置："><a href="#4-系统重置：" class="headerlink" title="4. 系统重置："></a>4. <strong>系统重置</strong>：</h4><ul><li>注意，所有状态寄存器在系统重置时也会被重置为默认值。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a>总结</a></h3><blockquote><p>描述了 BIST 的工作原理、测试模式、错误计数以及如何处理状态和重置。用户可以通过 BIST 进行可靠性测试，并根据需要配置各种选项，以确保设备在运行中的准确性和可靠性。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDL Calibration Search Algorithm</title>
      <link href="/2024/10/28/DDL%20Calibration%20Search%20Algorithm/"/>
      <url>/2024/10/28/DDL%20Calibration%20Search%20Algorithm/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><blockquote><p>介绍了本地校准延迟线（LCDL）校准的搜索算法，包括如何根据DDR时钟周期进行校准。以下是逐条解析：</p></blockquote><h3 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h3><h4 id="1-LCDL校准："><a href="#1-LCDL校准：" class="headerlink" title="1. LCDL校准："></a>1. <strong>LCDL校准</strong>：</h4><ul><li>每个LCDL需要为SDRAM时钟周期进行校准。这是通过测量所需的延迟线步数来实现，以产生与DDR时钟周期相等的延迟。</li><li>每个LCDL都是独立校准的，校准过程中信号会通过延迟单元以测量SDRAM时钟周期。</li></ul><h4 id="2-校准算法："><a href="#2-校准算法：" class="headerlink" title="2. 校准算法："></a>2. <strong>校准算法</strong>：</h4><ul><li>DDL校准算法使用<strong>二进制搜索</strong>或<strong>线性搜索</strong>来找到与时钟周期匹配的延迟值。</li><li>通过<code>PGCR8.DCALTYPE</code>寄存器选择搜索类型，默认类型为二进制搜索。</li></ul><h4 id="3-起始值："><a href="#3-起始值：" class="headerlink" title="3. 起始值："></a>3. <strong>起始值</strong>：</h4><ul><li>两种搜索类型的起始值可以通过<code>PGCR8.DCALSVAL</code>寄存器选择。</li><li>对于未使用的延迟单元，由于高频率时不需要，可能会导致在重新校准时出现问题。<code>PGCR8.DCALSVAL</code>寄存器允许用户配置DDL校准搜索算法以缓解这个老化问题。</li><li>用户可以在高频率时设置一个较小的起始值，默认起始值为256。</li></ul><p>4. </p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Byte DDL Control</title>
      <link href="/2024/10/28/Data%20Byte%20DDL%20Control/"/>
      <url>/2024/10/28/Data%20Byte%20DDL%20Control/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><p><img src="https://s2.loli.net/2024/10/28/NPYoG7idgV2nbcx.png" alt="image-20241028233711104"></p><h3 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a><strong>主要概念</strong></h3><h4 id="1-LCDL的类型"><a href="#1-LCDL的类型" class="headerlink" title="1. LCDL的类型"></a>1. LCDL的类型</h4><ul><li>每个字节通道有6种类型的LCDL：<ul><li><strong>WL LCDL</strong>（写入均衡LCDL）：用于平衡写入信号。</li><li><strong>WDQ LCDL</strong>（写数据LCDL）：用于控制写入数据。</li><li><strong>GDQS LCDL</strong>（读DQS门LCDL）：用于读取DQS信号的门控。</li><li><strong>RDQS LCDL</strong>（读DQS LCDL）：用于读取DQS信号。</li><li><strong>RDQS# LCDL</strong>（读DQS# LCDL）：DQS的反向信号。</li><li><strong>GSQDS LCDL</strong>（读DQS门状态LCDL）：用于监测DQS门的状态。</li></ul></li><li>每种LCDL都有相应的控制逻辑，具体的控制逻辑在后文提到。</li></ul><h4 id="2-x4支持："><a href="#2-x4支持：" class="headerlink" title="2. x4支持："></a>2. <strong>x4支持</strong>：</h4><ul><li>对于x4模式，每个字节通道有两个LCDL控制逻辑实例，以独立控制两个半字节（nibble）。</li></ul><h4 id="3-MDL控制逻辑："><a href="#3-MDL控制逻辑：" class="headerlink" title="3. MDL控制逻辑："></a>3. <strong>MDL控制逻辑</strong>：</h4><ul><li>每个字节通道还包括一个MDL控制逻辑实例，用于控制主延迟线（MDL）。</li></ul><h4 id="4-BDL控制逻辑："><a href="#4-BDL控制逻辑：" class="headerlink" title="4. BDL控制逻辑："></a>4. <strong>BDL控制逻辑</strong>：</h4><ul><li>每个字节还包括多个BDL控制逻辑实例，用于独立控制每个字节通道的BDL。</li><li>写路径BDL<ul><li>包括8个写数据（WDQ）BDL、1个（或2个，适用于x4）写数据掩码（WDM）BDL、1个（或2个，适用于x4）写数据时钟（WDQS）BDL、1个（或2个，适用于x4）输出使能（OE）BDL。</li></ul></li><li>读路径BDL<ul><li>包括8个读数据（RDQ）BDL、1个（或2个，适用于x4）读数据掩码（RDM）BDL、1个（或2个，适用于x4）读数据时钟（RDQS）BDL、1个（或2个，适用于x4）读数据时钟#（RDQS#）BDL、1个（或2个，适用于x4）功耗下降接收器（PDR）BDL和1个（或2个，适用于x4）终端使能（TE）BDL。</li></ul></li></ul><h4 id="5-DDL控制的校准和VT补偿："><a href="#5-DDL控制的校准和VT补偿：" class="headerlink" title="5. DDL控制的校准和VT补偿："></a>5. <strong>DDL控制的校准和VT补偿</strong>：</h4><ul><li>字节通道的DDL控制具有将DDL校准和VT补偿串行进行的选项，而不是并行进行。</li><li>这种选项允许将DDL校准和VT补偿逻辑实例化一次，而不是在每个LCDL控制块中重复该逻辑。</li><li>但串行校准和VT补偿的缺点是操作时间会增加。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>这段文字的主要内容是介绍了每个字节通道中的LCDL和BDL的控制逻辑、如何进行独立控制以及在x4模式下的扩展。此外，它还提到DDL控制的校准和VT补偿可以选择串行或并行执行，这对于设计的复杂性和操作时间都有影响。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AC DLL Control</title>
      <link href="/2024/10/28/AC%20DLL%20Control/"/>
      <url>/2024/10/28/AC%20DLL%20Control/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><h3 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h3><ol><li><strong>LCDL（本地校准延迟线）</strong>：<ul><li>地址&#x2F;命令通道中只有一个LCDL（称为AC LCDL），其作用是为LPDDR3&#x2F;2地址提供90度的相位偏移。这个LCDL由通用的LCDL控制逻辑来管理。</li></ul></li><li><strong>MDL（主延迟线）控制逻辑</strong>：<ul><li>另外还包含了MDL控制逻辑，用于控制主延迟线（MDL），这部分的逻辑也将在后续章节详细描述。</li></ul></li><li><strong>BDL（可调延迟线）控制逻辑</strong>：<ul><li>地址&#x2F;命令通道中有多个BDL控制逻辑实例，分别独立控制所有地址&#x2F;命令通道的BDL。这部分的详细逻辑也会在后续章节中说明。</li></ul></li><li><strong>DDL校准逻辑</strong>：<ul><li>地址&#x2F;命令通道的DDL校准逻辑嵌套在LCDL控制逻辑中。如果设计编译时启用了CA VT补偿（即未定义<code>DWC_NO_CA_VT_COMP</code>宏），则会在DDL控制级别实例化VT补偿逻辑。</li></ul></li><li><strong>序列执行</strong>：<ul><li>DDL校准和VT补偿在地址&#x2F;命令通道中总是串行进行，因为这个通道只有一个LCDL。</li></ul></li></ol><h3 id="VT补偿"><a href="#VT补偿" class="headerlink" title="VT补偿"></a>VT补偿</h3><ul><li><strong>VT补偿</strong>是用于抵消由于温度变化、工艺变化等引起的电压阈值（VT）变化的逻辑。</li><li>默认情况下，地址&#x2F;命令通道的所有DDL寄存器都经过VT补偿。如果禁用这一特性，特别是在命令&#x2F;地址训练禁用的情况下，可以减少PUB（物理接口块）的面积。</li></ul><h3 id="宏定义的影响"><a href="#宏定义的影响" class="headerlink" title="宏定义的影响"></a>宏定义的影响</h3><ul><li><code>DWC_NO_CA_VT_COMP</code><ul><li>如果这个宏被设置，AC DDL寄存器将不进行VT补偿。此时，AC DDL寄存器的行为如下：<ul><li>AC BDL寄存器将返回其初始值（无论是复位、训练或写入的值），即使VT发生变化。</li><li>AC LCDL寄存器也将返回其初始值（无论是校准、训练或写入的值），与VT变化无关。</li><li><code>ACMDLR.IPRD</code>字段返回其初始的校准值，无论VT如何变化。</li><li><code>ACMDLR.TPRD</code>被编译掉，因此返回的值为0。</li></ul></li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这段文字的核心在于描述地址&#x2F;命令通道中延迟线的控制和校准机制，以及如何通过宏定义选择是否启用VT补偿。这对于确保信号的准确传输和提高系统的可靠性至关重要。</p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
            <tag> DLL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BDL和LCDL的使用</title>
      <link href="/2024/10/27/BDL%E5%92%8CLCDL%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/10/27/BDL%E5%92%8CLCDL%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><h3 id="BDL和LCDL字段的结构"><a href="#BDL和LCDL字段的结构" class="headerlink" title="BDL和LCDL字段的结构"></a>BDL和LCDL字段的结构</h3><p><a>1. <strong>BDL字段</strong>：</a></p><ul><li><p><strong>细粒度延迟字段（低4位）</strong>：通常用于调整微小的延迟，每个位代表一个细粒度的延迟步骤。</p></li><li><p><strong>粗粒度延迟字段（高2位）</strong>：用于调整较大的延迟，每个位代表一个较大的延迟步骤。</p></li><li><p><strong>示例</strong></p><ul><li><p><strong>寄存器值</strong>：假设我们将BDL的控制寄存器设置为 <code>0x2F</code>。其二进制表示为：<code>0x2F</code> &#x3D; <code>00101111</code>（二进制表示）</p></li><li><p><strong>位分解</strong>：</p><ul><li><p><strong>高两位</strong>：<code>10</code>（表示粗粒度延迟为<code>2</code>）</p></li><li><p><strong>低四位</strong>：<code>1111</code>（表示细粒度延迟为<code>15</code>）</p></li></ul></li><li><p><strong>各字段的意义</strong></p><ul><li><p><strong>粗粒度延迟</strong>：</p><ul><li><code>10</code>（粗粒度延迟为 <code>2</code>，表示大约有 <code>2</code> 个 CK 周期的延迟）。</li></ul></li><li><p><strong>细粒度延迟</strong>：</p><ul><li><code>1111</code>（细粒度延迟为 <code>15</code>，意味着延迟为 <code>15/16</code> 个 CK 周期）。</li></ul></li></ul></li><li><p><strong>总结</strong></p><ul><li><p>BDL控制寄存器设置为 <code>0x2F</code></p><ul><li><p>粗粒度延迟为 <code>2</code>，即增加大约 <code>2</code> 个 CK 周期的延迟。</p></li><li><p>细粒度延迟为 <code>15</code>，即几乎最大的小延迟。</p></li><li><p>总延迟 &#x3D; 粗粒度延迟 + 细粒度延迟</p><ul><li>粗粒度延迟：<code>0 CK周期</code></li><li>细粒度延迟：<code>1/16 CK周期</code></li></ul></li></ul></li></ul></li></ul></li></ul><p><a>2. <strong>LCDL字段</strong>：</a></p><ul><li><strong>细粒度延迟字段（低4位）</strong>：同样用于微小的延迟调整。</li><li><strong>粗粒度延迟字段（高5位）</strong>：用于设置较大的延迟，允许更多的调节范围。</li><li><strong>示例</strong><ul><li>示例同上，就是粗的延时字段更达了，可以延时更久的时间了。</li></ul></li></ul><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><strong>通过这样的配置：</strong></p><blockquote><ul><li>BDL提供了精细的控制以调节信号的接收时间。</li><li>LCDL则提供了更大的延迟范围，适用于更复杂的时序要求。</li></ul></blockquote><h4 id="这些设置帮助确保在DDR通信中，数据能够准确地在预期的时刻被接收，从而优化性能和稳定性。"><a href="#这些设置帮助确保在DDR通信中，数据能够准确地在预期的时刻被接收，从而优化性能和稳定性。" class="headerlink" title="这些设置帮助确保在DDR通信中，数据能够准确地在预期的时刻被接收，从而优化性能和稳定性。"></a>这些设置帮助确保在DDR通信中，数据能够准确地在预期的时刻被接收，从而优化性能和稳定性。</h4>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
            <tag> DLL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DLL Testing</title>
      <link href="/2024/10/27/DLL%20Testing/"/>
      <url>/2024/10/27/DLL%20Testing/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><h3 id="DDL（可调延迟线）测试概述"><a href="#DDL（可调延迟线）测试概述" class="headerlink" title="DDL（可调延迟线）测试概述"></a><a>DDL（可调延迟线）测试概述</a></h3><blockquote><p> 在DDR4多PHY PHY模块中，嵌入了多种可调延迟线（DDL），其基本逻辑功能是缓冲器。测试这些DDL以确保其正常工作和产生正确的延迟值是非常重要的。以下是对DDL测试过程的详细解释。</p></blockquote><p><img src="https://s2.loli.net/2024/10/27/ke8wuvEixZGp5Mf.png" alt="image-20241027225357426"></p><h4 id="1-DDL的基本功能"><a href="#1-DDL的基本功能" class="headerlink" title="1. DDL的基本功能"></a>1. DDL的基本功能</h4><ul><li><strong>可调延迟线（DDL）</strong>：<ul><li>DDL是一种可调节的延迟线，允许在信号传输路径中引入特定的延迟，以补偿时序上的偏差。不同类型的DDL（如LCDL、BDL和NDL）被用于不同的应用场景。</li></ul></li><li><strong>内部逻辑扫描测试</strong>：<ul><li>内部逻辑扫描测试通过将信号从DDL的输入传递到输出，验证DDL能够正确传递逻辑0和1。但是，该测试无法验证每个DDL设置是否产生唯一的延迟值，或者这些延迟值是否组合成特定的延迟特性。</li></ul></li></ul><h4 id="2-DDL的类型与用途"><a href="#2-DDL的类型与用途" class="headerlink" title="2. DDL的类型与用途"></a>2. DDL的类型与用途</h4><ul><li><p><strong>LCDL（Local Calibrated Delay Line）</strong>：</p><ul><li><p><strong>用途</strong>：用于DQ&#x2F;DQS信号的偏移调整。</p></li><li><p><strong>特点</strong>：可调节的延迟线，允许在数据传输中引入可变的延迟，以便精确对齐数据和时钟信号。</p></li></ul></li><li><p><strong>BDL（Buffer Delay Line）</strong>：</p><ul><li><p><strong>用途</strong>：用于DATX8和DATX4X2块中的读写比特去偏移（deskew）。</p></li><li><p><strong>特点</strong>：相较于LCDL，BDL的最大延迟较短，主要用于较小的延迟调整。</p></li></ul></li><li><p><strong>NDL（Fixed Delay Line）</strong>：</p><ul><li><p><strong>用途</strong>：用于匹配LCDL的零延迟。</p></li><li><p><strong>特点</strong>：具有固定的延迟值，不可调节，主要用于为LCDL提供基准延迟。</p></li></ul></li><li><p><strong>总结</strong>：</p><ul><li><p><strong>可调性</strong>：LCDL和BDL是可调的，而NDL是固定的。</p></li><li><p><strong>延迟范围</strong>：LCDL提供较大的延迟调节范围，BDL则提供相对较短的延迟。</p></li><li><p><strong>应用场景</strong>：LCDL主要用于数据对齐，BDL用于读写比特的去偏移，NDL用于提供固定延迟。</p></li><li><p><strong>LCDL与BDL</strong>：</p><ul><li>LCDL（本地校准延迟线）用于DQ&#x2F;DQS偏移，而BDL（短延迟线）用于DATX8和DATX4X2块中的读写比特去偏移。NDL（固定延迟线）用于匹配LCDL的零延迟。</li></ul></li><li><p><strong>可观察性</strong>：</p><ul><li>某些DDL（例如DATX8和DATX4X2中的写比特去偏移DDL）是可观察的，可以通过发送特定的数据模式并直接编程DDL延迟值来检测输出延迟的变化。然而，不是所有DDL都会影响设备的主要输出，某些DDL只影响内部节点。</li></ul></li></ul></li></ul><h4 id="3-DDL的测试挑战"><a href="#3-DDL的测试挑战" class="headerlink" title="3. DDL的测试挑战"></a>3. DDL的测试挑战</h4><ul><li><strong>测量限制</strong>：<ul><li>DDL的最小延迟步长非常小，超出了大多数自动测试设备（ATE）的测量能力。这意味着只能在较大的步长上进行特性测试，这不是理想的解决方案。</li></ul></li><li><strong>直接访问</strong>：<ul><li>通过直接访问DDL的延迟值寄存器，尽管可以进行一些初步测试，但这并不能完全解决所有DDL的测试需求。</li></ul></li></ul><h4 id="4-DDL环振荡器测试模式"><a href="#4-DDL环振荡器测试模式" class="headerlink" title="4. DDL环振荡器测试模式"></a>4. DDL环振荡器测试模式</h4><blockquote><p> 为了更全面地测试DDL，所有PHY块和PUB中都集成了DDL环振荡器测试模式。</p></blockquote><ul><li><strong>环振荡器的构建</strong>：<ul><li>在环振荡器测试模式中，NDL、BDL和LCDL被连接在一起，形成一个单一的环形振荡器。这是通过将一个延迟线的数字测试输出（DTO）连接到另一个延迟线的数字测试输入（DTI）来实现的。</li></ul></li><li><strong>振荡器输出与分频</strong>：<ul><li>环振荡器的输出通过一个可编程的分频器进行分频，产生的输出信号作为延迟线测试输出。每个DATX8、PHYDATX4X2、PHYAC和PHYACX48模块都有自己的环，允许并行测试整个接口。</li></ul></li><li><strong>自动测量功能</strong>：<ul><li>PUB中有额外的逻辑，可以自动测量延迟线测试输出的周期。测量的周期可以从寄存器中读取，并以相对于PUB控制器时钟（ctl_clk）周期的代码表示。</li></ul></li></ul><h4 id="5-测试过程示例"><a href="#5-测试过程示例" class="headerlink" title="5. 测试过程示例"></a>5. 测试过程示例</h4><blockquote><p>假设我们希望测试一个LCDL的性能：</p></blockquote><ol><li><strong>初始化：</strong><ul><li>确保PLL锁定并触发延迟线校准。</li></ul></li><li><strong>进入环振荡器模式：</strong><ul><li>启用DDL环振荡器测试模式，将所有相关DDL连接成一个环。</li></ul></li><li><strong>编程延迟线：</strong><ul><li>通过设置DDL的延迟值，调整环中每个DDL的延迟。</li></ul></li><li><strong>观察输出：</strong><ul><li>通过环的输出观察振荡信号的频率变化，记录输出的周期。</li></ul></li><li><strong>分析结果：</strong><ul><li>通过对比输出周期与期望值，评估每个DDL的延迟性能，确保它们在预期范围内工作。</li></ul></li></ol><blockquote><p> 通过这种方法，工程师可以获得DDL的线性度和范围，确保整个DDR4接口的可靠性和性能。</p></blockquote><h3 id="DDL的组成"><a href="#DDL的组成" class="headerlink" title="DDL的组成"></a><a>DDL的组成</a></h3><p><strong>粗延迟元素（Coarse Delay Elements）：</strong></p><ul><li>这些元素提供较大的延迟步长。它们的数量因不同类型的DDL而异：<ul><li><strong>BDL</strong>（Buffer Delay Line）：包含4个粗延迟元素。<ul><li>下四位（[3:0]）对应于细粒度延迟位。</li><li>上两位（[5:4]）对应于粗粒度延迟位。</li></ul></li><li><strong>LCDL</strong>（Local Calibrated Delay Line）：包含32个粗延迟元素。<ul><li>下四位（[3:0]）同样对应于细粒度延迟位。</li><li>上五位（[8:4]）对应于粗粒度延迟位。</li></ul></li></ul></li></ul><p><strong>细延迟元素（Fine Delay Element）：</strong></p><ul><li>这是一个可调的细微延迟元素，可以提供更精确的延迟调整。在BDL和LCDL中，细延迟元素的数量是相同的：<ul><li><strong>都包含16个细微步长</strong>。</li></ul></li></ul><h3 id="如何设置DDL延迟"><a href="#如何设置DDL延迟" class="headerlink" title="如何设置DDL延迟"></a><a>如何设置DDL延迟</a></h3><ul><li>在设置某个DDL延迟时，可以通过选择一定数量的粗延迟元素和细延迟元素的组合来实现。</li><li>例如，如果需要某个特定的延迟：<ul><li>可以选择2个粗延迟元素（BDL）或4个粗延迟元素（LCDL），然后可能再加上1到16个细微延迟步长。</li></ul></li></ul><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a><a>举个例子</a></h3><blockquote><p>假设你需要设置一个特定的延迟为200个时钟周期（tCK）：</p></blockquote><ul><li><strong>在BDL中</strong>：<ul><li>选择2个粗延迟元素（每个元素提供50个时钟周期的延迟），总共提供100个时钟周期的延迟。</li><li>然后可以使用细延迟元素，选择6个细微步长（每个细微步长提供约16.67个时钟周期的延迟），总共提供100个时钟周期的延迟。</li><li>最终组合为100 + 100 &#x3D; 200个时钟周期。</li></ul></li><li><strong>在LCDL中</strong>：<ul><li>选择3个粗延迟元素（每个元素提供50个时钟周期的延迟），总共提供150个时钟周期的延迟。</li><li>再使用3个细微步长（每个细微步长提供约16.67个时钟周期的延迟），总共提供50个时钟周期的延迟。</li><li>最终组合为150 + 50 &#x3D; 200个时钟周期。</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a>总结</a></h3><blockquote><p>这种设计允许在较大范围内快速设置和微调延迟，使得在不同的操作条件下能够实现精确的时序控制。不同类型的DDL通过不同数量的粗细延迟元素组合来提供所需的延迟特性。</p></blockquote><h3 id="可调延迟线（DDL）测试的两种观察方法"><a href="#可调延迟线（DDL）测试的两种观察方法" class="headerlink" title="可调延迟线（DDL）测试的两种观察方法"></a><a>可调延迟线（DDL）测试的两种观察方法</a></h3><blockquote><p> 主要是通过环形振荡器的输出信号来进行测试。这两种方法在测试的有效性和效率上有所不同。</p></blockquote><h3 id="1-环形振荡器输出"><a href="#1-环形振荡器输出" class="headerlink" title="1. 环形振荡器输出"></a>1. 环形振荡器输出</h3><ul><li><strong>环形振荡器</strong>是通过连接多个延迟线构成的一个电路，能产生稳定的时钟信号。</li><li>这个时钟信号会在经过可编程分频器后送入PUB（物理单元控制器）。</li></ul><h3 id="2-测试观察方法"><a href="#2-测试观察方法" class="headerlink" title="2. 测试观察方法"></a>2. 测试观察方法</h3><h4 id="方法一：自动计算频率"><a href="#方法一：自动计算频率" class="headerlink" title="方法一：自动计算频率"></a>方法一：自动计算频率</h4><ul><li>PUB可以计算出环形振荡器输出的时钟频率，并通过取样功能得出这个频率值。</li><li>由于控制器时钟（ctl_clk）可能在较慢的速度下运行，能够通过设置适当的时钟分频比来保证测试的准确性和减少测试时间。</li><li><strong>优点</strong>：这种方法允许所有PHY块（包括AC&#x2F;ACX48和每个DATX8&#x2F;DATX4X2）并行测试，提高了测试效率。</li></ul><h4 id="方法二：数字测试输出"><a href="#方法二：数字测试输出" class="headerlink" title="方法二：数字测试输出"></a>方法二：数字测试输出</h4><ul><li>将分频后的时钟信号直接输出到数字测试输出（dto[0]），使用户能够直接观察时钟波形。</li><li><strong>优点</strong>：这种方法在设备调试和特性测试时比较有用，因为用户可以直接看到波形。</li><li><strong>缺点</strong>：对于生产测试来说，这种方法不是最优的，因为只能一次查看一个PHY块，效率较低。</li></ul><h3 id="举个例子-1"><a href="#举个例子-1" class="headerlink" title="举个例子"></a>举个例子</h3><blockquote><p>假设在生产测试过程中，设计团队需要测试多个PHY块的延迟线：</p></blockquote><ul><li><p>使用方法一</p><ul><li>将所有PHY块连接到PUB。PUB自动计算每个块的环形振荡器频率，并输出结果。这个过程是并行进行的，可以快速完成多个测试。</li></ul></li><li><p>使用方法二</p><ul><li>如果选择直接观察分频后的时钟信号，测试人员需要逐个连接每个PHY块，并观察其时钟波形。这意味着在测试过程中，必须一一检查，耗时较长。</li></ul></li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><blockquote><p>这段描述强调了测试DDL的两种方法的优缺点。在生产测试中，自动计算频率的方法能够提高效率，而直接观察时钟波形则适合调试和特性测试场景。选择合适的方法可以有效地优化测试过程。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LCDL</title>
      <link href="/2024/10/27/LCDL/"/>
      <url>/2024/10/27/LCDL/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><blockquote><p>LCDL校准是一种用于调整和优化延迟线（Delay Line）的技术，以确保信号的时序准确。以下是校准流程的详细步骤解释：</p></blockquote><p><img src="https://s2.loli.net/2024/10/27/kiOyUTZ6Dw98gbu.png" alt="image-20241027223625640"></p><h4 id="1-初始状态"><a href="#1-初始状态" class="headerlink" title="1. 初始状态"></a>1. 初始状态</h4><ul><li><strong>复位状态</strong><ul><li>在配置复位期间（当<code>cfg_rst_n</code>被置为有效时），LCDL状态机处于空闲状态，直到复位解除。解除复位后，状态机仍然处于空闲状态，直到从主校准状态机触发LCDL校准。</li></ul></li><li><strong>初始延迟选择</strong><ul><li>初始的延迟选择值设置为最大LCDL值的一半。这为后续的校准提供了一个起始参考点。</li></ul></li></ul><h4 id="2-启动校准时钟"><a href="#2-启动校准时钟" class="headerlink" title="2. 启动校准时钟"></a>2. 启动校准时钟</h4><ul><li><strong>校准时钟的使能</strong><ul><li>首先启用校准时钟，但不启用测量。这一过程用于重置LCDL内部的校准测量触发器。校准时钟启用的时长由<code>PTR2.tCALON</code>定义。</li></ul></li><li><strong>定时等待</strong><ul><li>一旦<code>tCALON</code>时间结束，校准时钟被禁用。之后，会有一个可编程的保持时间<code>PTR2.tCALH</code>，在进入下一步之前等待。</li></ul></li></ul><h4 id="3-启用校准测量逻辑"><a href="#3-启用校准测量逻辑" class="headerlink" title="3. 启用校准测量逻辑"></a>3. 启用校准测量逻辑</h4><ul><li><strong>使能校准</strong><ul><li>重置完成后，发出<code>cal_en</code>信号以启用校准测量逻辑。在启用时，需等待一个可编程的设定时间<code>PTR2.tCALS</code>，以确保信号稳定。</li></ul></li></ul><h4 id="4-等待测量完成"><a href="#4-等待测量完成" class="headerlink" title="4. 等待测量完成"></a>4. 等待测量完成</h4><ul><li><strong>轮询结果</strong>：<ul><li>状态机通过轮询<code>cal_en_out</code>信号来等待校准完成。信号的上升沿表示校准时钟已经通过LCDL延迟单元并注册了校准使能信号。此时表示测量操作已完成。</li></ul></li><li><strong>信号同步</strong>：<ul><li>注意，<code>cal_en_out</code>会在使用之前与PHYCTL时钟域同步，而<code>cal_out</code>信号因为其稳定性，使用时无需同步。</li></ul></li></ul><h4 id="5-评估测量结果"><a href="#5-评估测量结果" class="headerlink" title="5. 评估测量结果"></a>5. 评估测量结果</h4><ul><li><strong>延迟调整</strong>：<ul><li>测量完成后，状态机根据结果决定是否需要增加或减少延迟：<ul><li>如果值为<code>1</code>，说明延迟超过一个时钟周期，需减少延迟。</li><li>否则，说明测量的延迟小于一个时钟周期，需增加延迟。</li></ul></li></ul></li><li><strong>搜索类型</strong>：<ul><li>调整延迟的操作基于<code>PGCR8.DCALTYPE</code>中编程的搜索类型。可选择二进制搜索或线性搜索。</li></ul></li></ul><h4 id="6-搜索完成条件"><a href="#6-搜索完成条件" class="headerlink" title="6. 搜索完成条件"></a>6. 搜索完成条件</h4><ul><li><p><strong>二进制搜索</strong>：</p><ul><li>当添加或减去延迟选择值为<code>1</code>时，搜索完成。</li></ul></li><li><p><strong>线性搜索</strong>：</p><ul><li>当检测到<code>cal_out</code>的正边沿或测试到最小或最大延迟选择值时，搜索完成。</li></ul></li><li><p><strong>重复测量</strong>：</p><ul><li>否则，返回步骤2，用新的延迟选择值重复测量过程。</li></ul><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2></li></ul><p><img src="https://s2.loli.net/2024/10/27/p6yrVPGxXdoBQWq.png" alt="image-20241027223726826"></p><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>假设我们需要校准一个LCDL，其最大延迟值为100个时钟周期。</p><ol><li><strong>复位状态</strong>：LCDL状态机处于空闲状态，初始延迟选择设置为50个时钟周期（最大值的一半）。</li><li><strong>启动校准时钟</strong>：启用校准时钟，持续5个时钟周期（<code>PTR2.tCALON</code>），然后禁用。</li><li><strong>启用校准</strong>：发出<code>cal_en</code>信号以启用测量，设定稳定时间为2个时钟周期（<code>PTR2.tCALS</code>）。</li><li><strong>等待完成</strong>：状态机轮询<code>cal_en_out</code>信号，直到检测到信号上升沿。</li><li><strong>评估结果</strong><ul><li>假设测量结果表明延迟值为<code>1</code>，则调整选择值减少1（新的选择值为49）。</li></ul></li><li><strong>搜索完成</strong><ul><li>在二进制搜索中，继续增加或减少延迟，直到找到合适的延迟选择值为止。</li></ul></li></ol><blockquote><p> 这个过程会重复进行，直到校准完成，确保LCDL能够准确反映信号时序要求。通过这样的校准，系统可以优化其性能，确保数据传输的稳定性和可靠性。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDR BIST</title>
      <link href="/2024/10/27/DDR-BIST/"/>
      <url>/2024/10/27/DDR-BIST/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><blockquote><p>BIST 模块是一个可编程的内置自检引擎，它为应用程序提供了一种测试 PHY 和 I&#x2F;O 的方法，以进行高速生产测试。PHY 发送和接收路径的测试是通过环回实现的。还有一个可选功能用于测试外部存储器。</p></blockquote><blockquote><p>字节通道预期数据、读取比较和错误计数器在读取状态块内实现，并由所有其他内部PUB模块共享。</p></blockquote><p><img src="https://s2.loli.net/2024/10/27/YetQxkAZNB3UpMy.png" alt="image-20241027222629770"></p><h3 id="BIST（内建自测试）的操作模式"><a href="#BIST（内建自测试）的操作模式" class="headerlink" title="BIST（内建自测试）的操作模式"></a>BIST（内建自测试）的操作模式</h3><blockquote><p> BIST（Built-In Self-Test）是一种用于测试和验证集成电路功能的技术。根据所述信息，BIST有两种操作模式：环回模式（Loopback Mode）和DRAM模式（DRAM Mode）。以下是对这两种模式的详细解释。</p></blockquote><h3 id="环回模式（Loopback-Mode）"><a href="#环回模式（Loopback-Mode）" class="headerlink" title="环回模式（Loopback Mode）"></a><strong>环回模式</strong>（Loopback Mode）</h3><ul><li><strong>定义</strong>：<ul><li>在环回模式下，DATXn的写路径在输入&#x2F;输出（I&#x2F;O）端口之间进行环回，即将数据写入的信号直接送回到接收路径中。同时，AC（地址和控制）输出路径也通过I&#x2F;O环回到专用的AC环回逻辑。</li></ul></li><li><strong>功能</strong>：<ul><li>这种模式允许BIST在不使用外部内存的情况下，发送数据模式并比较从PHY（物理层）环回的数据。这意味着BIST可以在整个数据通路中进行自我测试，确保各个部分之间的数据传输是正确的。</li></ul></li><li><strong>应用</strong>：<ul><li>环回模式适用于在测试阶段验证PHY的功能，特别是在没有连接外部内存的情况下。它可以帮助设计人员快速检查设计中的错误或问题。</li></ul></li><li><strong>最小写入延迟&#x2F;读取延迟（WL&#x2F;RL）</strong>：<ul><li>在环回模式下，支持的最小写入延迟和读取延迟为6，这意味着在测试过程中，数据传输的延迟最少需要达到6个时钟周期。</li></ul></li></ul><h3 id="DRAM模式（DRAM-Mode"><a href="#DRAM模式（DRAM-Mode" class="headerlink" title="DRAM模式（DRAM Mode)"></a><strong>DRAM模式（DRAM Mode)</strong></h3><ul><li><strong>定义</strong>：<ul><li>在DRAM模式下，BIST进行正常的写入和读取事务，将数据写入到外部DRAM中，然后比较读取回来的数据。</li></ul></li><li><strong>功能</strong>：<ul><li>这种模式允许测试外部内存的功能，确保内存的读写操作正常工作。BIST发送写入命令，然后从DRAM读取数据，并将读取的数据与发送的数据进行比较，以验证内存的正确性。</li></ul></li><li><strong>地址&#x2F;命令通道的环回</strong>：<ul><li>在DRAM模式下，地址和命令通道仍然在I&#x2F;O端口进行环回。这意味着尽管数据是在外部DRAM中传输，地址和命令仍然经过BIST进行内部测试，以确保控制信号的正确性。</li></ul></li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote><p>BIST的环回模式和DRAM模式提供了两种不同的测试方法：</p></blockquote><ul><li><strong>环回模式</strong>：用于在没有外部内存的情况下测试PHY的内部逻辑，通过环回来验证数据传输的完整性。</li><li><strong>DRAM模式</strong>：用于实际测试外部DRAM的读写操作，通过发送和接收数据来验证内存的功能。</li></ul><blockquote><p>这两种模式使得BIST能够灵活地适应不同的测试需求，帮助设计人员确保硬件的可靠性和性能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic Gate Training</title>
      <link href="/2024/10/27/Basic%20Gate%20Training/"/>
      <url>/2024/10/27/Basic%20Gate%20Training/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><blockquote><p>基础门控训练(Basic Gate Training)是一种确保DDR内存系统能够在不同延迟条件下准确读取数据的机制。其目标是通过调节DQS门控信号的时序来找到一个最佳的位置，以避免由于时延不一致引起的数据错误。以下是该过程的详细步骤和说明。</p></blockquote><h3 id="训练过程的主要步骤"><a href="#训练过程的主要步骤" class="headerlink" title="训练过程的主要步骤"></a>训练过程的主要步骤</h3><p><a><strong>1. 初始设置：</strong></a></p><ul><li>从最小延迟设置开始，DQS门控的初始位置为左侧（延迟最少）。</li><li>训练分为两个阶段：首先确定左侧（最少延迟）的位置，然后确定右侧（最多延迟）的位置。</li></ul><p><a><strong>2. 确定左侧有效位置：</strong></a></p><ul><li>从左侧开始，以1&#x2F;8个DDR时钟周期的增量向右移动门控，直到读取事务成功。</li><li>记录下当前成功的右边界位置，以及上一个失败的左边界位置。</li><li>在这两个边界之间进行进一步搜索，使用二分搜索算法加速过程，找到左侧有效位置（门控关闭位置）。</li></ul><p><a><strong>3. 确定右侧有效位置：</strong></a></p><ul><li>一旦找到左侧有效位置，接下来从右侧（延迟更多的一端）开始，将门控位置向右移动1&#x2F;4个DDR时钟周期，避免由于抖动引起的读取不稳定区域。</li><li>接着，继续向右移动，以1&#x2F;8个DDR时钟周期的增量，直到读取事务失败。</li><li>记录当前的右边界位置，使用与之前相同的二分搜索算法来确定右侧有效位置（门控开启位置）。</li></ul><p><a><strong>4. 读取验证与稳定性检查：</strong></a></p><ul><li>为了避免错误的读取结果，门控位置会在多个读取中进行验证。如果在某个位置上有一次读取失败，则认为该位置不正确。</li><li>可以通过设置DTCR.DTRPTN控制每个门控位置评估的额外读取次数。</li><li>通过DTCR.DTCMPD控制是否在门控位置评估过程中比较读取数据与期望数据。</li></ul><p><a><strong>5. 时钟周期计算：</strong></a></p><ul><li>DDR时钟周期是从DQS门控时钟周期（DXnGSR0.GDQSPRD）得出的，延迟计算基于此周期值。</li></ul><p><a><strong>6. 重置训练：</strong></a></p><ul><li>当基础门控训练被触发时，所有当前的门控训练结果都会被丢弃，算法会从头开始训练。</li></ul><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><blockquote><p>假设有一个DDR内存系统，DQS门控的时钟周期tCK为1ns。整个训练过程可以描述如下：</p></blockquote><h4 id="初始设置："><a href="#初始设置：" class="headerlink" title="初始设置："></a>初始设置：</h4><blockquote><p>DQS门控初始位置设置为0ns。</p></blockquote><h5 id="寻找左侧有效位置："><a href="#寻找左侧有效位置：" class="headerlink" title="寻找左侧有效位置："></a>寻找左侧有效位置：</h5><ul><li>从0ns开始，以1&#x2F;8个DDR时钟周期（0.125ns）向右移动：<ul><li>位置0ns：成功读取（记录为当前右边界）。</li><li>位置0.125ns：成功读取（记录为当前右边界）。</li><li>位置0.25ns：成功读取（记录为当前右边界）。</li><li>位置0.375ns：失败读取（记录为当前左边界）。</li></ul></li><li>通过二分搜索，确认左侧有效位置可能在0.25ns附近，确定该位置为0.25ns。</li></ul><h5 id="寻找右侧有效位置："><a href="#寻找右侧有效位置：" class="headerlink" title="寻找右侧有效位置："></a>寻找右侧有效位置：</h5><ul><li>从0.375ns开始，向右移动1&#x2F;4个DDR时钟周期（0.25ns）：<ul><li>新位置为0.625ns，继续读取，成功读取。</li><li>移动到0.75ns，成功读取。</li><li>移动到0.875ns，成功读取。</li><li>移动到1ns，失败读取（当前右边界为0.875ns）。</li></ul></li><li>再次使用二分搜索，找到右侧有效位置为0.875ns。</li></ul><h5 id="确定最终门控位置："><a href="#确定最终门控位置：" class="headerlink" title="确定最终门控位置："></a>确定最终门控位置：</h5><ul><li>最终的门控位置取左侧和右侧有效位置的中位数，即(0.25ns + 0.875ns) &#x2F; 2 &#x3D; 0.5625ns。</li></ul><h5 id="验证门控位置："><a href="#验证门控位置：" class="headerlink" title="验证门控位置："></a>验证门控位置：</h5><ul><li>在位置0.5625ns进行多次读取验证，如果所有读取均成功，则该门控位置被确认有效。</li></ul><blockquote><p>通过这一系列步骤，基础门控训练确保了DQS信号的门控位置能够在不同的电路条件下保持准确性，提高了DDR内存系统的可靠性。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
            <tag> Data Training </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DQS Gate Training</title>
      <link href="/2024/10/27/DQS%20Gate%20Training/"/>
      <url>/2024/10/27/DQS%20Gate%20Training/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><blockquote><p>DQS Gate Training是DDR内存系统中一种关键的训练机制，旨在通过抑制噪声和准确捕获读取数据来优化数据传输。由于在读取路径中的延迟（例如电路板的走线长度）常常不精确，因此需要对门控（Gate）进行训练，以确保它与读取数据精确对齐。</p></blockquote><h4 id="主要组成部分"><a href="#主要组成部分" class="headerlink" title="主要组成部分"></a>主要组成部分</h4><blockquote><p><strong>DQS门控：</strong></p><ul><li>DQS（数据选通信号）用于同步读数据。门控信号控制在何时允许数据被读取和采样，以抑制噪声影响。</li></ul></blockquote><blockquote><p><strong>训练机制:</strong></p><ul><li>DDR4 PHY解决方案提供了一种内置的DQS门控训练单元，可以在初始化过程中或通过软件&#x2F;内存控制器触发（使用PIR寄存器）。</li><li>提供了两种训练机制：基础门控训练（Basic Gate Training）和读取定级（Read-Leveling）</li></ul></blockquote><h4 id="基础门控训练（Basic-Gate-Training）"><a href="#基础门控训练（Basic-Gate-Training）" class="headerlink" title="基础门控训练（Basic Gate Training）"></a>基础门控训练（Basic Gate Training）</h4><ul><li><p>执行过程：</p><ul><li>执行一系列读取事务，通过在可能的门控位置上扫描DQS门，以发现一个合适的门控位置，使读取操作成功。</li><li>由于可能的位置数量非常大（最多可达到9个tCK周期的延迟线tap），因此使用二分搜索算法加速搜索过程。</li></ul></li><li><p>具体步骤：</p><ul><li>启动训练，系统将尝试不同的门控延迟位置。</li><li>对于每个延迟位置，进行读取事务并监测读取成功与否。</li><li>通过二分搜索算法有效地缩小可能的延迟范围，找到最佳的门控位置。</li></ul></li></ul><h4 id="读取定级（Read-Leveling）"><a href="#读取定级（Read-Leveling）" class="headerlink" title="读取定级（Read-Leveling）"></a>读取定级（Read-Leveling）</h4><ul><li><p>执行过程：</p><ul><li>采用采样窗口技术来识别读取DQS的上升沿，并确定门控位置。</li><li>读取定级不检查读取数据的正确性，而是关注DQS信号本身的时间对齐。</li></ul></li><li><p>具体步骤：</p><ul><li>对DQS信号进行采样，寻找最佳的时机以确保读取的数据在门控开启时被准确采样。</li><li>在整个过程中，读取数据的准确性并不是重点，主要是确保DQS与读取数据的时间对齐。</li></ul></li><li><p>同步训练</p><ul><li>同时训练所有字节通道：这两个算法都同时训练所有字节通道，确保在每个rank中，所有字节的DQS信号都被有效地门控。</li></ul></li></ul><blockquote><p>逐个训练rank：在共享AC双通道模式下，相关的每个rank也会逐个训练。</p></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><blockquote><p>DQS Gate Training通过精确对齐门控信号和读取数据，提高了DDR内存的信号完整性和性能。通过基础门控训练和读取定级的结合，系统能够有效处理不确定性并优化数据传输过程。基础门控训练负责找到合适的门控位置，而读取定级确保信号的同步，为高效稳定的数据传输奠定基础。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Write Leveling</title>
      <link href="/2024/10/27/leveling/"/>
      <url>/2024/10/27/leveling/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><blockquote><p>DDR（双倍数据速率）内存的写入定级（Write Leveling）是一种用于补偿时钟信号与数据信号之间的时延偏差的技术。在多个SDRAM DDR3&#x2F;DDR4系统中，由于信号必须按顺序从一个SDRAM路由到下一个SDRAM，可能会导致时钟信号（CK）和数据选通信号（DQS）之间的偏移。这种偏移可能会影响时序要求，例如tDQSS、tDSS和tDSH。写入定级算法的目标就是在每个SDRAM处重新对齐时钟和数据选通信号。</p></blockquote><h4 id="写入定级的算法步骤"><a href="#写入定级的算法步骤" class="headerlink" title="写入定级的算法步骤"></a>写入定级的算法步骤</h4><ul><li><p><strong>进入写入定级模式</strong>：将一个内存rank中的所有SDRAM都置于写入定级模式。</p></li><li><p><strong>发送DQS脉冲</strong>：向DRAM发送DQS_t&#x2F;DQS_c脉冲，同时逐步增加这些信号的延迟。</p></li><li><p><strong>检测0到1的过渡</strong>：在反馈结果中查找DQS信号的0到1过渡。这个过渡点表明CK的上升沿在DQS的上升沿之后的某个时刻采样到了DQS信号。</p></li><li><p><strong>稳定性检查</strong>：为了确保结果的稳定性，算法要求在8个连续的tap延迟中，采样值为1的稳定时间，或者在DXnGSR0.WLPRD个连续tap延迟中，这个值可以通过DTCR1.WLVLDPRD选择。这样可以过滤掉抖动和毛刺。</p></li></ul><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><blockquote><p>假设我们有一个包含4个SDRAM芯片的rank，它们的DQS信号需要进行写入定级。</p></blockquote><p><a>1. <strong>进入写入定级模式</strong>：</a>将所有4个SDRAM芯片设置为写入定级模式。</p><p><a>2. <strong>发送脉冲并增加延迟</strong>：</a></p><ul><li>初始情况下，DQS_t&#x2F;DQS_c信号的延迟为0ns，发送脉冲。</li><li>监测反馈结果，假设没有检测到0到1的过渡。</li><li>将DQS_t&#x2F;DQS_c的延迟增加到1ns，发送脉冲，继续监测反馈结果。</li><li>逐渐增加延迟，直到在某个时刻（例如3ns）检测到0到1的过渡。</li></ul><p><a>3. <strong>稳定性验证</strong>：</a>一旦检测到0到1的过渡，算法会继续监测在接下来的8个tap延迟中，DQS信号是否稳定为1。如果是，则确认该延迟为有效延迟。</p><blockquote><p>通过这种方式，写入定级算法能够有效地补偿时钟和数据之间的延迟偏差，确保信号的可靠性和系统的稳定性。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDR DLL</title>
      <link href="/2024/10/27/ddr-dll/"/>
      <url>/2024/10/27/ddr-dll/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><h3 id="延迟线校准概述"><a href="#延迟线校准概述" class="headerlink" title="延迟线校准概述"></a>延迟线校准概述</h3><blockquote><p>在数字电路，尤其是在高速内存控制器的设计中，延迟线校准是一个重要步骤，以确保时钟和数据之间的时序匹配。以下是对延迟线校准过程的详细解释：</p></blockquote><h4 id="1-PLL锁定后的校准触发"><a href="#1-PLL锁定后的校准触发" class="headerlink" title="1. PLL锁定后的校准触发"></a>1. PLL锁定后的校准触发</h4><ul><li><strong>PLL锁定</strong>：<ul><li>当相位锁定环（PLL）成功锁定时，意味着时钟信号已稳定，系统可以开始其他初始化任务。</li></ul></li><li><strong>触发校准</strong>：<ul><li>延迟线校准可以通过写入PIR（PHY Initialization Register）寄存器来触发。这通常在PLL锁定后进行，以确保校准的准确性。</li></ul></li></ul><h4 id="2-校准的重要性"><a href="#2-校准的重要性" class="headerlink" title="2. 校准的重要性"></a>2. 校准的重要性</h4><ul><li><strong>在初始化之前</strong>：<ul><li>延迟线必须在任何进一步的初始化任务之前完成校准，特别是涉及高速控制器时钟的任务。这样可以确保在访问内存或执行其他高速操作时，信号的时序是准确的。</li></ul></li><li><strong>绕过校准</strong>：<ul><li>用户可以选择通过设置PIR寄存器中的<code>DCALPSE</code>位来绕过延迟线校准。但如果选择绕过，用户必须确保在访问内存之前，延迟线在后续阶段得到了校准。</li></ul></li></ul><h4 id="3-局部校准延迟线（LCDL）"><a href="#3-局部校准延迟线（LCDL）" class="headerlink" title="3. 局部校准延迟线（LCDL）"></a>3. 局部校准延迟线（LCDL）</h4><ul><li><strong>独立校准</strong>：<ul><li>每个LCDL都需要针对SDRAM时钟周期进行校准。这意味着要测量延迟线的步数，以产生等于DDR时钟周期的延迟。</li></ul></li><li><strong>校准过程</strong>：<ul><li>每个LCDL的校准是独立进行的，确保每条延迟线都能精确匹配其对应的时钟信号。</li></ul></li></ul><h4 id="4-校准的执行"><a href="#4-校准的执行" class="headerlink" title="4. 校准的执行"></a>4. 校准的执行</h4><ul><li><strong>初始化序列的一部分</strong>：<ul><li>通常，延迟线校准是PHY初始化序列的一部分，具体过程在相应的文档中描述。这个初始化过程包括各种步骤，确保PHY和连接的内存能够正常工作。</li></ul></li><li><strong>用户触发</strong>：<ul><li>用户可以随时通过将PIR寄存器中的校准位（<code>DCAL</code>）设置为<code>1</code>来手动触发延迟线校准。这提供了灵活性，使得用户在需要时可以进行额外的校准。</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>延迟线校准是在高速内存系统中确保数据传输可靠性的重要步骤。通过在PLL锁定后触发延迟线校准，系统可以确保在执行任何内存访问或高速操作之前，所有时序都是准确的。绕过校准虽然是可选的，但必须在后续操作之前确保延迟线的校准，以避免潜在的时序问题。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDR Traning</title>
      <link href="/2024/10/22/DDR-Traning/"/>
      <url>/2024/10/22/DDR-Traning/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><h3 id="DDR-Training概述"><a href="#DDR-Training概述" class="headerlink" title="DDR Training概述"></a><a>DDR Training概述</a></h3><blockquote><p>DDR使用的是并行接口进行数据传输，这意味着多个数据位（64bits或者是128bits）同时在一组信号线上进行传输。随着总线频率的增加，信号在PCB(印刷电路板)上的传输变得更加复杂，因为PCB走线的长度差异，PVT（工艺，电压，温度）变化等因素会导致信号传播时间（即延迟）的差异。</p></blockquote><blockquote><p>当信号时序没有被正确对齐，或者是信号质量因为上述的原因而下降的时候，DDR控制器在采样点读取的数据可能会出错，导致读写操作异常，这是因为DDR在每个时钟周期的上升沿和下降沿都会进行数据传输，任何微小的时序偏差都可能导致数据被错误地采集。</p></blockquote><blockquote><p>为了解决上述问题，DDR系统就引入了Traning机制。Traning的主要目的是在DDR初始化过程中，动态调整DRAM与PHY之间的数据与地址命令信号线的时序关系，以确保信号在正确的时间被采样。</p></blockquote><h4 id="training的大致流程："><a href="#training的大致流程：" class="headerlink" title="training的大致流程："></a>training的大致流程：</h4><p><img src="https://s2.loli.net/2024/10/22/irSe9UZcqAGflL1.png" alt="image-20241022203829731"></p><h4 id="记住下面几个问题"><a href="#记住下面几个问题" class="headerlink" title="记住下面几个问题"></a>记住下面几个问题</h4><blockquote><ul><li><a style="color: red">Traning的目的是什么</a></li><li><a style="color: red">Traning调节是什么，反馈是什么</a></li><li><a style="color: red">协议规定的是什么</a></li><li><a style="color: red">具体的实现是什么</a></li></ul></blockquote><h4 id="Training的对象"><a href="#Training的对象" class="headerlink" title="Training的对象"></a>Training的对象</h4><p><img src="https://s2.loli.net/2024/10/22/jsCt6QMGeIXEPUf.png" alt="image-20241022204755366"></p><blockquote><p>对象是DDR PHY和DRAM之间的交互信号线</p></blockquote><ul><li>CK：时钟信号</li><li>CS：片选信号，RANK选择</li><li>AC：Address和Command</li><li>DQS：对数据的采样信号</li><li>DQ：数据线</li><li>Alert：用于training过程中，反馈DCS和DCA到达RCD的回应。正式业务场景是不需要的（这个就像是上面流程图的反馈，当然反馈的功能不只是training，有时候这个信号也会作为ecc的反馈）。</li></ul><p><a>整理之后的training流程</a></p><p><img src="https://s2.loli.net/2024/10/22/VeFAOu2iY8zNJfo.png" alt="image-20241022205033448"></p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法</title>
      <link href="/2024/10/20/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/10/20/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>在 Python 中，你不需要显式声明变量类型。变量名可以直接赋值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="string">&quot;lin&quot;</span></span><br><span class="line">c = <span class="number">2.34</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数字：整数（int），浮点数（float），复数（complex）</span></span><br><span class="line">a = <span class="number">10</span> <span class="comment"># int</span></span><br><span class="line">b = <span class="number">3.23</span> <span class="comment"># float</span></span><br><span class="line">c = <span class="number">2</span> + <span class="number">3j</span> <span class="comment"># complex</span></span><br><span class="line"><span class="comment"># 字符串：单引号或者是双引号表示</span></span><br><span class="line">s = <span class="string">&quot;zlin&quot;</span></span><br><span class="line"><span class="comment"># 列表： 有序集合，可以包含不同的元素</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="string">&quot;fuour&quot;</span>, <span class="number">3.2</span>]</span><br><span class="line"><span class="comment"># 元组：有序且不可变的集合</span></span><br><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;sdf&quot;</span>)</span><br><span class="line"><span class="comment"># 字典：键值对的集合</span></span><br><span class="line"> dic = &#123;<span class="string">&quot;name&quot;</span> : <span class="string">&quot;zlin&quot;</span>,  <span class="string">&quot;age&quot;</span> : <span class="number">23</span>&#125;</span><br><span class="line"><span class="comment"># 集合：无序且不重复的元素集合</span></span><br><span class="line"><span class="built_in">set</span> = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">#布尔值：True和False</span></span><br><span class="line">is_true = <span class="literal">True</span></span><br><span class="line">is_false = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul><li>读取文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;zlin.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">content = file.read()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure></li><li>写入文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;zlin.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">file.write(<span class="string">&quot;hhh&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><ul><li>是一种简洁的方式来创建列表<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><ul><li>一种快速简洁的方式来创建字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;x: x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br></pre></td></tr></table></figure></li></ul><h3 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h3><ul><li>一种集合的简洁方式来创建集合<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> = &#123;x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言运算符优先级</title>
      <link href="/2024/10/20/c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/"/>
      <url>/2024/10/20/c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存的基本概念</title>
      <link href="/2024/10/20/%E5%86%85%E5%AD%98%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2024/10/20/%E5%86%85%E5%AD%98%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><h3 id="DIMM"><a href="#DIMM" class="headerlink" title="DIMM"></a>DIMM</h3><blockquote><p>DIMM即Dual In-Line Memory Module，即内存条印刷电路板正反面均有金手指与主板上的内存条槽相接触的结构。内存条也有人叫DIMM条，主板上的内存槽也有人称为DIMM槽。除了有DIMM，还有SIMM（Single In-Line Memory Module)。</p></blockquote><h3 id="SODIMM"><a href="#SODIMM" class="headerlink" title="SODIMM"></a>SODIMM</h3><blockquote><p>对于笔记本电脑，使用普通内存条会使笔记本尺寸过大，而直接使用内存颗粒则不便于扩展与维修，SODIMM应运而生，SODIMM是Small Outline DIMM，即小尺寸的DIMM。</p></blockquote><h3 id="Memory-Channel"><a href="#Memory-Channel" class="headerlink" title="Memory Channel"></a>Memory Channel</h3><blockquote><p>若干个DIMM可以连接到一组总线上，这组总线被称为内存通道（Memory Channel）。</p></blockquote><h3 id="RANK"><a href="#RANK" class="headerlink" title="RANK"></a>RANK</h3><blockquote><p>主板上放3条DIMM可以，但从第四条DIMM开始，因为走线距离过长的原因导致信号质量下降，因此，我们可以将两条物理DIMM的内存颗粒放在一块内存印刷电路板上。我们把这种逻辑DIMM称为Rank。为了支持多RANK的内存条，我们需要在物理DIMM接口上定义多个CS_N片选信号以选择相应的Rank。下图蓝色是Rank1的片选信号，黄色是Rank0的片选信号。</p></blockquote><p><img src="https://s2.loli.net/2024/10/20/QoV5wSBktCda4Xb.jpg" alt="img"></p><blockquote><p>因此，一个Rank就是指一组内存颗粒的CS信号被连在一起，并由内存控制器单独的一根CS_N信号控制，共同组成位宽为64bit（不带ECC）或72bit（带ECC）的存储阵列，共同完成一条内存通道下发的指令。注意，支持ECC功能的内存条除了64bit的数据外，还有8bit的校验数据。</p></blockquote><h3 id="RDIMM"><a href="#RDIMM" class="headerlink" title="RDIMM"></a>RDIMM</h3><blockquote><p>RDIMM的第一个字母R实际就是一颗额外的芯片，称为时钟缓存寄存器芯片（Registering Clock Driver)。没有该芯片的内存条一般被称为UDIMM（Unbuffered-DIMM）。这颗寄存器芯片主要用来缓存（buffer）时钟&#x2F;控制&#x2F;命令&#x2F;地址等信号。缓存的主要目的是解决信号质量以及负载过重的问题。RCD（时钟缓存寄存器芯片）</p></blockquote><h3 id="LRDIMM"><a href="#LRDIMM" class="headerlink" title="LRDIMM"></a>LRDIMM</h3><blockquote><p>为了是一根物理DIMM支持更多的Rank，我们将数据信号通过数据缓存（Data Buffer）芯片缓存，而不直接连接DRAM Devices，从而改善数据信号的质量，这种结构称之为LRDIMM。</p></blockquote><p><a><strong>总结一下，DIMM分为如下三种：</strong></a></p><ul><li>UDIMM</li></ul><blockquote><p>没有缓冲的存储模组（UnbufferDualInlineMemoryModule），简称UDIMM，存储模组上的全部信号线路可以和内存控制器的封装引脚直接进行连接。</p></blockquote><ul><li>RDIMM</li></ul><blockquote><p>RDIMM的第一个字母R实际就是一颗额外的芯片，称为时钟缓存寄存器芯片（Registering Clock Driver)。没有该芯片的内存条一般被称为UDIMM（Unbuffered-DIMM）。带寄存器的存储模组（RegisterDualInlineMemoryModule），简称RDIMM，特点是存储模组控制线路和地址线路先连接寄存器后再接入到控制器的封装引脚，而数据信号线路与控制器的封装引脚采用直接连接的方式。这样的设计不仅可以保证接入到内存控制器的信号受到很小的外界干扰，保证信号完整性。</p></blockquote><ul><li>LRDIMM</li></ul><blockquote><p>负载较低型存储模组（LoadReducedDualInlineMemoryModule），简称LRDIMM，模组上的全部信号总线先连接内存缓存器再连接控制器的封装引脚。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
          <category> Memory </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DDR </tag>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>get_response</title>
      <link href="/2024/10/20/get-response/"/>
      <url>/2024/10/20/get-response/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> SystemVerilog </category>
          
          <category> UVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> UVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>make_run</title>
      <link href="/2024/10/19/make-run/"/>
      <url>/2024/10/19/make-run/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>make_soc</title>
      <link href="/2024/10/19/make-soc/"/>
      <url>/2024/10/19/make-soc/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>svt_axi_vip</title>
      <link href="/2024/10/19/svt-axi-vip/"/>
      <url>/2024/10/19/svt-axi-vip/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p>]]></content>
      
      
      <categories>
          
          <category> UVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> Programming </tag>
            
            <tag> UVM </tag>
            
            <tag> VIP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svt_ahb_vip</title>
      <link href="/2024/10/19/svt-ahb-vip/"/>
      <url>/2024/10/19/svt-ahb-vip/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p>]]></content>
      
      
      <categories>
          
          <category> UVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> UVM </tag>
            
            <tag> VIP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svt_apb_vip</title>
      <link href="/2024/10/19/svt-apb-vip/"/>
      <url>/2024/10/19/svt-apb-vip/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p>]]></content>
      
      
      <categories>
          
          <category> UVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> Programming </tag>
            
            <tag> UVM </tag>
            
            <tag> VIP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDR</title>
      <link href="/2024/10/19/DDR/"/>
      <url>/2024/10/19/DDR/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><h1 id="DDR介绍"><a href="#DDR介绍" class="headerlink" title="DDR介绍"></a>DDR介绍</h1><h4 id="DDR子系统是由两个部分组成的，ddr-controller和ddr-phy。ddr-controller主要是负责承担CPU（或者说是外部）和memory系统之间进行数据交互时候的传输效率和调度的。ddr-phy主要是负责数据交换过程中的传输速度了。（如下图）"><a href="#DDR子系统是由两个部分组成的，ddr-controller和ddr-phy。ddr-controller主要是负责承担CPU（或者说是外部）和memory系统之间进行数据交互时候的传输效率和调度的。ddr-phy主要是负责数据交换过程中的传输速度了。（如下图）" class="headerlink" title="DDR子系统是由两个部分组成的，ddr controller和ddr phy。ddr controller主要是负责承担CPU（或者说是外部）和memory系统之间进行数据交互时候的传输效率和调度的。ddr phy主要是负责数据交换过程中的传输速度了。（如下图）"></a>DDR子系统是由两个部分组成的，ddr controller和ddr phy。ddr controller主要是负责承担CPU（或者说是外部）和memory系统之间进行数据交互时候的传输效率和调度的。ddr phy主要是负责数据交换过程中的传输速度了。（如下图）</h4><p><img src="https://s2.loli.net/2024/10/19/5WCbYzpnBrKU3M8.png" alt="img"></p><p>ddr phy主要是由两个部分来组成的，一个pub（soft ip）和另外一个phy（hard ip）。</p><p><img src="https://s2.loli.net/2024/10/19/N4Bph3x1SVvuyFr.png" alt="image-20241019182354234"></p><p>其中pub的结构如下图所示：</p><p><img src="https://s2.loli.net/2024/10/19/tqeWV5swdzvXAG2.png" alt="image-20241019182423919"></p><p>pub具有一下特点：</p><ul><li>不支持SDRAM的DLL off模式</li><li>数据通路的位宽以8bit的增量递增</li><li>支持最多4个rank</li><li>支持单数据通道或者双数据通道的配置</li><li>能够完成PHY的初始化，tranning以及控制逻辑</li><li>支持自动化的DQS Gate Tranning</li><li>支持Delay line和VT补偿</li><li>支持自动化的Write Leveing</li><li>支持自动化的Write，Read的data bit deskew</li><li>支持自动化的DQ&#x2F;DQS eye tranning</li><li>支持apb或者其他的通用接口配置寄存器</li><li>支持DFI接口</li></ul><h2 id="PUB模块实现初始化流程"><a href="#PUB模块实现初始化流程" class="headerlink" title="PUB模块实现初始化流程"></a>PUB模块实现初始化流程</h2><h3 id="DDR系统初始化"><a href="#DDR系统初始化" class="headerlink" title="DDR系统初始化"></a>DDR系统初始化</h3><p><img src="https://s2.loli.net/2024/10/19/M53dul89eLDIJyn.png" alt="image-20241019182857357"></p><p><img src="https://s2.loli.net/2024/10/19/kZ5zbw3nlfeBqR4.png" alt="image-20241019182913841"></p><p><img src="https://s2.loli.net/2024/10/19/eoq6BtyOYgSrh1j.png"><img src="https://s2.loli.net/2024/10/19/sD9fcjVyJOFwlvZ.png" alt="image-20241019182938780"><img src="https://s2.loli.net/2024/10/19/TWYxRvhF1EjzPVB.png"><img src="https://s2.loli.net/2024/10/19/bGQc4DjLaWzyqT6.png"><img src="https://s2.loli.net/2024/10/19/qXKekYH1EI4LW5r.png" alt="image-20241019183010016"><img src="https://s2.loli.net/2024/10/19/2hwVvX7fxRQDcFT.png" alt="image-20241019183016978"></p>]]></content>
      
      
      <categories>
          
          <category> DDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> DDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Makefile基础</title>
      <link href="/2024/10/19/Makefile/"/>
      <url>/2024/10/19/Makefile/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a><br>这是关于Makefile的基本用法</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h4 id="目标：依赖"><a href="#目标：依赖" class="headerlink" title="目标：依赖"></a>目标：依赖</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先检查tb.sv和dut.sv是不是存在，以及是否有修改。如果依赖有修改或者是目标不存在得时候，就执行下面得命令</span></span><br><span class="line"><span class="section">simv:tb.sv dut.sv</span></span><br><span class="line">vcs -full64 -sverilog tb.sv </span><br></pre></td></tr></table></figure><h3 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:sim</span></span><br><span class="line"><span class="section">sim:simv</span></span><br><span class="line">    ./simv </span><br></pre></td></tr></table></figure><h3 id="ONESHELL"><a href="#ONESHELL" class="headerlink" title=".ONESHELL:"></a>.ONESHELL:</h3><ul><li>所有的指令就会在一个shell中执行了</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">.ONESHELL:</span></span><br><span class="line"><span class="comment">#正常些指令</span></span><br></pre></td></tr></table></figure><h3 id="语句的回显问题"><a href="#语句的回显问题" class="headerlink" title="语句的回显问题"></a>语句的回显问题</h3><ul><li>可以在语句前面用”<strong>@</strong>“就行了，但是不想每个前面都打的话，就用.SILENT</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">.SILENT: main all    # 后面是目标</span></span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="ifeq"><a href="#ifeq" class="headerlink" title="ifeq"></a>ifeq</h3><ul><li>判断一个变量是不是已经定义了</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">OS = Linux</span><br><span class="line"><span class="keyword">ifdef</span> Win</span><br><span class="line">    OS = Windows</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OS = Linux</span><br><span class="line"><span class="keyword">ifdef</span> Win</span><br><span class="line">    OS = Windows</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">ifdef</span> Mac</span><br><span class="line">    OS= MacOS</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ifdef</span> Win</span><br><span class="line">    OS = Windows</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">ifdef</span> Mac</span><br><span class="line">    OS= MacOS</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    OS = Linux</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><h3 id="ifndef"><a href="#ifndef" class="headerlink" title="ifndef"></a>ifndef</h3><ul><li>判断一个变量是不是没有定义</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version = 3.0</span><br><span class="line"></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(version)</span>,1.0)            <span class="comment"># ifeq后一定要一个空格</span></span><br><span class="line">    msg := 版本太旧了，请更新版本</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">ifeq</span> (<span class="variable">$(version)</span>, 3.0)</span><br><span class="line">    msg := 版本太新了，也不行</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    msg := 版本可以用</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外的写法</span></span><br><span class="line">msg = Other</span><br><span class="line"><span class="keyword">ifeq</span> <span class="string">&quot;<span class="variable">$(OS)</span>&quot;</span> <span class="string">&quot;Windows_NT&quot;</span></span><br><span class="line">    msg = This is a Windows Platform</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ifeq</span> &#x27;<span class="variable">$(OS)</span>&#x27; &#x27;Windows_NT&#x27;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ifeq</span> &#x27;<span class="variable">$(OS)</span>&#x27; <span class="string">&quot;Windows_NT&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ifneq"><a href="#ifneq" class="headerlink" title="ifneq"></a>ifneq</h3><ul><li>判断两个值是不是不相等</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">和上面的一样用法</span><br></pre></td></tr></table></figure><h2 id="变量操作"><a href="#变量操作" class="headerlink" title="变量操作"></a>变量操作</h2><h3 id="是二次展开，-是立即展开"><a href="#是二次展开，-是立即展开" class="headerlink" title="=是二次展开， :=是立即展开"></a><kbd>=</kbd>是二次展开， <kbd>:=</kbd>是立即展开</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只需要修改文件开头就行了，&quot;:=&quot;表示变量决定于它在makefile中的位置（顺序执行的），而&quot;=&quot;是makefile最后的位置</span></span><br><span class="line">tbfile := tb.sv env_pkg.sv test_pkg.sv</span><br><span class="line">rtlfile := dut.v a.v b.v</span><br><span class="line"><span class="section">simv: <span class="variable">$(tbfile)</span> <span class="variable">$(rtlfile)</span></span></span><br><span class="line">    vcs -full64 -sverilog <span class="variable">$(tbfile)</span> <span class="variable">$(rtlfile)</span></span><br></pre></td></tr></table></figure><h3 id="取消变量的定义"><a href="#取消变量的定义" class="headerlink" title="取消变量的定义"></a>取消变量的定义</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">undefine</span> &lt;变量名&gt;</span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(USERNAME)</span></span><br></pre></td></tr></table></figure><h3 id="shell运行赋值"><a href="#shell运行赋值" class="headerlink" title="shell运行赋值"></a>shell运行赋值</h3><ul><li>使用<kbd>!=</kbd>，运行一个shell命令，返回值赋值给一个变量</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">files != ls </span><br></pre></td></tr></table></figure><h3 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">files += linzhiwen.cpp</span><br></pre></td></tr></table></figure><h3 id="条件赋值"><a href="#条件赋值" class="headerlink" title="条件赋值"></a>条件赋值</h3><ul><li>条件赋值的**<kbd>?=</kbd>**,变量如果已经赋值了，那么就保持原来的值，如果没有就把右边的赋值给左边</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var1 = 100</span><br><span class="line">var1 ?= 200</span><br><span class="line"><span class="section">all:</span></span><br><span class="line">@echo <span class="variable">$(var1)</span> </span><br></pre></td></tr></table></figure><h3 id="变量的替换引用"><a href="#变量的替换引用" class="headerlink" title="变量的替换引用"></a>变量的替换引用</h3><ul><li>语法：$(var:a&#x3D;b)，意思是将变量var的值中每一项结尾的a替换为b</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var = main.cpp a.cpp b.cpp</span><br><span class="line">objs := $(var:.cpp=.v) </span><br><span class="line">objes := $(var:%.cpp=%.v)</span><br></pre></td></tr></table></figure><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><ul><li>makefile中的所有的变量都可以通过终端传递，实现覆盖</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make GUI=xxx</span><br></pre></td></tr></table></figure><h2 id="字符替换函数"><a href="#字符替换函数" class="headerlink" title="字符替换函数"></a>字符替换函数</h2><h3 id="subst"><a href="#subst" class="headerlink" title="subst"></a>subst</h3><ul><li>文本替换函数，返回替换后的文本</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">subst</span> target,replacement,text)</span></span><br><span class="line">        <span class="comment">#--- 用relacement替换text中的target</span></span><br><span class="line">        <span class="comment">#--- target 需要替换的内容</span></span><br><span class="line">        <span class="comment">#--- replacement 替换为的内容</span></span><br><span class="line">        <span class="comment">#--- text 需要处理的内容，可以是任意字符串</span></span><br><span class="line"></span><br><span class="line">objs = main.o hello.o</span><br><span class="line">srcs = <span class="variable">$(<span class="built_in">subst</span> .o,.cpp,<span class="variable">$(objs)</span>)</span></span><br><span class="line">headers = <span class="variable">$(<span class="built_in">subst</span> .cpp,.h,<span class="variable">$(srcs)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    @echo <span class="variable">$(srcs)</span></span><br><span class="line">    @echo <span class="variable">$(headers)</span></span><br></pre></td></tr></table></figure><h3 id="patsubst"><a href="#patsubst" class="headerlink" title="patsubst"></a>patsubst</h3><ul><li>模式替换， 返回替换后的文本</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">patsubst</span> pattern,replacement,text)</span></span><br><span class="line">        <span class="comment">#--- pattern 需要替换的模式</span></span><br><span class="line">        <span class="comment">#--- replacement 需要替换为</span></span><br><span class="line">        <span class="comment">#--- text 待处理内容，各项内容需要用空格隔开</span></span><br><span class="line">objs = main.ohello.o</span><br><span class="line">srcs = <span class="variable">$(<span class="built_in">subst</span> %.o,%.cpp,<span class="variable">$(objs)</span>)</span></span><br><span class="line">headers = <span class="variable">$(<span class="built_in">subst</span> %.cpp,%.h,<span class="variable">$(srcs)</span>)</span>  </span><br></pre></td></tr></table></figure><h3 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h3><ul><li>去除字符串头部和尾部的空格，中间如果连续有多个空格，则用一个空格替换，返回去除空格后的文本</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">strip</span> string)</span></span><br><span class="line">        <span class="comment">#--- string 需要去除空格的字符串</span></span><br><span class="line">files = aa hello.cpp      main.cpp     test.cpp</span><br><span class="line">files := <span class="variable">$(<span class="built_in">subst</span> aa,        ,<span class="variable">$(files)</span>)</span></span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">strip</span> <span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="findstring"><a href="#findstring" class="headerlink" title="findstring"></a>findstring</h3><ul><li>查找字符串，如果找到了，则返回对应的字符串，如果没找到，则反回空串</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">findstring</span> find,string)</span></span><br><span class="line">        <span class="comment">#--- find 需要查找的字符串</span></span><br><span class="line">        <span class="comment">#--- string 用来查找的内容</span></span><br><span class="line">files = hello.cpp main.cpp test.cpp</span><br><span class="line">find = <span class="variable">$(<span class="built_in">findstring</span> hel,<span class="variable">$(files)</span>)</span></span><br><span class="line">find = <span class="variable">$(<span class="built_in">findstring</span> HEL,<span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><ul><li>从文本中筛选出符合模式的内容并返回</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">filter</span> pattern…,text)</span></span><br><span class="line">        <span class="comment">#--- pattern 模式，可以有多个，用空格隔开</span></span><br><span class="line">        <span class="comment">#--- text 用来筛选的文本，多项内容需要用空格隔开，否则只会当一项来处理</span></span><br><span class="line"></span><br><span class="line">files = hello.cpp main.cpp test.cpp main.o hello.o hello.h</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">filter</span> %.o %.h,<span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="filter-out"><a href="#filter-out" class="headerlink" title="filter-out"></a>filter-out</h3><ul><li>与filter相反，过滤掉符合模式的，返回剩下的内容</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">filter</span>-out pattern…,text)</span></span><br><span class="line">        <span class="comment">#--- pattern 模式，可以有多个，用空格隔开</span></span><br><span class="line">        <span class="comment">#--- text 用来筛选的文本，多项内容需要用空格隔开，否则只会当一项来处理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">files = hello.cpp main.cpp test.cpp main.o hello.o hello.h</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">filter</span>-out %.o %.cpp,<span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><ul><li>将文本内的各项按字典顺序排列，并且移除重复项</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">sort</span> list)</span></span><br><span class="line">       <span class="comment"># --- list 需要排序内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">files = hello.cpp main.cpp test.cpp main.o hello.o hello.h main.cpp hello.cpp</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">sort</span> <span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="word"><a href="#word" class="headerlink" title="word"></a>word</h3><ul><li>用于返回文本中第n个单词</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">word</span> n,text)</span></span><br><span class="line">        <span class="comment"># --- n 第n个单词，从1开始，如果n大于总单词数，则返回空串</span></span><br><span class="line">        <span class="comment"># --- text 待处理文本</span></span><br><span class="line"></span><br><span class="line">files = hello.cpp main.cpp test.cpp main.o hello.o hello.h main.cpp hello.cpp</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">word</span> 3,<span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="wordlist"><a href="#wordlist" class="headerlink" title="wordlist"></a>wordlist</h3><ul><li>用于返回文本指定范围内的单词列表</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">wordlist</span> start,end,text)</span></span><br><span class="line">        <span class="comment">#--- start 起始位置，如果大于单词总数，则返回空串</span></span><br><span class="line">        <span class="comment">#--- end 结束位置，如果大于单词总数，则返回起始位置之后全部，如果start &gt; end，什么都不返回</span></span><br><span class="line"></span><br><span class="line">files = hello.cpp main.cpp test.cpp main.o hello.o hello.h main.cpp hello.cpp</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">wordlist</span> 3,6,<span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="words"><a href="#words" class="headerlink" title="words"></a>words</h3><ul><li>返回文本中单词数</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(words text)</span></span><br><span class="line">       <span class="comment"># --- text 需要处理的文本</span></span><br><span class="line"></span><br><span class="line">files = hello.cpp main.cpp test.cpp main.o hello.o hello.h main.cpp hello.cpp</span><br><span class="line">nums = <span class="variable">$(words <span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="firstword"><a href="#firstword" class="headerlink" title="firstword"></a>firstword</h3><ul><li>返回第一个单词</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">firstword</span> text)</span></span><br></pre></td></tr></table></figure><h3 id="lastword"><a href="#lastword" class="headerlink" title="lastword"></a>lastword</h3><ul><li>返回最后一个单词</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">lastword</span> text)</span></span><br></pre></td></tr></table></figure><h2 id="文件名处理函数"><a href="#文件名处理函数" class="headerlink" title="文件名处理函数"></a>文件名处理函数</h2><h3 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h3><ul><li>返回文件目录</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">dir</span> files)</span></span><br><span class="line">        <span class="comment">#--- files 需要返回目录的文件名，可以有多个，用空格隔开</span></span><br><span class="line"></span><br><span class="line">files = src/hello.cpp main.cpp</span><br><span class="line"></span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">dir</span> <span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="notdir"><a href="#notdir" class="headerlink" title="notdir"></a>notdir</h3><ul><li>返回除了目录部分的文件名</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">notdir</span> files)</span></span><br><span class="line">        <span class="comment">#--- files 需要返回文件列表，可以有多个，用空格隔开</span></span><br><span class="line"></span><br><span class="line">files = src/hello.cpp main.cpp</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="suffix"><a href="#suffix" class="headerlink" title="suffix"></a>suffix</h3><ul><li>返回文件后缀名，如果没有后缀返回空</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">suffix</span> files)</span></span><br><span class="line">        <span class="comment">#--- files 需要返回后缀的文件名，可以有多个，用空格隔开</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">files = src/hello.cpp main.cpp hello.o hello.hpp hello</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">suffix</span> <span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h3><ul><li>返回除了文件名字后缀的部分</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">basename</span> files)</span></span><br><span class="line">       <span class="comment"># --- files 需要返回的文件名，可以有多个，用空格隔开</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">files = src/hello.cpp main.cpp hello.o hello.hpp hello</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">basename</span> <span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="addsuffix"><a href="#addsuffix" class="headerlink" title="addsuffix"></a>addsuffix</h3><ul><li>给文件名字添加后缀</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">addsuffix</span> <span class="built_in">suffix</span>,files)</span></span><br><span class="line">        <span class="comment">#--- suffix 需要添加的后缀</span></span><br><span class="line">        <span class="comment">#--- files 需要添加后缀的文件名，可以有多个，用空格隔开</span></span><br><span class="line"></span><br><span class="line">files = src/hello.cpp main.cpp hello.o hello.hpp hello</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">addsuffix</span> .exe,<span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="addprefix"><a href="#addprefix" class="headerlink" title="addprefix"></a>addprefix</h3><ul><li>给文件名字添加前缀</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">addprefix</span> prefix,files)</span></span><br><span class="line">        <span class="comment">#--- prefix 需要添加的前缀</span></span><br><span class="line">        <span class="comment">#--- files 需要添加前缀的文件名，可以有多个，用空格隔开</span></span><br><span class="line"></span><br><span class="line">files = src/hello.cpp main.cpp hello.o hello.hpp hello</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">addprefix</span> make/,<span class="variable">$(files)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><ul><li>将两个列表中的内容一对一连接，如果两个列表内容数量不相等，则多出来的部分原样返回</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">join</span> list1,list2)</span></span><br><span class="line">        <span class="comment">#--- list1 第一个列表</span></span><br><span class="line">        <span class="comment">#--- list2 需要连接的第二个列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = hello main test</span><br><span class="line">f2 = .cpp .hpp</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">join</span> <span class="variable">$(f1)</span>,<span class="variable">$(f2)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="wildcard"><a href="#wildcard" class="headerlink" title="wildcard"></a>wildcard</h3><ul><li>返回符合通配符号的文件列表</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">wildcard</span> pattern)</span></span><br><span class="line">        <span class="comment">#--- pattern 通配符</span></span><br><span class="line"></span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span></span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">wildcard</span> *)</span></span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">wildcard</span> src/*.cpp)</span></span><br></pre></td></tr></table></figure><h3 id="realpath"><a href="#realpath" class="headerlink" title="realpath"></a>realpath</h3><ul><li>返回文件的绝对路径</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">realpath</span> files)</span></span><br><span class="line">       <span class="comment"># --- files 需要返回绝对路径的文件，可以有多个，用空格隔开</span></span><br><span class="line"></span><br><span class="line">f3 = <span class="variable">$(<span class="built_in">wildcard</span> src/*)</span></span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">realpath</span> <span class="variable">$(f3)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="abspath"><a href="#abspath" class="headerlink" title="abspath"></a>abspath</h3><ul><li>返回绝对路径，用法同realpath，如果一个文件名不存在，realpath不会返回内容，abspath则会返回一个当前文件夹一下的绝对路径</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">abspath</span> files)</span></span><br></pre></td></tr></table></figure><h2 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><ul><li>条件判断，如果条件展开不是空串，则反回真的部分，否则返回假的部分</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">if</span> condition,then-part[,else-part])</span></span><br><span class="line">        <span class="comment">#--- condition 条件部分</span></span><br><span class="line">        <span class="comment">#--- then-part 条件为真时执行的部分</span></span><br><span class="line">        <span class="comment">#--- else-part 条件为假时执行的部分，如果省略则为假时返回空串</span></span><br><span class="line"></span><br><span class="line">files = src/hello.cpp main.cpp hello.o hello.hpp hello</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">if</span> <span class="variable">$(files)</span>,有文件,没有文件)</span></span><br></pre></td></tr></table></figure><h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><ul><li>返回条件中第一个不为空的部分</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">or</span> condition1[,condition2[,condition3…]])</span></span><br><span class="line"></span><br><span class="line">f1 = </span><br><span class="line">f2 = </span><br><span class="line">f3 = hello.cpp</span><br><span class="line">f4 = main.cpp</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">or</span> <span class="variable">$(f1)</span>,<span class="variable">$(f2)</span>,<span class="variable">$(f3)</span>,<span class="variable">$(f4)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><ul><li>如果条件中有一个为空串，则返回空，如果全都不为空，则返回最后一个条件</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">and</span> condition1[,condition2[,condition3…]])</span></span><br><span class="line"></span><br><span class="line">f1 = 12</span><br><span class="line">f2 = 34</span><br><span class="line">f3 = hello.cpp</span><br><span class="line">f4 = main.cpp</span><br><span class="line">files2 = <span class="variable">$(<span class="built_in">and</span> <span class="variable">$(f1)</span>,<span class="variable">$(f2)</span>,<span class="variable">$(f3)</span>,<span class="variable">$(f4)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="intcomp"><a href="#intcomp" class="headerlink" title="intcomp"></a>intcomp</h3><ul><li>比较两个整数大小，并返回对应操作结果（GNU make 4.4以上版本）</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(intcmp lhs,rhs[,lt-part[,eq-part[,gt-part]]])</span> </span><br><span class="line">        <span class="comment">#--- lhs 第一个数</span></span><br><span class="line">        <span class="comment">#--- rhs 第二个数</span></span><br><span class="line">        <span class="comment">#--- lt-part  lhs &lt; rhs时执行</span></span><br><span class="line">        <span class="comment">#--- eq-part  lhs = rhs时执行</span></span><br><span class="line">        <span class="comment">#--- gt-part  lhs &gt; rhs时执行</span></span><br><span class="line">        <span class="comment">#--- 如果只提供前两个参数，则lhs == rhs时返回数值，否则返回空串 </span></span><br><span class="line">        <span class="comment">#    参数为lhs,rhs,lt-part时，当lhs &lt; rhs时返回lt-part结果，否则返回空</span></span><br><span class="line">        <span class="comment">#    参数为lhs,rhs,lt-part,eq-part，lhs &lt; rhs返回lt-part结果，否则都返回eq-part结果</span></span><br><span class="line">        <span class="comment">#    参数全时，lhs &lt; rhs返回lt-part，lhs == rhs返回eq-part, lhs &gt; rhs返回gt-part</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@echo <span class="variable">$(intcmp 2,2,-1,0,1)</span></span><br></pre></td></tr></table></figure><h2 id="makefile常用函数"><a href="#makefile常用函数" class="headerlink" title="makefile常用函数"></a>makefile常用函数</h2><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><ul><li>读写文件</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">file</span> op filename[,text])</span></span><br><span class="line">        <span class="comment">#--- op 操作</span></span><br><span class="line">        <span class="comment">#        &gt; 覆盖</span></span><br><span class="line">        <span class="comment">#        &gt;&gt; 追加</span></span><br><span class="line">        <span class="comment">#        &lt; 读</span></span><br><span class="line">        <span class="comment">#--- filename 需要操作的文件名</span></span><br><span class="line">        <span class="comment">#--- text 写入的文本内容，读取是不需要这个参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">files = src/hello.cpp main.cpp hello.o hello.hpp hello</span><br><span class="line">write = <span class="variable">$(<span class="built_in">file</span> &gt; makewrite.txt,<span class="variable">$(files)</span>)</span></span><br><span class="line">read = <span class="variable">$(<span class="built_in">file</span> &lt; makewrite.txt)</span></span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><ul><li>对一列用空格隔开的字符序列中每一项进行处理，并返回处理后的列表</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">foreach</span> each,list,process)</span></span><br><span class="line">        <span class="comment">#--- each list中的每一项</span></span><br><span class="line">        <span class="comment">#--- list 需要处理的字符串序列，用空格隔开</span></span><br><span class="line">        <span class="comment">#--- process 需要对每一项进行的处理</span></span><br><span class="line"></span><br><span class="line">list = 1 2 3 4 5</span><br><span class="line">result = <span class="variable">$(<span class="built_in">foreach</span> each,<span class="variable">$(list)</span>,$(<span class="built_in">addprefix</span> cpp,$(<span class="built_in">addsuffix</span> .cpp,<span class="variable">$(each)</span>)</span>))</span><br></pre></td></tr></table></figure><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><ul><li>将一些复杂的表达式写成一个变量，用call可以像调用函数一样进行调用。类似于编程语言中的自定义函数。在函数中可以用$(n)来访问第n个参数</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">call</span> funcname,param1,param2,…)</span></span><br><span class="line">       <span class="comment"># --- funcname 自定义函数（变量名）</span></span><br><span class="line">       <span class="comment"># --- 参数至少一个，可以有多个，用逗号隔开</span></span><br><span class="line"></span><br><span class="line">dirof =  <span class="variable">$(<span class="built_in">dir</span> $(<span class="built_in">realpath</span> $(1)</span>)) <span class="variable">$(<span class="built_in">dir</span> $(<span class="built_in">realpath</span> $(2)</span>))</span><br><span class="line">result = <span class="variable">$(<span class="built_in">call</span> dirof,main.cpp,src/hello.cpp)</span></span><br></pre></td></tr></table></figure><h3 id="value"><a href="#value" class="headerlink" title="value"></a>value</h3><ul><li>对于不是立即展开的变量，可以查看变量的原始定义；对于立即展开的变量，直接返回变量值</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">value</span> variable)</span></span><br><span class="line"></span><br><span class="line">var = value function test</span><br><span class="line">var2 = <span class="variable">$(var)</span></span><br><span class="line">var3 := <span class="variable">$(var)</span></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    @echo <span class="variable">$(<span class="built_in">value</span> var2)</span></span><br><span class="line">    @echo <span class="variable">$(<span class="built_in">value</span> var3)</span></span><br></pre></td></tr></table></figure><h3 id="origin"><a href="#origin" class="headerlink" title="origin"></a>origin</h3><ul><li>查看一个变量定义的来源</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">origin</span> variable)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var2 = origin function </span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    @echo <span class="variable">$(<span class="built_in">origin</span> var1)</span>    <span class="comment"># undefined 未定义</span></span><br><span class="line">    @echo <span class="variable">$(<span class="built_in">origin</span> CC)</span>        <span class="comment"># default 默认变量</span></span><br><span class="line">    @echo <span class="variable">$(<span class="built_in">origin</span> JAVA_HOME)</span> <span class="comment"># environment 环境变量</span></span><br><span class="line">    @echo <span class="variable">$(<span class="built_in">origin</span> var2)</span>    <span class="comment"># file 在Makefile文件中定义的变量</span></span><br><span class="line">    @echo <span class="variable">$(<span class="built_in">origin</span> @)</span>        <span class="comment"># automatic 自动变量</span></span><br></pre></td></tr></table></figure><h3 id="flavor"><a href="#flavor" class="headerlink" title="flavor"></a>flavor</h3><ul><li>查看一个变量的赋值方式</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">flavor</span> variable)</span></span><br><span class="line"></span><br><span class="line">var2 = flavor function</span><br><span class="line">var3 := flavor funciton</span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    @echo <span class="variable">$(<span class="built_in">flavor</span> var1)</span>    <span class="comment"># undefined 未定义</span></span><br><span class="line">    @echo <span class="variable">$(<span class="built_in">flavor</span> var2)</span>    <span class="comment"># recursive 递归展开赋值</span></span><br><span class="line">    @echo <span class="variable">$(<span class="built_in">flavor</span> var3)</span>    <span class="comment"># simple 简单赋值</span></span><br></pre></td></tr></table></figure><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><ul><li>可以将一段文本生成Makefile的内容</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">eval</span> text)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> eval_target = </span><br><span class="line"><span class="section">eval:</span></span><br><span class="line">    @echo Target Eval Test</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(<span class="built_in">eval</span> <span class="variable">$(eval_target)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><ul><li>用来执行shell的命令的</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">files = <span class="variable">$(<span class="built_in">shell</span> ls *.cpp)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">shell</span> echo This is from <span class="built_in">shell</span> function)</span></span><br></pre></td></tr></table></figure><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>将一个字符串序列中的项拆开放入多个变量中，并对各个变量进行操作（GNU make 4.4以上版本）</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(let var1 [var2 ...],[list],proc)</span></span><br><span class="line">       <span class="comment"># --- var 变量，可以有多个，用空格隔开</span></span><br><span class="line">       <span class="comment"># --- list 待处理字符串，各项之间空格隔开</span></span><br><span class="line">       <span class="comment"># --- proc 对变量进行的操作，结果为let的返回值</span></span><br><span class="line">            将list中的值依次一项一项放到var中，如果var的个数多于list项数，那多出来的var是空串。如果</span><br><span class="line">            var的个数小于list项数，则先依次把前而的项放入var中，剩下的list所有项都放入最后一个var中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list = a b c d</span><br><span class="line">letfirst = <span class="variable">$(let first second rest,<span class="variable">$(list)</span>,<span class="variable">$(first)</span>)</span></span><br><span class="line">letrest = <span class="variable">$(let first second rest,<span class="variable">$(list)</span>,<span class="variable">$(rest)</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结合call可以对所有项进行递归处理</span></span><br><span class="line">reverse = <span class="variable">$(let first rest,$(1)</span>,<span class="variable">$(<span class="built_in">if</span> <span class="variable">$(rest)</span>,$(<span class="built_in">call</span> reverse,<span class="variable">$(rest)</span>)</span> )<span class="variable">$(first)</span>)</span><br><span class="line"><span class="section">all: ; @echo $(call reverse,d c b a)</span></span><br></pre></td></tr></table></figure><h2 id="信息提示函数"><a href="#信息提示函数" class="headerlink" title="信息提示函数"></a>信息提示函数</h2><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><ul><li>用来提示错误信息并终止make执行</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">error</span> text)</span></span><br><span class="line">        <span class="comment">#--- text 提示信息</span></span><br><span class="line"></span><br><span class="line">EXIT_STATUS = -1</span><br><span class="line"><span class="keyword">ifneq</span> (0, <span class="variable">$(EXIT_STATUS)</span>)</span><br><span class="line">    <span class="variable">$(<span class="built_in">error</span> An <span class="built_in">error</span> occured! make stopped!)</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><h3 id="warning"><a href="#warning" class="headerlink" title="warning"></a>warning</h3><ul><li>提示警告信息，make不会终止</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">warning</span> text)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ifneq</span> (0, <span class="variable">$(EXIT_STATUS)</span>)</span><br><span class="line">    <span class="variable">$(<span class="built_in">warning</span> This is a <span class="built_in">warning</span> message)</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><h3 id="info"><a href="#info" class="headerlink" title="info"></a>info</h3><ul><li>输出一些信息</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(info text…)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(info 编译开始.......)</span></span><br><span class="line"><span class="variable">$(info 编译结束)</span></span><br></pre></td></tr></table></figure><h2 id="多个makefile文件"><a href="#多个makefile文件" class="headerlink" title="多个makefile文件"></a>多个makefile文件</h2><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><ul><li>可以读入其他makefile文件的内容，效果就如同在include的位置用对应的文件内容替换一样。</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> mkf1 mkf2 <span class="comment"># 可以引入多个文件，用空格隔开</span></span><br><span class="line"><span class="keyword">include</span> *.mk    <span class="comment"># 可以用通配符，表示引入所有以.mk结尾的文件</span></span><br></pre></td></tr></table></figure><ul><li>如果找不到对应文件，则会报错，如果要忽略错误，可以在<code>include</code>前加<code>-</code></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-include</span> mkf1 mkf2</span><br></pre></td></tr></table></figure><h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><ul><li>可以通过export指令向子项目传递变量</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> var  <span class="comment"># 传递var</span></span><br><span class="line"><span class="keyword">export</span>         <span class="comment"># 传递所有变量</span></span><br><span class="line"><span class="keyword">unexport</span>    <span class="comment"># 取消传递</span></span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="-C"></a>-C</h3><ul><li>去到另一个文件夹里面执行make命令</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(MAKE)</span> -C dir_name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Makefile </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础</title>
      <link href="/2024/10/19/Linux%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/10/19/Linux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><h1 id="检测服务器端口"><a href="#检测服务器端口" class="headerlink" title="检测服务器端口"></a>检测服务器端口</h1><h3 id="本地服务端查看的"><a href="#本地服务端查看的" class="headerlink" title="本地服务端查看的"></a>本地服务端查看的</h3><ul><li><p>netstat -tunlp</p></li><li><p>ss -tunlp</p></li><li><p>lsof</p></li></ul><h3 id="远程登陆查看的"><a href="#远程登陆查看的" class="headerlink" title="远程登陆查看的"></a>远程登陆查看的</h3><ul><li>telnet</li><li>nmap</li><li>nc</li></ul><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><ul><li>管道命令</li><li>以行为单位</li><li>参数<ul><li>-n：仅仅显示脚本处理之后的结果</li><li>-e：使用指定脚本文件处理输入的文本文件</li><li>-f：直接将sed的动作写到一个文件内，-f filename</li><li>-r：支持拓展正则表达式</li><li>-i：直接修改读取的文件内容，不输出到终端</li><li>-v：显示版本信息</li></ul></li><li>删除第1-2行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-bash-4.2$ nl makefile | sed &#x27;1,2d&#x27;</span><br><span class="line">     3          for i in $$&#123;var&#125;; \</span><br><span class="line">     4          do \</span><br><span class="line">     5            echo &quot;$$i&quot;; \</span><br><span class="line">     6          done</span><br></pre></td></tr></table></figure><ul><li>删除第2行到文件末尾</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl makefile | sed &#x27;2,$d&#x27;</span><br></pre></td></tr></table></figure><ul><li>在第二行后面加上字符，如果是<kbd>2i</kbd>的话就是在第二行的上面，不是下面了，如果是后面加上多行的话，就是另外一个引号先不给，然后给\，后面再给另外一边的引号就结束了</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-bash-4.2$ nl makefile | sed &#x27;2a linzhiwen&#x27; </span><br><span class="line">     1  all:</span><br><span class="line">     2          @read -p &quot;Input element :&quot; var; \</span><br><span class="line">linzhiwen</span><br><span class="line">     3          for i in $$&#123;var&#125;; \</span><br><span class="line">     4          do \</span><br><span class="line">     5            echo &quot;$$i&quot;; \</span><br><span class="line">     6          done</span><br></pre></td></tr></table></figure><ul><li>将2到5行替换成linzhiwen, 就是change</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-bash-4.2$ nl makefile | sed &#x27;2,5c linzhiwen&#x27; </span><br><span class="line">     1  all:</span><br><span class="line">linzhiwen</span><br><span class="line">     6          done</span><br></pre></td></tr></table></figure><ul><li>只显示处理的结果-n，打印信息p，print，不加-n的区别就是重复显示，-n就是只显示处理的</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-bash-4.2$ nl makefile | sed -n &#x27;2,5p&#x27;</span><br><span class="line">     2          @read -p &quot;Input element :&quot; var; \</span><br><span class="line">     3          for i in $$&#123;var&#125;; \</span><br><span class="line">     4          do \</span><br><span class="line">     5            echo &quot;$$i&quot;; \</span><br><span class="line">-bash-4.2$ nl makefile | sed  &#x27;2,5p&#x27;</span><br><span class="line">     1  all:</span><br><span class="line">     2          @read -p &quot;Input element :&quot; var; \</span><br><span class="line">     2          @read -p &quot;Input element :&quot; var; \</span><br><span class="line">     3          for i in $$&#123;var&#125;; \</span><br><span class="line">     3          for i in $$&#123;var&#125;; \</span><br><span class="line">     4          do \</span><br><span class="line">     4          do \</span><br><span class="line">     5            echo &quot;$$i&quot;; \</span><br><span class="line">     5            echo &quot;$$i&quot;; \</span><br><span class="line">     6          done</span><br></pre></td></tr></table></figure><ul><li>搜索匹配的信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-bash-4.2$ nl makefile | sed  -n &#x27;/for/p&#x27;</span><br><span class="line">     3          for i in $$&#123;var&#125;; \</span><br></pre></td></tr></table></figure><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><blockquote><p>文本分析工具， awk ‘{pattern+action}’ &lt;filename&gt;</p></blockquote><ul><li>-F 来指定分隔符的，没有指定的情况下默认的是空格，或者是tab</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-bash-4.2$ cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">ftp</span><br><span class="line">nobody</span><br><span class="line">ods</span><br></pre></td></tr></table></figure><ul><li>$0是所有的域，$1是第一个</li><li>想要多个输出的话，中间中逗号分开，空格是没有用的，要给的话中间要给双引号，” “这样的是可以的</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-bash-4.2$ cat /etc/passwd | awk -F : &#x27;&#123;print $1,$7&#125;&#x27;</span><br><span class="line">root /bin/bash</span><br><span class="line">bin /sbin/nologin</span><br><span class="line">daemon /sbin/nologin</span><br><span class="line">adm /sbin/nologin</span><br><span class="line">lp /sbin/nologin</span><br><span class="line">sync /bin/sync</span><br></pre></td></tr></table></figure><ul><li>加上开头和结尾，都要加上双引号的，这个结尾我没有加是错的</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-bash-4.2$ cat /etc/passwd | awk -F : &#x27;BEGIN &#123;print &quot;nameshell&quot;&#125; &#123;print $1,$7&#125; END&#123;print hhhh&#125;&#x27;</span><br><span class="line">nameshell</span><br><span class="line">root /bin/bash</span><br><span class="line">bin /sbin/nologin</span><br><span class="line">daemon /sbin/nologin</span><br><span class="line">adm /sbin/nologin</span><br><span class="line">lp /sbin/nologin</span><br></pre></td></tr></table></figure><ul><li>匹配字符串，在输出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-bash-4.2$ cat /etc/passwd | awk -F : &#x27; BEGIN &#123;print &quot;nameshell&quot;&#125; /^root/ &#123;print $1,$7&#125; END&#123;print &quot;hhhh&quot;&#125;&#x27;</span><br><span class="line">nameshell</span><br><span class="line">root /bin/bash</span><br><span class="line">hhhh</span><br></pre></td></tr></table></figure><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><ul><li><p>精确匹配 -w（就是匹配word）</p></li><li><p>–color&#x3D;auto，给匹配到的加上颜色</p></li><li><p>取反 -v，就是不匹配</p></li><li><p>grep -c统计行数</p></li><li><p>-l显示匹配的文件，就是在多个文件里面搜索</p></li><li><p>-i 是不区分大小的，没有这个参数默认是区分大小写的</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell基础</title>
      <link href="/2024/10/19/Shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/10/19/Shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p><h2 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h2><h3 id="取出变量值"><a href="#取出变量值" class="headerlink" title="取出变量值"></a>取出变量值</h3><ul><li><p>单引号：所见即所得</p></li><li><p>双引号：输出引号里面的所有内容，识别特殊字符，弱引用</p></li><li><p>无引号：连续的符号可以不加引号，有空格有歧义，最好使用双引号</p></li><li><p>反引号：<kbd><code>ls</code></kbd>引用命令执行的结果，就等于$()用法</p></li><li><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3></li><li><p><a>$</a> : 获取shell脚本的文件名，以及脚本路径</p></li><li><p><a>$n</a> : 获取shell脚本的第n个参数，n在1-9之间，就可以写$1这样的，如果大于了10，就需要用$(10)，参数之间用空格隔开</p></li><li><p><a>$#</a> : 获取执行shell脚本后面的参数总个数</p></li><li><p><a>$*</a> : 获取shell脚本所有参数，不加引号等同于$@的作用，加上了引号就是把接受的参数作为单个字符串了 “$1  $2”</p></li><li><p><a>$@</a> : 不加引号，效果同上，加上了引号， 效果是分开每个参数，”$1”, “$2”， 空格保留</p></li></ul><h3 id="特殊状态变量"><a href="#特殊状态变量" class="headerlink" title="特殊状态变量"></a>特殊状态变量</h3><ul><li>$? ： 上一次命令执行是不是正常执行的，0正确，非0就是失败了</li><li>$$ ： 当前shell脚本的进程号</li><li>$! ： 上一次后台进程的PID</li><li>$_ ： 上次命令的最后一个参数</li></ul><h3 id="内置命令"><a href="#内置命令" class="headerlink" title="内置命令"></a>内置命令</h3><ul><li><h4 id="echo-：-输出内容到指定的"><a href="#echo-：-输出内容到指定的" class="headerlink" title="echo ： 输出内容到指定的"></a><a>echo</a> ： 输出内容到指定的</h4><ul><li>-n : 不换行输出内容</li><li>-e ： 解释转移字符</li><li>\n : 换行</li><li>\r ：回车</li><li>\t : tab</li><li>\b : 退格</li><li>\v ： 纵向制表符</li></ul></li><li><h4 id="eval-：-执行多个命令"><a href="#eval-：-执行多个命令" class="headerlink" title="eval ： 执行多个命令"></a><a>eval</a> ： 执行多个命令</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval ls; cd xxx</span><br></pre></td></tr></table></figure><ul><li><h4 id="exec：-不创建子shell，执行该命令，完成命令之后自己就exit了"><a href="#exec：-不创建子shell，执行该命令，完成命令之后自己就exit了" class="headerlink" title="exec： 不创建子shell，执行该命令，完成命令之后自己就exit了"></a><a>exec</a>： 不创建子shell，执行该命令，完成命令之后自己就exit了</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec date</span><br></pre></td></tr></table></figure><ul><li><h4 id="export"><a href="#export" class="headerlink" title="export"></a><a>export</a></h4></li><li><h4 id="read"><a href="#read" class="headerlink" title="read"></a><a>read</a></h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;Input :&quot; var</span><br></pre></td></tr></table></figure><ul><li><h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a><a>shift</a></h4></li></ul><h2 id="逻辑控制"><a href="#逻辑控制" class="headerlink" title="逻辑控制"></a>逻辑控制</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a><a>if</a></h3><blockquote><p>语法: 如果一行里面写了多个语句，就要写分号；了，如果是一行就写了一句话了，就不用写分号了</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if command</span><br><span class="line">then </span><br><span class="line">  command</span><br><span class="line">if</span><br></pre></td></tr></table></figure><ul><li>bash的if语句会直接运行if后面的命令，如果该命令执行正确（状态码位0），处于then的命令就会被执行，否则就不会被执行，或者执行其他的逻辑语句，最后到fi结束逻辑控制</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ pwd ]</span><br><span class="line">then </span><br><span class="line">echo &quot;hhh&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="if-then-else"><a href="#if-then-else" class="headerlink" title="if-then-else"></a><a>if-then-else</a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $1 -ge 2 ]</span><br><span class="line">  then</span><br><span class="line">    echo &quot;you need input a number more than 1&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;sorry&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="嵌套if"><a href="#嵌套if" class="headerlink" title="嵌套if"></a><a>嵌套if</a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if [ $1 -ge 2 ]</span><br><span class="line">  then</span><br><span class="line">    echo &quot;you need input a number more than 1&quot;</span><br><span class="line">else</span><br><span class="line">  if [ $1 -le 2 ]</span><br><span class="line">     echo &quot;sorry&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="elif语句"><a href="#elif语句" class="headerlink" title="elif语句"></a><a>elif语句</a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if [ $1 -le 20 ]</span><br><span class="line">  then</span><br><span class="line">    echo &quot;you need input a number more than 1&quot;</span><br><span class="line">elif [ $1 -ge  30 ]</span><br><span class="line">  then</span><br><span class="line">        echo &quot;hhhh&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="test"><a href="#test" class="headerlink" title="test"></a><a>test</a></h3><ul><li><p>test命令最短的定义可能是评估一个表达式；如果条件为真，则返回一个0。如果表达式不为真，则返回一个大于0的数值，也可以将其称为假值。检查最后所执行命令的状态的最简便的方法就是<kbd>$？</kbd></p></li><li><p>检测文件类型的option： test [option] filename，</p><ul><li><p>-e ： 该filename是不是存在</p></li><li><p>-f ： 该filename是不是文件</p></li><li><p>-d ： 该filename是不是目录</p></li><li><p>-b ： 该filename是不是要给block device</p></li><li><p>-c ： 该filename是不是一个character device</p></li><li><p>-s ： 该filename是不是一个socket</p></li><li><p>-p ： 该filename是不是一个FIFO（pipe）文件</p></li><li><p>-L ： 该filename是不是要给连结档</p></li></ul></li><li><p>文件权限的option ： test [option] filename</p><ul><li>-r 检测文件是不是有可读属性</li><li>-w 检测文件是不是有可写属性</li><li>-x 检测文件是不是有可执行属性</li><li>-u 检测文件是不是有SUID属性</li><li>-g 检测文件是不是有SGID属性</li><li>-k 检测文件是不是有Sticky bit属性</li><li>-s 检测文件是不是非空白文件</li></ul></li><li><p>两个文件之变的比较 ： test filename1 [option] filename2</p><ul><li>-nt （newer than）判断filename1是不是比filename2新</li><li>-ot （older than）判断filename1是不是比filename2旧</li><li>-ef 判断filename1与filename2是不是一个文件，可以用在判断hard link上面，是不是指向了同一个文件</li></ul></li><li><p>判断两个整数 ： test num1 [option] num2</p><ul><li>-eq : equal 判断两个数值相等的吗</li><li>-ne ： not equal 判断两个数值不相等的吗</li><li>-gt ： greater than 判断n1 大于 n2吗</li><li>-lt : less than 判断n1 小于 n2 吗</li><li>-ge ： greater than or equal 判断n1 大于等于 n2吗</li><li>-le ： less than or equal 判断n1 小于等于 n2吗</li></ul></li><li><p>判断字符串</p><ul><li><p>-z : 判断是不是空的，是用的就是true，不是空个，就是false</p></li><li><p>-n ： 判断是不是不是空的，不是空个就是true，是空的就是false</p></li><li><p>&#x3D; ： string1 是不是等于string2</p></li><li><p>!&#x3D; ： string1 是不是不等于string2</p></li></ul></li><li><p>&amp;&amp; 与 || （和c语言中的是一样的）</p></li><li><p>数学表达式： bash支持<strong>双小括号</strong>写入高级的数学表达式</p></li></ul><p><img src="https://s2.loli.net/2024/10/19/yfeJ1AmC9bQkFvL.png" alt="image-20240317154916014"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var=199</span><br><span class="line">if (( &quot;$var&quot; &gt; $1 ));then</span><br><span class="line">  echo &quot;$var is greater than $1&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="双中括号"><a href="#双中括号" class="headerlink" title="双中括号[[]]"></a>双中括号[[]]</h3><ul><li>双中括号提供了针对字符串的高级特性，模式匹配，正则表达式的匹配</li><li>&#x3D;&#x3D; ： 就是c语言里面的，是不是相等意思</li></ul><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><ul><li>就是和c语言里面是一样的</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">case &quot;$1&quot; in</span><br><span class="line">1)</span><br><span class="line">  echo &quot;\$1 is 1&quot;</span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">  echo &quot;\$2 is 2&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h3 id="for命令"><a href="#for命令" class="headerlink" title="for命令"></a>for命令</h3><ul><li>和c语言的一样,但是里面可能需要转义符号和双引号</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;1..100&#125;;do</span><br><span class="line"> echo &quot;$i&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>for遍历文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">for word in $(cat lin.sh)</span><br><span class="line">do</span><br><span class="line">echo &quot;$word&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>c语言风格的for循环</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (( a=1,b=2;a&lt;=10;a++,b++ ))</span><br><span class="line">do </span><br><span class="line">        echo &quot;$a &amp;&amp; $b&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while [ $1 -gt $2 ];do</span><br><span class="line"> echo &quot;$1 is greater than $2&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>执行多个命令的时候，每条命令都是单独一行的</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">while echo &quot;$1&quot; </span><br><span class="line"> [ $1 -gt $2 ] </span><br><span class="line">do</span><br><span class="line"> echo &quot;$1 is greater than $2&quot;</span><br><span class="line">sleep 23</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="until命令"><a href="#until命令" class="headerlink" title="until命令"></a>until命令</h3><ul><li>和while的用法是一样的，就是意思是相反的</li></ul><h3 id="IFS分隔符"><a href="#IFS分隔符" class="headerlink" title="IFS分隔符"></a>IFS分隔符</h3><ul><li>用来指定分隔符的，没有指定的话，好像是空格，可以指定的分割符有：空格，制表符，换行符，逗号</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">oldifs=$IFS</span><br><span class="line">IFS=,</span><br><span class="line">names=&quot;lin,zhi,wen&quot;</span><br><span class="line">for i in $names;</span><br><span class="line">do</span><br><span class="line">  echo $i</span><br><span class="line">done</span><br><span class="line">IFS=$oldifs</span><br></pre></td></tr></table></figure><h3 id="打断循环"><a href="#打断循环" class="headerlink" title="打断循环"></a>打断循环</h3><ul><li>break<ul><li>break 2，就是跳出两层循环，其他的和c语言是一样的</li></ul></li><li>continue： 和c是一样的</li></ul><h3 id="循环输出的重新定向"><a href="#循环输出的重新定向" class="headerlink" title="循环输出的重新定向"></a>循环输出的重新定向</h3><ul><li>在shell脚本里面，循环输出后的结果，可以进行重定向</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">oldifs=$IFS</span><br><span class="line">IFS=,</span><br><span class="line">names=&quot;lin,zhi,wen&quot;</span><br><span class="line">for i in $names;</span><br><span class="line">do</span><br><span class="line">  echo $i</span><br><span class="line">done &gt; tudou.txt</span><br><span class="line">IFS=$oldifs</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h3><ul><li>当你需要一段重复的代码的时候，就可以把这段代码定义成函数了，可以重复的调用，下面是两种常用的定义函数的方式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">标准的函数的定义，func_name后面可以不给括号，建议标准的写法吧</span></span><br><span class="line">function func_name() &#123;</span><br><span class="line">command</span><br><span class="line">return 状态码</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简化的函数的定义</span></span><br><span class="line">func_name() &#123;</span><br><span class="line">command</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lin_func_use() &#123;</span><br><span class="line">        echo &quot;$1&quot;</span><br><span class="line">&#125;</span><br><span class="line">if [ $# -gt 1 ];then</span><br><span class="line">  lin_func_use &quot;$1&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>函数名需要唯一，负责会覆盖函数的定义的，就是和c语言一样的</li><li>在函数里面使用<kbd>return</kbd>命令来定制特殊的退出状态码，也可以保存到变量里面</li><li>函数里面的变量是属于局部变量的，写在脚本里面的变量是全局变量（除了函数体内部的）</li><li>可以在函数体里面生命上<kbd>local</kbd>，声明为局部的，虽然我认为没有什么用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">name=&quot;linzhiwen&quot;</span><br><span class="line">lin_func_use() &#123;</span><br><span class="line">        local name=&quot;lin&quot;</span><br><span class="line">        echo &quot;$name&quot;</span><br><span class="line">        return 2;</span><br><span class="line">&#125;</span><br><span class="line">if [ $# -gt 1 ];then</span><br><span class="line">  lin_func_use &quot;$1&quot;</span><br><span class="line">fi</span><br><span class="line">echo $?</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SystemVerilog基础</title>
      <link href="/2024/10/19/Programming/SystemvVerikog%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/10/19/Programming/SystemvVerikog%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a><span id="more"></span></a></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> IC </category>
          
          <category> SystemVerilog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IC </tag>
            
            <tag> SV </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
